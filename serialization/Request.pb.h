// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Request.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Request_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Request_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Request_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Request_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Request_2eproto;
namespace yi {
class ConnectionReq;
struct ConnectionReqDefaultTypeInternal;
extern ConnectionReqDefaultTypeInternal _ConnectionReq_default_instance_;
class ConnectionRet;
struct ConnectionRetDefaultTypeInternal;
extern ConnectionRetDefaultTypeInternal _ConnectionRet_default_instance_;
class ConnectionRet_FuncInfo;
struct ConnectionRet_FuncInfoDefaultTypeInternal;
extern ConnectionRet_FuncInfoDefaultTypeInternal _ConnectionRet_FuncInfo_default_instance_;
class FunctionCall;
struct FunctionCallDefaultTypeInternal;
extern FunctionCallDefaultTypeInternal _FunctionCall_default_instance_;
class FunctionCall_AddDoubleParams;
struct FunctionCall_AddDoubleParamsDefaultTypeInternal;
extern FunctionCall_AddDoubleParamsDefaultTypeInternal _FunctionCall_AddDoubleParams_default_instance_;
class FunctionCall_AddIntParams;
struct FunctionCall_AddIntParamsDefaultTypeInternal;
extern FunctionCall_AddIntParamsDefaultTypeInternal _FunctionCall_AddIntParams_default_instance_;
class FunctionCall_AddStringParams;
struct FunctionCall_AddStringParamsDefaultTypeInternal;
extern FunctionCall_AddStringParamsDefaultTypeInternal _FunctionCall_AddStringParams_default_instance_;
class FunctionCall_PlayerMoveParams;
struct FunctionCall_PlayerMoveParamsDefaultTypeInternal;
extern FunctionCall_PlayerMoveParamsDefaultTypeInternal _FunctionCall_PlayerMoveParams_default_instance_;
class FunctionRet;
struct FunctionRetDefaultTypeInternal;
extern FunctionRetDefaultTypeInternal _FunctionRet_default_instance_;
class FunctionRet_AddDoubleRet;
struct FunctionRet_AddDoubleRetDefaultTypeInternal;
extern FunctionRet_AddDoubleRetDefaultTypeInternal _FunctionRet_AddDoubleRet_default_instance_;
class FunctionRet_AddIntRet;
struct FunctionRet_AddIntRetDefaultTypeInternal;
extern FunctionRet_AddIntRetDefaultTypeInternal _FunctionRet_AddIntRet_default_instance_;
class FunctionRet_AddStringRet;
struct FunctionRet_AddStringRetDefaultTypeInternal;
extern FunctionRet_AddStringRetDefaultTypeInternal _FunctionRet_AddStringRet_default_instance_;
class FunctionRet_PlayerMoveRet;
struct FunctionRet_PlayerMoveRetDefaultTypeInternal;
extern FunctionRet_PlayerMoveRetDefaultTypeInternal _FunctionRet_PlayerMoveRet_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
}  // namespace yi
PROTOBUF_NAMESPACE_OPEN
template<> ::yi::ConnectionReq* Arena::CreateMaybeMessage<::yi::ConnectionReq>(Arena*);
template<> ::yi::ConnectionRet* Arena::CreateMaybeMessage<::yi::ConnectionRet>(Arena*);
template<> ::yi::ConnectionRet_FuncInfo* Arena::CreateMaybeMessage<::yi::ConnectionRet_FuncInfo>(Arena*);
template<> ::yi::FunctionCall* Arena::CreateMaybeMessage<::yi::FunctionCall>(Arena*);
template<> ::yi::FunctionCall_AddDoubleParams* Arena::CreateMaybeMessage<::yi::FunctionCall_AddDoubleParams>(Arena*);
template<> ::yi::FunctionCall_AddIntParams* Arena::CreateMaybeMessage<::yi::FunctionCall_AddIntParams>(Arena*);
template<> ::yi::FunctionCall_AddStringParams* Arena::CreateMaybeMessage<::yi::FunctionCall_AddStringParams>(Arena*);
template<> ::yi::FunctionCall_PlayerMoveParams* Arena::CreateMaybeMessage<::yi::FunctionCall_PlayerMoveParams>(Arena*);
template<> ::yi::FunctionRet* Arena::CreateMaybeMessage<::yi::FunctionRet>(Arena*);
template<> ::yi::FunctionRet_AddDoubleRet* Arena::CreateMaybeMessage<::yi::FunctionRet_AddDoubleRet>(Arena*);
template<> ::yi::FunctionRet_AddIntRet* Arena::CreateMaybeMessage<::yi::FunctionRet_AddIntRet>(Arena*);
template<> ::yi::FunctionRet_AddStringRet* Arena::CreateMaybeMessage<::yi::FunctionRet_AddStringRet>(Arena*);
template<> ::yi::FunctionRet_PlayerMoveRet* Arena::CreateMaybeMessage<::yi::FunctionRet_PlayerMoveRet>(Arena*);
template<> ::yi::Request* Arena::CreateMaybeMessage<::yi::Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace yi {

enum Request_RequestType : int {
  Request_RequestType_ConnectionReq = 0,
  Request_RequestType_ConnectionRet = 1,
  Request_RequestType_FunctionCall = 2,
  Request_RequestType_FunctionRet = 3
};
bool Request_RequestType_IsValid(int value);
constexpr Request_RequestType Request_RequestType_RequestType_MIN = Request_RequestType_ConnectionReq;
constexpr Request_RequestType Request_RequestType_RequestType_MAX = Request_RequestType_FunctionRet;
constexpr int Request_RequestType_RequestType_ARRAYSIZE = Request_RequestType_RequestType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Request_RequestType_descriptor();
template<typename T>
inline const std::string& Request_RequestType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Request_RequestType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Request_RequestType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Request_RequestType_descriptor(), enum_t_value);
}
inline bool Request_RequestType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Request_RequestType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Request_RequestType>(
    Request_RequestType_descriptor(), name, value);
}
// ===================================================================

class ConnectionReq final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:yi.ConnectionReq) */ {
 public:
  inline ConnectionReq() : ConnectionReq(nullptr) {}
  explicit constexpr ConnectionReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectionReq(const ConnectionReq& from);
  ConnectionReq(ConnectionReq&& from) noexcept
    : ConnectionReq() {
    *this = ::std::move(from);
  }

  inline ConnectionReq& operator=(const ConnectionReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionReq& operator=(ConnectionReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectionReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectionReq* internal_default_instance() {
    return reinterpret_cast<const ConnectionReq*>(
               &_ConnectionReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConnectionReq& a, ConnectionReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectionReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectionReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ConnectionReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ConnectionReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yi.ConnectionReq";
  }
  protected:
  explicit ConnectionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:yi.ConnectionReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Request_2eproto;
};
// -------------------------------------------------------------------

class ConnectionRet_FuncInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yi.ConnectionRet.FuncInfo) */ {
 public:
  inline ConnectionRet_FuncInfo() : ConnectionRet_FuncInfo(nullptr) {}
  ~ConnectionRet_FuncInfo() override;
  explicit constexpr ConnectionRet_FuncInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectionRet_FuncInfo(const ConnectionRet_FuncInfo& from);
  ConnectionRet_FuncInfo(ConnectionRet_FuncInfo&& from) noexcept
    : ConnectionRet_FuncInfo() {
    *this = ::std::move(from);
  }

  inline ConnectionRet_FuncInfo& operator=(const ConnectionRet_FuncInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionRet_FuncInfo& operator=(ConnectionRet_FuncInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectionRet_FuncInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectionRet_FuncInfo* internal_default_instance() {
    return reinterpret_cast<const ConnectionRet_FuncInfo*>(
               &_ConnectionRet_FuncInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConnectionRet_FuncInfo& a, ConnectionRet_FuncInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionRet_FuncInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionRet_FuncInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectionRet_FuncInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectionRet_FuncInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnectionRet_FuncInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConnectionRet_FuncInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionRet_FuncInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yi.ConnectionRet.FuncInfo";
  }
  protected:
  explicit ConnectionRet_FuncInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFuncNameFieldNumber = 1,
    kParamsTypeFieldNumber = 2,
    kReturnTypeFieldNumber = 3,
  };
  // required string func_name = 1;
  bool has_func_name() const;
  private:
  bool _internal_has_func_name() const;
  public:
  void clear_func_name();
  const std::string& func_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_func_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_func_name();
  PROTOBUF_NODISCARD std::string* release_func_name();
  void set_allocated_func_name(std::string* func_name);
  private:
  const std::string& _internal_func_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_func_name(const std::string& value);
  std::string* _internal_mutable_func_name();
  public:

  // required string params_type = 2;
  bool has_params_type() const;
  private:
  bool _internal_has_params_type() const;
  public:
  void clear_params_type();
  const std::string& params_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_params_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_params_type();
  PROTOBUF_NODISCARD std::string* release_params_type();
  void set_allocated_params_type(std::string* params_type);
  private:
  const std::string& _internal_params_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_params_type(const std::string& value);
  std::string* _internal_mutable_params_type();
  public:

  // required string return_type = 3;
  bool has_return_type() const;
  private:
  bool _internal_has_return_type() const;
  public:
  void clear_return_type();
  const std::string& return_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_return_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_return_type();
  PROTOBUF_NODISCARD std::string* release_return_type();
  void set_allocated_return_type(std::string* return_type);
  private:
  const std::string& _internal_return_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_return_type(const std::string& value);
  std::string* _internal_mutable_return_type();
  public:

  // @@protoc_insertion_point(class_scope:yi.ConnectionRet.FuncInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr func_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr params_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr return_type_;
  friend struct ::TableStruct_Request_2eproto;
};
// -------------------------------------------------------------------

class ConnectionRet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yi.ConnectionRet) */ {
 public:
  inline ConnectionRet() : ConnectionRet(nullptr) {}
  ~ConnectionRet() override;
  explicit constexpr ConnectionRet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectionRet(const ConnectionRet& from);
  ConnectionRet(ConnectionRet&& from) noexcept
    : ConnectionRet() {
    *this = ::std::move(from);
  }

  inline ConnectionRet& operator=(const ConnectionRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionRet& operator=(ConnectionRet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectionRet& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectionRet* internal_default_instance() {
    return reinterpret_cast<const ConnectionRet*>(
               &_ConnectionRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ConnectionRet& a, ConnectionRet& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionRet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionRet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectionRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectionRet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConnectionRet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConnectionRet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectionRet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yi.ConnectionRet";
  }
  protected:
  explicit ConnectionRet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConnectionRet_FuncInfo FuncInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kFuncInfoFieldNumber = 1,
  };
  // repeated .yi.ConnectionRet.FuncInfo func_info = 1;
  int func_info_size() const;
  private:
  int _internal_func_info_size() const;
  public:
  void clear_func_info();
  ::yi::ConnectionRet_FuncInfo* mutable_func_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::yi::ConnectionRet_FuncInfo >*
      mutable_func_info();
  private:
  const ::yi::ConnectionRet_FuncInfo& _internal_func_info(int index) const;
  ::yi::ConnectionRet_FuncInfo* _internal_add_func_info();
  public:
  const ::yi::ConnectionRet_FuncInfo& func_info(int index) const;
  ::yi::ConnectionRet_FuncInfo* add_func_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::yi::ConnectionRet_FuncInfo >&
      func_info() const;

  // @@protoc_insertion_point(class_scope:yi.ConnectionRet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::yi::ConnectionRet_FuncInfo > func_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Request_2eproto;
};
// -------------------------------------------------------------------

class FunctionCall_AddIntParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yi.FunctionCall.AddIntParams) */ {
 public:
  inline FunctionCall_AddIntParams() : FunctionCall_AddIntParams(nullptr) {}
  ~FunctionCall_AddIntParams() override;
  explicit constexpr FunctionCall_AddIntParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionCall_AddIntParams(const FunctionCall_AddIntParams& from);
  FunctionCall_AddIntParams(FunctionCall_AddIntParams&& from) noexcept
    : FunctionCall_AddIntParams() {
    *this = ::std::move(from);
  }

  inline FunctionCall_AddIntParams& operator=(const FunctionCall_AddIntParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionCall_AddIntParams& operator=(FunctionCall_AddIntParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionCall_AddIntParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionCall_AddIntParams* internal_default_instance() {
    return reinterpret_cast<const FunctionCall_AddIntParams*>(
               &_FunctionCall_AddIntParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FunctionCall_AddIntParams& a, FunctionCall_AddIntParams& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionCall_AddIntParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionCall_AddIntParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionCall_AddIntParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionCall_AddIntParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionCall_AddIntParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FunctionCall_AddIntParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionCall_AddIntParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yi.FunctionCall.AddIntParams";
  }
  protected:
  explicit FunctionCall_AddIntParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 1,
    kRightFieldNumber = 2,
  };
  // required int32 left = 1;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  int32_t left() const;
  void set_left(int32_t value);
  private:
  int32_t _internal_left() const;
  void _internal_set_left(int32_t value);
  public:

  // required int32 right = 2;
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  int32_t right() const;
  void set_right(int32_t value);
  private:
  int32_t _internal_right() const;
  void _internal_set_right(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:yi.FunctionCall.AddIntParams)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t left_;
  int32_t right_;
  friend struct ::TableStruct_Request_2eproto;
};
// -------------------------------------------------------------------

class FunctionCall_AddDoubleParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yi.FunctionCall.AddDoubleParams) */ {
 public:
  inline FunctionCall_AddDoubleParams() : FunctionCall_AddDoubleParams(nullptr) {}
  ~FunctionCall_AddDoubleParams() override;
  explicit constexpr FunctionCall_AddDoubleParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionCall_AddDoubleParams(const FunctionCall_AddDoubleParams& from);
  FunctionCall_AddDoubleParams(FunctionCall_AddDoubleParams&& from) noexcept
    : FunctionCall_AddDoubleParams() {
    *this = ::std::move(from);
  }

  inline FunctionCall_AddDoubleParams& operator=(const FunctionCall_AddDoubleParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionCall_AddDoubleParams& operator=(FunctionCall_AddDoubleParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionCall_AddDoubleParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionCall_AddDoubleParams* internal_default_instance() {
    return reinterpret_cast<const FunctionCall_AddDoubleParams*>(
               &_FunctionCall_AddDoubleParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FunctionCall_AddDoubleParams& a, FunctionCall_AddDoubleParams& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionCall_AddDoubleParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionCall_AddDoubleParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionCall_AddDoubleParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionCall_AddDoubleParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionCall_AddDoubleParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FunctionCall_AddDoubleParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionCall_AddDoubleParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yi.FunctionCall.AddDoubleParams";
  }
  protected:
  explicit FunctionCall_AddDoubleParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 1,
    kRightFieldNumber = 2,
  };
  // required double left = 1;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  double left() const;
  void set_left(double value);
  private:
  double _internal_left() const;
  void _internal_set_left(double value);
  public:

  // required double right = 2;
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  double right() const;
  void set_right(double value);
  private:
  double _internal_right() const;
  void _internal_set_right(double value);
  public:

  // @@protoc_insertion_point(class_scope:yi.FunctionCall.AddDoubleParams)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double left_;
  double right_;
  friend struct ::TableStruct_Request_2eproto;
};
// -------------------------------------------------------------------

class FunctionCall_AddStringParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yi.FunctionCall.AddStringParams) */ {
 public:
  inline FunctionCall_AddStringParams() : FunctionCall_AddStringParams(nullptr) {}
  ~FunctionCall_AddStringParams() override;
  explicit constexpr FunctionCall_AddStringParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionCall_AddStringParams(const FunctionCall_AddStringParams& from);
  FunctionCall_AddStringParams(FunctionCall_AddStringParams&& from) noexcept
    : FunctionCall_AddStringParams() {
    *this = ::std::move(from);
  }

  inline FunctionCall_AddStringParams& operator=(const FunctionCall_AddStringParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionCall_AddStringParams& operator=(FunctionCall_AddStringParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionCall_AddStringParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionCall_AddStringParams* internal_default_instance() {
    return reinterpret_cast<const FunctionCall_AddStringParams*>(
               &_FunctionCall_AddStringParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FunctionCall_AddStringParams& a, FunctionCall_AddStringParams& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionCall_AddStringParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionCall_AddStringParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionCall_AddStringParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionCall_AddStringParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionCall_AddStringParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FunctionCall_AddStringParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionCall_AddStringParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yi.FunctionCall.AddStringParams";
  }
  protected:
  explicit FunctionCall_AddStringParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 1,
    kRightFieldNumber = 2,
  };
  // required string left = 1;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  const std::string& left() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_left(ArgT0&& arg0, ArgT... args);
  std::string* mutable_left();
  PROTOBUF_NODISCARD std::string* release_left();
  void set_allocated_left(std::string* left);
  private:
  const std::string& _internal_left() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_left(const std::string& value);
  std::string* _internal_mutable_left();
  public:

  // required string right = 2;
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  const std::string& right() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_right(ArgT0&& arg0, ArgT... args);
  std::string* mutable_right();
  PROTOBUF_NODISCARD std::string* release_right();
  void set_allocated_right(std::string* right);
  private:
  const std::string& _internal_right() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_right(const std::string& value);
  std::string* _internal_mutable_right();
  public:

  // @@protoc_insertion_point(class_scope:yi.FunctionCall.AddStringParams)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr left_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr right_;
  friend struct ::TableStruct_Request_2eproto;
};
// -------------------------------------------------------------------

class FunctionCall_PlayerMoveParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yi.FunctionCall.PlayerMoveParams) */ {
 public:
  inline FunctionCall_PlayerMoveParams() : FunctionCall_PlayerMoveParams(nullptr) {}
  ~FunctionCall_PlayerMoveParams() override;
  explicit constexpr FunctionCall_PlayerMoveParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionCall_PlayerMoveParams(const FunctionCall_PlayerMoveParams& from);
  FunctionCall_PlayerMoveParams(FunctionCall_PlayerMoveParams&& from) noexcept
    : FunctionCall_PlayerMoveParams() {
    *this = ::std::move(from);
  }

  inline FunctionCall_PlayerMoveParams& operator=(const FunctionCall_PlayerMoveParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionCall_PlayerMoveParams& operator=(FunctionCall_PlayerMoveParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionCall_PlayerMoveParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionCall_PlayerMoveParams* internal_default_instance() {
    return reinterpret_cast<const FunctionCall_PlayerMoveParams*>(
               &_FunctionCall_PlayerMoveParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FunctionCall_PlayerMoveParams& a, FunctionCall_PlayerMoveParams& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionCall_PlayerMoveParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionCall_PlayerMoveParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionCall_PlayerMoveParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionCall_PlayerMoveParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionCall_PlayerMoveParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FunctionCall_PlayerMoveParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionCall_PlayerMoveParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yi.FunctionCall.PlayerMoveParams";
  }
  protected:
  explicit FunctionCall_PlayerMoveParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kSpeedFieldNumber = 3,
    kAccelerationFieldNumber = 4,
    kAspectFieldNumber = 5,
    kAngleFieldNumber = 6,
  };
  // required double x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // required double y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // required double speed = 3;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  double speed() const;
  void set_speed(double value);
  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);
  public:

  // required double acceleration = 4;
  bool has_acceleration() const;
  private:
  bool _internal_has_acceleration() const;
  public:
  void clear_acceleration();
  double acceleration() const;
  void set_acceleration(double value);
  private:
  double _internal_acceleration() const;
  void _internal_set_acceleration(double value);
  public:

  // required double aspect = 5;
  bool has_aspect() const;
  private:
  bool _internal_has_aspect() const;
  public:
  void clear_aspect();
  double aspect() const;
  void set_aspect(double value);
  private:
  double _internal_aspect() const;
  void _internal_set_aspect(double value);
  public:

  // required double angle = 6;
  bool has_angle() const;
  private:
  bool _internal_has_angle() const;
  public:
  void clear_angle();
  double angle() const;
  void set_angle(double value);
  private:
  double _internal_angle() const;
  void _internal_set_angle(double value);
  public:

  // @@protoc_insertion_point(class_scope:yi.FunctionCall.PlayerMoveParams)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double speed_;
  double acceleration_;
  double aspect_;
  double angle_;
  friend struct ::TableStruct_Request_2eproto;
};
// -------------------------------------------------------------------

class FunctionCall final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yi.FunctionCall) */ {
 public:
  inline FunctionCall() : FunctionCall(nullptr) {}
  ~FunctionCall() override;
  explicit constexpr FunctionCall(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionCall(const FunctionCall& from);
  FunctionCall(FunctionCall&& from) noexcept
    : FunctionCall() {
    *this = ::std::move(from);
  }

  inline FunctionCall& operator=(const FunctionCall& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionCall& operator=(FunctionCall&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionCall& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionCall* internal_default_instance() {
    return reinterpret_cast<const FunctionCall*>(
               &_FunctionCall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FunctionCall& a, FunctionCall& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionCall* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionCall* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionCall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionCall>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionCall& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FunctionCall& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionCall* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yi.FunctionCall";
  }
  protected:
  explicit FunctionCall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FunctionCall_AddIntParams AddIntParams;
  typedef FunctionCall_AddDoubleParams AddDoubleParams;
  typedef FunctionCall_AddStringParams AddStringParams;
  typedef FunctionCall_PlayerMoveParams PlayerMoveParams;

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionNameFieldNumber = 1,
    kAddIntParamsFieldNumber = 2,
    kAddDoubleParamsFieldNumber = 3,
    kAddStringParamsFieldNumber = 4,
    kPlayerMoveParamsFieldNumber = 5,
  };
  // required string function_name = 1;
  bool has_function_name() const;
  private:
  bool _internal_has_function_name() const;
  public:
  void clear_function_name();
  const std::string& function_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_function_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_function_name();
  PROTOBUF_NODISCARD std::string* release_function_name();
  void set_allocated_function_name(std::string* function_name);
  private:
  const std::string& _internal_function_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_function_name(const std::string& value);
  std::string* _internal_mutable_function_name();
  public:

  // optional .yi.FunctionCall.AddIntParams add_int_params = 2;
  bool has_add_int_params() const;
  private:
  bool _internal_has_add_int_params() const;
  public:
  void clear_add_int_params();
  const ::yi::FunctionCall_AddIntParams& add_int_params() const;
  PROTOBUF_NODISCARD ::yi::FunctionCall_AddIntParams* release_add_int_params();
  ::yi::FunctionCall_AddIntParams* mutable_add_int_params();
  void set_allocated_add_int_params(::yi::FunctionCall_AddIntParams* add_int_params);
  private:
  const ::yi::FunctionCall_AddIntParams& _internal_add_int_params() const;
  ::yi::FunctionCall_AddIntParams* _internal_mutable_add_int_params();
  public:
  void unsafe_arena_set_allocated_add_int_params(
      ::yi::FunctionCall_AddIntParams* add_int_params);
  ::yi::FunctionCall_AddIntParams* unsafe_arena_release_add_int_params();

  // optional .yi.FunctionCall.AddDoubleParams add_double_params = 3;
  bool has_add_double_params() const;
  private:
  bool _internal_has_add_double_params() const;
  public:
  void clear_add_double_params();
  const ::yi::FunctionCall_AddDoubleParams& add_double_params() const;
  PROTOBUF_NODISCARD ::yi::FunctionCall_AddDoubleParams* release_add_double_params();
  ::yi::FunctionCall_AddDoubleParams* mutable_add_double_params();
  void set_allocated_add_double_params(::yi::FunctionCall_AddDoubleParams* add_double_params);
  private:
  const ::yi::FunctionCall_AddDoubleParams& _internal_add_double_params() const;
  ::yi::FunctionCall_AddDoubleParams* _internal_mutable_add_double_params();
  public:
  void unsafe_arena_set_allocated_add_double_params(
      ::yi::FunctionCall_AddDoubleParams* add_double_params);
  ::yi::FunctionCall_AddDoubleParams* unsafe_arena_release_add_double_params();

  // optional .yi.FunctionCall.AddStringParams add_string_params = 4;
  bool has_add_string_params() const;
  private:
  bool _internal_has_add_string_params() const;
  public:
  void clear_add_string_params();
  const ::yi::FunctionCall_AddStringParams& add_string_params() const;
  PROTOBUF_NODISCARD ::yi::FunctionCall_AddStringParams* release_add_string_params();
  ::yi::FunctionCall_AddStringParams* mutable_add_string_params();
  void set_allocated_add_string_params(::yi::FunctionCall_AddStringParams* add_string_params);
  private:
  const ::yi::FunctionCall_AddStringParams& _internal_add_string_params() const;
  ::yi::FunctionCall_AddStringParams* _internal_mutable_add_string_params();
  public:
  void unsafe_arena_set_allocated_add_string_params(
      ::yi::FunctionCall_AddStringParams* add_string_params);
  ::yi::FunctionCall_AddStringParams* unsafe_arena_release_add_string_params();

  // optional .yi.FunctionCall.PlayerMoveParams player_move_params = 5;
  bool has_player_move_params() const;
  private:
  bool _internal_has_player_move_params() const;
  public:
  void clear_player_move_params();
  const ::yi::FunctionCall_PlayerMoveParams& player_move_params() const;
  PROTOBUF_NODISCARD ::yi::FunctionCall_PlayerMoveParams* release_player_move_params();
  ::yi::FunctionCall_PlayerMoveParams* mutable_player_move_params();
  void set_allocated_player_move_params(::yi::FunctionCall_PlayerMoveParams* player_move_params);
  private:
  const ::yi::FunctionCall_PlayerMoveParams& _internal_player_move_params() const;
  ::yi::FunctionCall_PlayerMoveParams* _internal_mutable_player_move_params();
  public:
  void unsafe_arena_set_allocated_player_move_params(
      ::yi::FunctionCall_PlayerMoveParams* player_move_params);
  ::yi::FunctionCall_PlayerMoveParams* unsafe_arena_release_player_move_params();

  // @@protoc_insertion_point(class_scope:yi.FunctionCall)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_name_;
  ::yi::FunctionCall_AddIntParams* add_int_params_;
  ::yi::FunctionCall_AddDoubleParams* add_double_params_;
  ::yi::FunctionCall_AddStringParams* add_string_params_;
  ::yi::FunctionCall_PlayerMoveParams* player_move_params_;
  friend struct ::TableStruct_Request_2eproto;
};
// -------------------------------------------------------------------

class FunctionRet_AddIntRet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yi.FunctionRet.AddIntRet) */ {
 public:
  inline FunctionRet_AddIntRet() : FunctionRet_AddIntRet(nullptr) {}
  ~FunctionRet_AddIntRet() override;
  explicit constexpr FunctionRet_AddIntRet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionRet_AddIntRet(const FunctionRet_AddIntRet& from);
  FunctionRet_AddIntRet(FunctionRet_AddIntRet&& from) noexcept
    : FunctionRet_AddIntRet() {
    *this = ::std::move(from);
  }

  inline FunctionRet_AddIntRet& operator=(const FunctionRet_AddIntRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionRet_AddIntRet& operator=(FunctionRet_AddIntRet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionRet_AddIntRet& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionRet_AddIntRet* internal_default_instance() {
    return reinterpret_cast<const FunctionRet_AddIntRet*>(
               &_FunctionRet_AddIntRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FunctionRet_AddIntRet& a, FunctionRet_AddIntRet& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionRet_AddIntRet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionRet_AddIntRet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionRet_AddIntRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionRet_AddIntRet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionRet_AddIntRet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FunctionRet_AddIntRet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionRet_AddIntRet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yi.FunctionRet.AddIntRet";
  }
  protected:
  explicit FunctionRet_AddIntRet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetFieldNumber = 1,
  };
  // required int32 ret = 1;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  int32_t ret() const;
  void set_ret(int32_t value);
  private:
  int32_t _internal_ret() const;
  void _internal_set_ret(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:yi.FunctionRet.AddIntRet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t ret_;
  friend struct ::TableStruct_Request_2eproto;
};
// -------------------------------------------------------------------

class FunctionRet_AddDoubleRet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yi.FunctionRet.AddDoubleRet) */ {
 public:
  inline FunctionRet_AddDoubleRet() : FunctionRet_AddDoubleRet(nullptr) {}
  ~FunctionRet_AddDoubleRet() override;
  explicit constexpr FunctionRet_AddDoubleRet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionRet_AddDoubleRet(const FunctionRet_AddDoubleRet& from);
  FunctionRet_AddDoubleRet(FunctionRet_AddDoubleRet&& from) noexcept
    : FunctionRet_AddDoubleRet() {
    *this = ::std::move(from);
  }

  inline FunctionRet_AddDoubleRet& operator=(const FunctionRet_AddDoubleRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionRet_AddDoubleRet& operator=(FunctionRet_AddDoubleRet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionRet_AddDoubleRet& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionRet_AddDoubleRet* internal_default_instance() {
    return reinterpret_cast<const FunctionRet_AddDoubleRet*>(
               &_FunctionRet_AddDoubleRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FunctionRet_AddDoubleRet& a, FunctionRet_AddDoubleRet& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionRet_AddDoubleRet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionRet_AddDoubleRet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionRet_AddDoubleRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionRet_AddDoubleRet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionRet_AddDoubleRet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FunctionRet_AddDoubleRet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionRet_AddDoubleRet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yi.FunctionRet.AddDoubleRet";
  }
  protected:
  explicit FunctionRet_AddDoubleRet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetFieldNumber = 1,
  };
  // required double ret = 1;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  double ret() const;
  void set_ret(double value);
  private:
  double _internal_ret() const;
  void _internal_set_ret(double value);
  public:

  // @@protoc_insertion_point(class_scope:yi.FunctionRet.AddDoubleRet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double ret_;
  friend struct ::TableStruct_Request_2eproto;
};
// -------------------------------------------------------------------

class FunctionRet_AddStringRet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yi.FunctionRet.AddStringRet) */ {
 public:
  inline FunctionRet_AddStringRet() : FunctionRet_AddStringRet(nullptr) {}
  ~FunctionRet_AddStringRet() override;
  explicit constexpr FunctionRet_AddStringRet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionRet_AddStringRet(const FunctionRet_AddStringRet& from);
  FunctionRet_AddStringRet(FunctionRet_AddStringRet&& from) noexcept
    : FunctionRet_AddStringRet() {
    *this = ::std::move(from);
  }

  inline FunctionRet_AddStringRet& operator=(const FunctionRet_AddStringRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionRet_AddStringRet& operator=(FunctionRet_AddStringRet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionRet_AddStringRet& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionRet_AddStringRet* internal_default_instance() {
    return reinterpret_cast<const FunctionRet_AddStringRet*>(
               &_FunctionRet_AddStringRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(FunctionRet_AddStringRet& a, FunctionRet_AddStringRet& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionRet_AddStringRet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionRet_AddStringRet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionRet_AddStringRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionRet_AddStringRet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionRet_AddStringRet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FunctionRet_AddStringRet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionRet_AddStringRet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yi.FunctionRet.AddStringRet";
  }
  protected:
  explicit FunctionRet_AddStringRet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetFieldNumber = 1,
  };
  // required string ret = 1;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  const std::string& ret() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ret(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ret();
  PROTOBUF_NODISCARD std::string* release_ret();
  void set_allocated_ret(std::string* ret);
  private:
  const std::string& _internal_ret() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ret(const std::string& value);
  std::string* _internal_mutable_ret();
  public:

  // @@protoc_insertion_point(class_scope:yi.FunctionRet.AddStringRet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ret_;
  friend struct ::TableStruct_Request_2eproto;
};
// -------------------------------------------------------------------

class FunctionRet_PlayerMoveRet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yi.FunctionRet.PlayerMoveRet) */ {
 public:
  inline FunctionRet_PlayerMoveRet() : FunctionRet_PlayerMoveRet(nullptr) {}
  ~FunctionRet_PlayerMoveRet() override;
  explicit constexpr FunctionRet_PlayerMoveRet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionRet_PlayerMoveRet(const FunctionRet_PlayerMoveRet& from);
  FunctionRet_PlayerMoveRet(FunctionRet_PlayerMoveRet&& from) noexcept
    : FunctionRet_PlayerMoveRet() {
    *this = ::std::move(from);
  }

  inline FunctionRet_PlayerMoveRet& operator=(const FunctionRet_PlayerMoveRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionRet_PlayerMoveRet& operator=(FunctionRet_PlayerMoveRet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionRet_PlayerMoveRet& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionRet_PlayerMoveRet* internal_default_instance() {
    return reinterpret_cast<const FunctionRet_PlayerMoveRet*>(
               &_FunctionRet_PlayerMoveRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(FunctionRet_PlayerMoveRet& a, FunctionRet_PlayerMoveRet& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionRet_PlayerMoveRet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionRet_PlayerMoveRet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionRet_PlayerMoveRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionRet_PlayerMoveRet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionRet_PlayerMoveRet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FunctionRet_PlayerMoveRet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionRet_PlayerMoveRet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yi.FunctionRet.PlayerMoveRet";
  }
  protected:
  explicit FunctionRet_PlayerMoveRet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kSpeedFieldNumber = 3,
    kAspectFieldNumber = 5,
  };
  // required double x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // required double y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // required double speed = 3;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  double speed() const;
  void set_speed(double value);
  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);
  public:

  // required double aspect = 5;
  bool has_aspect() const;
  private:
  bool _internal_has_aspect() const;
  public:
  void clear_aspect();
  double aspect() const;
  void set_aspect(double value);
  private:
  double _internal_aspect() const;
  void _internal_set_aspect(double value);
  public:

  // @@protoc_insertion_point(class_scope:yi.FunctionRet.PlayerMoveRet)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double speed_;
  double aspect_;
  friend struct ::TableStruct_Request_2eproto;
};
// -------------------------------------------------------------------

class FunctionRet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yi.FunctionRet) */ {
 public:
  inline FunctionRet() : FunctionRet(nullptr) {}
  ~FunctionRet() override;
  explicit constexpr FunctionRet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionRet(const FunctionRet& from);
  FunctionRet(FunctionRet&& from) noexcept
    : FunctionRet() {
    *this = ::std::move(from);
  }

  inline FunctionRet& operator=(const FunctionRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionRet& operator=(FunctionRet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionRet& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionRet* internal_default_instance() {
    return reinterpret_cast<const FunctionRet*>(
               &_FunctionRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(FunctionRet& a, FunctionRet& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionRet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionRet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionRet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionRet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FunctionRet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionRet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yi.FunctionRet";
  }
  protected:
  explicit FunctionRet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FunctionRet_AddIntRet AddIntRet;
  typedef FunctionRet_AddDoubleRet AddDoubleRet;
  typedef FunctionRet_AddStringRet AddStringRet;
  typedef FunctionRet_PlayerMoveRet PlayerMoveRet;

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionNameFieldNumber = 1,
    kAddIntRetParamsFieldNumber = 2,
    kAddDoubleRetParamsFieldNumber = 3,
    kAddStringRetParamsFieldNumber = 4,
    kPlayerMoveRetParamsFieldNumber = 5,
  };
  // required string function_name = 1;
  bool has_function_name() const;
  private:
  bool _internal_has_function_name() const;
  public:
  void clear_function_name();
  const std::string& function_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_function_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_function_name();
  PROTOBUF_NODISCARD std::string* release_function_name();
  void set_allocated_function_name(std::string* function_name);
  private:
  const std::string& _internal_function_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_function_name(const std::string& value);
  std::string* _internal_mutable_function_name();
  public:

  // optional .yi.FunctionRet.AddIntRet add_int_ret_params = 2;
  bool has_add_int_ret_params() const;
  private:
  bool _internal_has_add_int_ret_params() const;
  public:
  void clear_add_int_ret_params();
  const ::yi::FunctionRet_AddIntRet& add_int_ret_params() const;
  PROTOBUF_NODISCARD ::yi::FunctionRet_AddIntRet* release_add_int_ret_params();
  ::yi::FunctionRet_AddIntRet* mutable_add_int_ret_params();
  void set_allocated_add_int_ret_params(::yi::FunctionRet_AddIntRet* add_int_ret_params);
  private:
  const ::yi::FunctionRet_AddIntRet& _internal_add_int_ret_params() const;
  ::yi::FunctionRet_AddIntRet* _internal_mutable_add_int_ret_params();
  public:
  void unsafe_arena_set_allocated_add_int_ret_params(
      ::yi::FunctionRet_AddIntRet* add_int_ret_params);
  ::yi::FunctionRet_AddIntRet* unsafe_arena_release_add_int_ret_params();

  // optional .yi.FunctionRet.AddDoubleRet add_double_ret_params = 3;
  bool has_add_double_ret_params() const;
  private:
  bool _internal_has_add_double_ret_params() const;
  public:
  void clear_add_double_ret_params();
  const ::yi::FunctionRet_AddDoubleRet& add_double_ret_params() const;
  PROTOBUF_NODISCARD ::yi::FunctionRet_AddDoubleRet* release_add_double_ret_params();
  ::yi::FunctionRet_AddDoubleRet* mutable_add_double_ret_params();
  void set_allocated_add_double_ret_params(::yi::FunctionRet_AddDoubleRet* add_double_ret_params);
  private:
  const ::yi::FunctionRet_AddDoubleRet& _internal_add_double_ret_params() const;
  ::yi::FunctionRet_AddDoubleRet* _internal_mutable_add_double_ret_params();
  public:
  void unsafe_arena_set_allocated_add_double_ret_params(
      ::yi::FunctionRet_AddDoubleRet* add_double_ret_params);
  ::yi::FunctionRet_AddDoubleRet* unsafe_arena_release_add_double_ret_params();

  // optional .yi.FunctionRet.AddStringRet add_string_ret_params = 4;
  bool has_add_string_ret_params() const;
  private:
  bool _internal_has_add_string_ret_params() const;
  public:
  void clear_add_string_ret_params();
  const ::yi::FunctionRet_AddStringRet& add_string_ret_params() const;
  PROTOBUF_NODISCARD ::yi::FunctionRet_AddStringRet* release_add_string_ret_params();
  ::yi::FunctionRet_AddStringRet* mutable_add_string_ret_params();
  void set_allocated_add_string_ret_params(::yi::FunctionRet_AddStringRet* add_string_ret_params);
  private:
  const ::yi::FunctionRet_AddStringRet& _internal_add_string_ret_params() const;
  ::yi::FunctionRet_AddStringRet* _internal_mutable_add_string_ret_params();
  public:
  void unsafe_arena_set_allocated_add_string_ret_params(
      ::yi::FunctionRet_AddStringRet* add_string_ret_params);
  ::yi::FunctionRet_AddStringRet* unsafe_arena_release_add_string_ret_params();

  // optional .yi.FunctionRet.PlayerMoveRet player_move_ret_params = 5;
  bool has_player_move_ret_params() const;
  private:
  bool _internal_has_player_move_ret_params() const;
  public:
  void clear_player_move_ret_params();
  const ::yi::FunctionRet_PlayerMoveRet& player_move_ret_params() const;
  PROTOBUF_NODISCARD ::yi::FunctionRet_PlayerMoveRet* release_player_move_ret_params();
  ::yi::FunctionRet_PlayerMoveRet* mutable_player_move_ret_params();
  void set_allocated_player_move_ret_params(::yi::FunctionRet_PlayerMoveRet* player_move_ret_params);
  private:
  const ::yi::FunctionRet_PlayerMoveRet& _internal_player_move_ret_params() const;
  ::yi::FunctionRet_PlayerMoveRet* _internal_mutable_player_move_ret_params();
  public:
  void unsafe_arena_set_allocated_player_move_ret_params(
      ::yi::FunctionRet_PlayerMoveRet* player_move_ret_params);
  ::yi::FunctionRet_PlayerMoveRet* unsafe_arena_release_player_move_ret_params();

  // @@protoc_insertion_point(class_scope:yi.FunctionRet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_name_;
  ::yi::FunctionRet_AddIntRet* add_int_ret_params_;
  ::yi::FunctionRet_AddDoubleRet* add_double_ret_params_;
  ::yi::FunctionRet_AddStringRet* add_string_ret_params_;
  ::yi::FunctionRet_PlayerMoveRet* player_move_ret_params_;
  friend struct ::TableStruct_Request_2eproto;
};
// -------------------------------------------------------------------

class Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yi.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  explicit constexpr Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yi.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Request_RequestType RequestType;
  static constexpr RequestType ConnectionReq =
    Request_RequestType_ConnectionReq;
  static constexpr RequestType ConnectionRet =
    Request_RequestType_ConnectionRet;
  static constexpr RequestType FunctionCall =
    Request_RequestType_FunctionCall;
  static constexpr RequestType FunctionRet =
    Request_RequestType_FunctionRet;
  static inline bool RequestType_IsValid(int value) {
    return Request_RequestType_IsValid(value);
  }
  static constexpr RequestType RequestType_MIN =
    Request_RequestType_RequestType_MIN;
  static constexpr RequestType RequestType_MAX =
    Request_RequestType_RequestType_MAX;
  static constexpr int RequestType_ARRAYSIZE =
    Request_RequestType_RequestType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  RequestType_descriptor() {
    return Request_RequestType_descriptor();
  }
  template<typename T>
  static inline const std::string& RequestType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, RequestType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function RequestType_Name.");
    return Request_RequestType_Name(enum_t_value);
  }
  static inline bool RequestType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      RequestType* value) {
    return Request_RequestType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionReqFieldNumber = 2,
    kConnectionRetFieldNumber = 3,
    kFunctionCallFieldNumber = 4,
    kFunctionRetFieldNumber = 5,
    kCallTypeFieldNumber = 1,
  };
  // optional .yi.ConnectionReq connection_req = 2;
  bool has_connection_req() const;
  private:
  bool _internal_has_connection_req() const;
  public:
  void clear_connection_req();
  const ::yi::ConnectionReq& connection_req() const;
  PROTOBUF_NODISCARD ::yi::ConnectionReq* release_connection_req();
  ::yi::ConnectionReq* mutable_connection_req();
  void set_allocated_connection_req(::yi::ConnectionReq* connection_req);
  private:
  const ::yi::ConnectionReq& _internal_connection_req() const;
  ::yi::ConnectionReq* _internal_mutable_connection_req();
  public:
  void unsafe_arena_set_allocated_connection_req(
      ::yi::ConnectionReq* connection_req);
  ::yi::ConnectionReq* unsafe_arena_release_connection_req();

  // optional .yi.ConnectionRet connection_ret = 3;
  bool has_connection_ret() const;
  private:
  bool _internal_has_connection_ret() const;
  public:
  void clear_connection_ret();
  const ::yi::ConnectionRet& connection_ret() const;
  PROTOBUF_NODISCARD ::yi::ConnectionRet* release_connection_ret();
  ::yi::ConnectionRet* mutable_connection_ret();
  void set_allocated_connection_ret(::yi::ConnectionRet* connection_ret);
  private:
  const ::yi::ConnectionRet& _internal_connection_ret() const;
  ::yi::ConnectionRet* _internal_mutable_connection_ret();
  public:
  void unsafe_arena_set_allocated_connection_ret(
      ::yi::ConnectionRet* connection_ret);
  ::yi::ConnectionRet* unsafe_arena_release_connection_ret();

  // optional .yi.FunctionCall function_call = 4;
  bool has_function_call() const;
  private:
  bool _internal_has_function_call() const;
  public:
  void clear_function_call();
  const ::yi::FunctionCall& function_call() const;
  PROTOBUF_NODISCARD ::yi::FunctionCall* release_function_call();
  ::yi::FunctionCall* mutable_function_call();
  void set_allocated_function_call(::yi::FunctionCall* function_call);
  private:
  const ::yi::FunctionCall& _internal_function_call() const;
  ::yi::FunctionCall* _internal_mutable_function_call();
  public:
  void unsafe_arena_set_allocated_function_call(
      ::yi::FunctionCall* function_call);
  ::yi::FunctionCall* unsafe_arena_release_function_call();

  // optional .yi.FunctionRet function_ret = 5;
  bool has_function_ret() const;
  private:
  bool _internal_has_function_ret() const;
  public:
  void clear_function_ret();
  const ::yi::FunctionRet& function_ret() const;
  PROTOBUF_NODISCARD ::yi::FunctionRet* release_function_ret();
  ::yi::FunctionRet* mutable_function_ret();
  void set_allocated_function_ret(::yi::FunctionRet* function_ret);
  private:
  const ::yi::FunctionRet& _internal_function_ret() const;
  ::yi::FunctionRet* _internal_mutable_function_ret();
  public:
  void unsafe_arena_set_allocated_function_ret(
      ::yi::FunctionRet* function_ret);
  ::yi::FunctionRet* unsafe_arena_release_function_ret();

  // required .yi.Request.RequestType call_type = 1;
  bool has_call_type() const;
  private:
  bool _internal_has_call_type() const;
  public:
  void clear_call_type();
  ::yi::Request_RequestType call_type() const;
  void set_call_type(::yi::Request_RequestType value);
  private:
  ::yi::Request_RequestType _internal_call_type() const;
  void _internal_set_call_type(::yi::Request_RequestType value);
  public:

  // @@protoc_insertion_point(class_scope:yi.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::yi::ConnectionReq* connection_req_;
  ::yi::ConnectionRet* connection_ret_;
  ::yi::FunctionCall* function_call_;
  ::yi::FunctionRet* function_ret_;
  int call_type_;
  friend struct ::TableStruct_Request_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConnectionReq

// -------------------------------------------------------------------

// ConnectionRet_FuncInfo

// required string func_name = 1;
inline bool ConnectionRet_FuncInfo::_internal_has_func_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ConnectionRet_FuncInfo::has_func_name() const {
  return _internal_has_func_name();
}
inline void ConnectionRet_FuncInfo::clear_func_name() {
  func_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ConnectionRet_FuncInfo::func_name() const {
  // @@protoc_insertion_point(field_get:yi.ConnectionRet.FuncInfo.func_name)
  return _internal_func_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConnectionRet_FuncInfo::set_func_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 func_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:yi.ConnectionRet.FuncInfo.func_name)
}
inline std::string* ConnectionRet_FuncInfo::mutable_func_name() {
  std::string* _s = _internal_mutable_func_name();
  // @@protoc_insertion_point(field_mutable:yi.ConnectionRet.FuncInfo.func_name)
  return _s;
}
inline const std::string& ConnectionRet_FuncInfo::_internal_func_name() const {
  return func_name_.Get();
}
inline void ConnectionRet_FuncInfo::_internal_set_func_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  func_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConnectionRet_FuncInfo::_internal_mutable_func_name() {
  _has_bits_[0] |= 0x00000001u;
  return func_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConnectionRet_FuncInfo::release_func_name() {
  // @@protoc_insertion_point(field_release:yi.ConnectionRet.FuncInfo.func_name)
  if (!_internal_has_func_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = func_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (func_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    func_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ConnectionRet_FuncInfo::set_allocated_func_name(std::string* func_name) {
  if (func_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  func_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), func_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (func_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    func_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:yi.ConnectionRet.FuncInfo.func_name)
}

// required string params_type = 2;
inline bool ConnectionRet_FuncInfo::_internal_has_params_type() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ConnectionRet_FuncInfo::has_params_type() const {
  return _internal_has_params_type();
}
inline void ConnectionRet_FuncInfo::clear_params_type() {
  params_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ConnectionRet_FuncInfo::params_type() const {
  // @@protoc_insertion_point(field_get:yi.ConnectionRet.FuncInfo.params_type)
  return _internal_params_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConnectionRet_FuncInfo::set_params_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 params_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:yi.ConnectionRet.FuncInfo.params_type)
}
inline std::string* ConnectionRet_FuncInfo::mutable_params_type() {
  std::string* _s = _internal_mutable_params_type();
  // @@protoc_insertion_point(field_mutable:yi.ConnectionRet.FuncInfo.params_type)
  return _s;
}
inline const std::string& ConnectionRet_FuncInfo::_internal_params_type() const {
  return params_type_.Get();
}
inline void ConnectionRet_FuncInfo::_internal_set_params_type(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  params_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConnectionRet_FuncInfo::_internal_mutable_params_type() {
  _has_bits_[0] |= 0x00000002u;
  return params_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConnectionRet_FuncInfo::release_params_type() {
  // @@protoc_insertion_point(field_release:yi.ConnectionRet.FuncInfo.params_type)
  if (!_internal_has_params_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = params_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (params_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    params_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ConnectionRet_FuncInfo::set_allocated_params_type(std::string* params_type) {
  if (params_type != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  params_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), params_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (params_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    params_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:yi.ConnectionRet.FuncInfo.params_type)
}

// required string return_type = 3;
inline bool ConnectionRet_FuncInfo::_internal_has_return_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ConnectionRet_FuncInfo::has_return_type() const {
  return _internal_has_return_type();
}
inline void ConnectionRet_FuncInfo::clear_return_type() {
  return_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ConnectionRet_FuncInfo::return_type() const {
  // @@protoc_insertion_point(field_get:yi.ConnectionRet.FuncInfo.return_type)
  return _internal_return_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ConnectionRet_FuncInfo::set_return_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 return_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:yi.ConnectionRet.FuncInfo.return_type)
}
inline std::string* ConnectionRet_FuncInfo::mutable_return_type() {
  std::string* _s = _internal_mutable_return_type();
  // @@protoc_insertion_point(field_mutable:yi.ConnectionRet.FuncInfo.return_type)
  return _s;
}
inline const std::string& ConnectionRet_FuncInfo::_internal_return_type() const {
  return return_type_.Get();
}
inline void ConnectionRet_FuncInfo::_internal_set_return_type(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  return_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ConnectionRet_FuncInfo::_internal_mutable_return_type() {
  _has_bits_[0] |= 0x00000004u;
  return return_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ConnectionRet_FuncInfo::release_return_type() {
  // @@protoc_insertion_point(field_release:yi.ConnectionRet.FuncInfo.return_type)
  if (!_internal_has_return_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  auto* p = return_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (return_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    return_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void ConnectionRet_FuncInfo::set_allocated_return_type(std::string* return_type) {
  if (return_type != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  return_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), return_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (return_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    return_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:yi.ConnectionRet.FuncInfo.return_type)
}

// -------------------------------------------------------------------

// ConnectionRet

// repeated .yi.ConnectionRet.FuncInfo func_info = 1;
inline int ConnectionRet::_internal_func_info_size() const {
  return func_info_.size();
}
inline int ConnectionRet::func_info_size() const {
  return _internal_func_info_size();
}
inline void ConnectionRet::clear_func_info() {
  func_info_.Clear();
}
inline ::yi::ConnectionRet_FuncInfo* ConnectionRet::mutable_func_info(int index) {
  // @@protoc_insertion_point(field_mutable:yi.ConnectionRet.func_info)
  return func_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::yi::ConnectionRet_FuncInfo >*
ConnectionRet::mutable_func_info() {
  // @@protoc_insertion_point(field_mutable_list:yi.ConnectionRet.func_info)
  return &func_info_;
}
inline const ::yi::ConnectionRet_FuncInfo& ConnectionRet::_internal_func_info(int index) const {
  return func_info_.Get(index);
}
inline const ::yi::ConnectionRet_FuncInfo& ConnectionRet::func_info(int index) const {
  // @@protoc_insertion_point(field_get:yi.ConnectionRet.func_info)
  return _internal_func_info(index);
}
inline ::yi::ConnectionRet_FuncInfo* ConnectionRet::_internal_add_func_info() {
  return func_info_.Add();
}
inline ::yi::ConnectionRet_FuncInfo* ConnectionRet::add_func_info() {
  ::yi::ConnectionRet_FuncInfo* _add = _internal_add_func_info();
  // @@protoc_insertion_point(field_add:yi.ConnectionRet.func_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::yi::ConnectionRet_FuncInfo >&
ConnectionRet::func_info() const {
  // @@protoc_insertion_point(field_list:yi.ConnectionRet.func_info)
  return func_info_;
}

// -------------------------------------------------------------------

// FunctionCall_AddIntParams

// required int32 left = 1;
inline bool FunctionCall_AddIntParams::_internal_has_left() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FunctionCall_AddIntParams::has_left() const {
  return _internal_has_left();
}
inline void FunctionCall_AddIntParams::clear_left() {
  left_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t FunctionCall_AddIntParams::_internal_left() const {
  return left_;
}
inline int32_t FunctionCall_AddIntParams::left() const {
  // @@protoc_insertion_point(field_get:yi.FunctionCall.AddIntParams.left)
  return _internal_left();
}
inline void FunctionCall_AddIntParams::_internal_set_left(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  left_ = value;
}
inline void FunctionCall_AddIntParams::set_left(int32_t value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:yi.FunctionCall.AddIntParams.left)
}

// required int32 right = 2;
inline bool FunctionCall_AddIntParams::_internal_has_right() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FunctionCall_AddIntParams::has_right() const {
  return _internal_has_right();
}
inline void FunctionCall_AddIntParams::clear_right() {
  right_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t FunctionCall_AddIntParams::_internal_right() const {
  return right_;
}
inline int32_t FunctionCall_AddIntParams::right() const {
  // @@protoc_insertion_point(field_get:yi.FunctionCall.AddIntParams.right)
  return _internal_right();
}
inline void FunctionCall_AddIntParams::_internal_set_right(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  right_ = value;
}
inline void FunctionCall_AddIntParams::set_right(int32_t value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:yi.FunctionCall.AddIntParams.right)
}

// -------------------------------------------------------------------

// FunctionCall_AddDoubleParams

// required double left = 1;
inline bool FunctionCall_AddDoubleParams::_internal_has_left() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FunctionCall_AddDoubleParams::has_left() const {
  return _internal_has_left();
}
inline void FunctionCall_AddDoubleParams::clear_left() {
  left_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double FunctionCall_AddDoubleParams::_internal_left() const {
  return left_;
}
inline double FunctionCall_AddDoubleParams::left() const {
  // @@protoc_insertion_point(field_get:yi.FunctionCall.AddDoubleParams.left)
  return _internal_left();
}
inline void FunctionCall_AddDoubleParams::_internal_set_left(double value) {
  _has_bits_[0] |= 0x00000001u;
  left_ = value;
}
inline void FunctionCall_AddDoubleParams::set_left(double value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:yi.FunctionCall.AddDoubleParams.left)
}

// required double right = 2;
inline bool FunctionCall_AddDoubleParams::_internal_has_right() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FunctionCall_AddDoubleParams::has_right() const {
  return _internal_has_right();
}
inline void FunctionCall_AddDoubleParams::clear_right() {
  right_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double FunctionCall_AddDoubleParams::_internal_right() const {
  return right_;
}
inline double FunctionCall_AddDoubleParams::right() const {
  // @@protoc_insertion_point(field_get:yi.FunctionCall.AddDoubleParams.right)
  return _internal_right();
}
inline void FunctionCall_AddDoubleParams::_internal_set_right(double value) {
  _has_bits_[0] |= 0x00000002u;
  right_ = value;
}
inline void FunctionCall_AddDoubleParams::set_right(double value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:yi.FunctionCall.AddDoubleParams.right)
}

// -------------------------------------------------------------------

// FunctionCall_AddStringParams

// required string left = 1;
inline bool FunctionCall_AddStringParams::_internal_has_left() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FunctionCall_AddStringParams::has_left() const {
  return _internal_has_left();
}
inline void FunctionCall_AddStringParams::clear_left() {
  left_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FunctionCall_AddStringParams::left() const {
  // @@protoc_insertion_point(field_get:yi.FunctionCall.AddStringParams.left)
  return _internal_left();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FunctionCall_AddStringParams::set_left(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 left_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:yi.FunctionCall.AddStringParams.left)
}
inline std::string* FunctionCall_AddStringParams::mutable_left() {
  std::string* _s = _internal_mutable_left();
  // @@protoc_insertion_point(field_mutable:yi.FunctionCall.AddStringParams.left)
  return _s;
}
inline const std::string& FunctionCall_AddStringParams::_internal_left() const {
  return left_.Get();
}
inline void FunctionCall_AddStringParams::_internal_set_left(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  left_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FunctionCall_AddStringParams::_internal_mutable_left() {
  _has_bits_[0] |= 0x00000001u;
  return left_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FunctionCall_AddStringParams::release_left() {
  // @@protoc_insertion_point(field_release:yi.FunctionCall.AddStringParams.left)
  if (!_internal_has_left()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = left_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (left_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    left_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FunctionCall_AddStringParams::set_allocated_left(std::string* left) {
  if (left != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  left_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), left,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (left_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    left_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:yi.FunctionCall.AddStringParams.left)
}

// required string right = 2;
inline bool FunctionCall_AddStringParams::_internal_has_right() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FunctionCall_AddStringParams::has_right() const {
  return _internal_has_right();
}
inline void FunctionCall_AddStringParams::clear_right() {
  right_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FunctionCall_AddStringParams::right() const {
  // @@protoc_insertion_point(field_get:yi.FunctionCall.AddStringParams.right)
  return _internal_right();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FunctionCall_AddStringParams::set_right(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 right_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:yi.FunctionCall.AddStringParams.right)
}
inline std::string* FunctionCall_AddStringParams::mutable_right() {
  std::string* _s = _internal_mutable_right();
  // @@protoc_insertion_point(field_mutable:yi.FunctionCall.AddStringParams.right)
  return _s;
}
inline const std::string& FunctionCall_AddStringParams::_internal_right() const {
  return right_.Get();
}
inline void FunctionCall_AddStringParams::_internal_set_right(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  right_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FunctionCall_AddStringParams::_internal_mutable_right() {
  _has_bits_[0] |= 0x00000002u;
  return right_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FunctionCall_AddStringParams::release_right() {
  // @@protoc_insertion_point(field_release:yi.FunctionCall.AddStringParams.right)
  if (!_internal_has_right()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = right_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (right_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    right_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FunctionCall_AddStringParams::set_allocated_right(std::string* right) {
  if (right != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  right_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), right,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (right_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    right_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:yi.FunctionCall.AddStringParams.right)
}

// -------------------------------------------------------------------

// FunctionCall_PlayerMoveParams

// required double x = 1;
inline bool FunctionCall_PlayerMoveParams::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FunctionCall_PlayerMoveParams::has_x() const {
  return _internal_has_x();
}
inline void FunctionCall_PlayerMoveParams::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double FunctionCall_PlayerMoveParams::_internal_x() const {
  return x_;
}
inline double FunctionCall_PlayerMoveParams::x() const {
  // @@protoc_insertion_point(field_get:yi.FunctionCall.PlayerMoveParams.x)
  return _internal_x();
}
inline void FunctionCall_PlayerMoveParams::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void FunctionCall_PlayerMoveParams::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:yi.FunctionCall.PlayerMoveParams.x)
}

// required double y = 2;
inline bool FunctionCall_PlayerMoveParams::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FunctionCall_PlayerMoveParams::has_y() const {
  return _internal_has_y();
}
inline void FunctionCall_PlayerMoveParams::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double FunctionCall_PlayerMoveParams::_internal_y() const {
  return y_;
}
inline double FunctionCall_PlayerMoveParams::y() const {
  // @@protoc_insertion_point(field_get:yi.FunctionCall.PlayerMoveParams.y)
  return _internal_y();
}
inline void FunctionCall_PlayerMoveParams::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void FunctionCall_PlayerMoveParams::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:yi.FunctionCall.PlayerMoveParams.y)
}

// required double speed = 3;
inline bool FunctionCall_PlayerMoveParams::_internal_has_speed() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FunctionCall_PlayerMoveParams::has_speed() const {
  return _internal_has_speed();
}
inline void FunctionCall_PlayerMoveParams::clear_speed() {
  speed_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double FunctionCall_PlayerMoveParams::_internal_speed() const {
  return speed_;
}
inline double FunctionCall_PlayerMoveParams::speed() const {
  // @@protoc_insertion_point(field_get:yi.FunctionCall.PlayerMoveParams.speed)
  return _internal_speed();
}
inline void FunctionCall_PlayerMoveParams::_internal_set_speed(double value) {
  _has_bits_[0] |= 0x00000004u;
  speed_ = value;
}
inline void FunctionCall_PlayerMoveParams::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:yi.FunctionCall.PlayerMoveParams.speed)
}

// required double acceleration = 4;
inline bool FunctionCall_PlayerMoveParams::_internal_has_acceleration() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FunctionCall_PlayerMoveParams::has_acceleration() const {
  return _internal_has_acceleration();
}
inline void FunctionCall_PlayerMoveParams::clear_acceleration() {
  acceleration_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double FunctionCall_PlayerMoveParams::_internal_acceleration() const {
  return acceleration_;
}
inline double FunctionCall_PlayerMoveParams::acceleration() const {
  // @@protoc_insertion_point(field_get:yi.FunctionCall.PlayerMoveParams.acceleration)
  return _internal_acceleration();
}
inline void FunctionCall_PlayerMoveParams::_internal_set_acceleration(double value) {
  _has_bits_[0] |= 0x00000008u;
  acceleration_ = value;
}
inline void FunctionCall_PlayerMoveParams::set_acceleration(double value) {
  _internal_set_acceleration(value);
  // @@protoc_insertion_point(field_set:yi.FunctionCall.PlayerMoveParams.acceleration)
}

// required double aspect = 5;
inline bool FunctionCall_PlayerMoveParams::_internal_has_aspect() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FunctionCall_PlayerMoveParams::has_aspect() const {
  return _internal_has_aspect();
}
inline void FunctionCall_PlayerMoveParams::clear_aspect() {
  aspect_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double FunctionCall_PlayerMoveParams::_internal_aspect() const {
  return aspect_;
}
inline double FunctionCall_PlayerMoveParams::aspect() const {
  // @@protoc_insertion_point(field_get:yi.FunctionCall.PlayerMoveParams.aspect)
  return _internal_aspect();
}
inline void FunctionCall_PlayerMoveParams::_internal_set_aspect(double value) {
  _has_bits_[0] |= 0x00000010u;
  aspect_ = value;
}
inline void FunctionCall_PlayerMoveParams::set_aspect(double value) {
  _internal_set_aspect(value);
  // @@protoc_insertion_point(field_set:yi.FunctionCall.PlayerMoveParams.aspect)
}

// required double angle = 6;
inline bool FunctionCall_PlayerMoveParams::_internal_has_angle() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FunctionCall_PlayerMoveParams::has_angle() const {
  return _internal_has_angle();
}
inline void FunctionCall_PlayerMoveParams::clear_angle() {
  angle_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double FunctionCall_PlayerMoveParams::_internal_angle() const {
  return angle_;
}
inline double FunctionCall_PlayerMoveParams::angle() const {
  // @@protoc_insertion_point(field_get:yi.FunctionCall.PlayerMoveParams.angle)
  return _internal_angle();
}
inline void FunctionCall_PlayerMoveParams::_internal_set_angle(double value) {
  _has_bits_[0] |= 0x00000020u;
  angle_ = value;
}
inline void FunctionCall_PlayerMoveParams::set_angle(double value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:yi.FunctionCall.PlayerMoveParams.angle)
}

// -------------------------------------------------------------------

// FunctionCall

// required string function_name = 1;
inline bool FunctionCall::_internal_has_function_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FunctionCall::has_function_name() const {
  return _internal_has_function_name();
}
inline void FunctionCall::clear_function_name() {
  function_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FunctionCall::function_name() const {
  // @@protoc_insertion_point(field_get:yi.FunctionCall.function_name)
  return _internal_function_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FunctionCall::set_function_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 function_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:yi.FunctionCall.function_name)
}
inline std::string* FunctionCall::mutable_function_name() {
  std::string* _s = _internal_mutable_function_name();
  // @@protoc_insertion_point(field_mutable:yi.FunctionCall.function_name)
  return _s;
}
inline const std::string& FunctionCall::_internal_function_name() const {
  return function_name_.Get();
}
inline void FunctionCall::_internal_set_function_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  function_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FunctionCall::_internal_mutable_function_name() {
  _has_bits_[0] |= 0x00000001u;
  return function_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FunctionCall::release_function_name() {
  // @@protoc_insertion_point(field_release:yi.FunctionCall.function_name)
  if (!_internal_has_function_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = function_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (function_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    function_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FunctionCall::set_allocated_function_name(std::string* function_name) {
  if (function_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  function_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), function_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (function_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    function_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:yi.FunctionCall.function_name)
}

// optional .yi.FunctionCall.AddIntParams add_int_params = 2;
inline bool FunctionCall::_internal_has_add_int_params() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || add_int_params_ != nullptr);
  return value;
}
inline bool FunctionCall::has_add_int_params() const {
  return _internal_has_add_int_params();
}
inline void FunctionCall::clear_add_int_params() {
  if (add_int_params_ != nullptr) add_int_params_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::yi::FunctionCall_AddIntParams& FunctionCall::_internal_add_int_params() const {
  const ::yi::FunctionCall_AddIntParams* p = add_int_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::yi::FunctionCall_AddIntParams&>(
      ::yi::_FunctionCall_AddIntParams_default_instance_);
}
inline const ::yi::FunctionCall_AddIntParams& FunctionCall::add_int_params() const {
  // @@protoc_insertion_point(field_get:yi.FunctionCall.add_int_params)
  return _internal_add_int_params();
}
inline void FunctionCall::unsafe_arena_set_allocated_add_int_params(
    ::yi::FunctionCall_AddIntParams* add_int_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(add_int_params_);
  }
  add_int_params_ = add_int_params;
  if (add_int_params) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:yi.FunctionCall.add_int_params)
}
inline ::yi::FunctionCall_AddIntParams* FunctionCall::release_add_int_params() {
  _has_bits_[0] &= ~0x00000002u;
  ::yi::FunctionCall_AddIntParams* temp = add_int_params_;
  add_int_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::yi::FunctionCall_AddIntParams* FunctionCall::unsafe_arena_release_add_int_params() {
  // @@protoc_insertion_point(field_release:yi.FunctionCall.add_int_params)
  _has_bits_[0] &= ~0x00000002u;
  ::yi::FunctionCall_AddIntParams* temp = add_int_params_;
  add_int_params_ = nullptr;
  return temp;
}
inline ::yi::FunctionCall_AddIntParams* FunctionCall::_internal_mutable_add_int_params() {
  _has_bits_[0] |= 0x00000002u;
  if (add_int_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::yi::FunctionCall_AddIntParams>(GetArenaForAllocation());
    add_int_params_ = p;
  }
  return add_int_params_;
}
inline ::yi::FunctionCall_AddIntParams* FunctionCall::mutable_add_int_params() {
  ::yi::FunctionCall_AddIntParams* _msg = _internal_mutable_add_int_params();
  // @@protoc_insertion_point(field_mutable:yi.FunctionCall.add_int_params)
  return _msg;
}
inline void FunctionCall::set_allocated_add_int_params(::yi::FunctionCall_AddIntParams* add_int_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete add_int_params_;
  }
  if (add_int_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::yi::FunctionCall_AddIntParams>::GetOwningArena(add_int_params);
    if (message_arena != submessage_arena) {
      add_int_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_int_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  add_int_params_ = add_int_params;
  // @@protoc_insertion_point(field_set_allocated:yi.FunctionCall.add_int_params)
}

// optional .yi.FunctionCall.AddDoubleParams add_double_params = 3;
inline bool FunctionCall::_internal_has_add_double_params() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || add_double_params_ != nullptr);
  return value;
}
inline bool FunctionCall::has_add_double_params() const {
  return _internal_has_add_double_params();
}
inline void FunctionCall::clear_add_double_params() {
  if (add_double_params_ != nullptr) add_double_params_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::yi::FunctionCall_AddDoubleParams& FunctionCall::_internal_add_double_params() const {
  const ::yi::FunctionCall_AddDoubleParams* p = add_double_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::yi::FunctionCall_AddDoubleParams&>(
      ::yi::_FunctionCall_AddDoubleParams_default_instance_);
}
inline const ::yi::FunctionCall_AddDoubleParams& FunctionCall::add_double_params() const {
  // @@protoc_insertion_point(field_get:yi.FunctionCall.add_double_params)
  return _internal_add_double_params();
}
inline void FunctionCall::unsafe_arena_set_allocated_add_double_params(
    ::yi::FunctionCall_AddDoubleParams* add_double_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(add_double_params_);
  }
  add_double_params_ = add_double_params;
  if (add_double_params) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:yi.FunctionCall.add_double_params)
}
inline ::yi::FunctionCall_AddDoubleParams* FunctionCall::release_add_double_params() {
  _has_bits_[0] &= ~0x00000004u;
  ::yi::FunctionCall_AddDoubleParams* temp = add_double_params_;
  add_double_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::yi::FunctionCall_AddDoubleParams* FunctionCall::unsafe_arena_release_add_double_params() {
  // @@protoc_insertion_point(field_release:yi.FunctionCall.add_double_params)
  _has_bits_[0] &= ~0x00000004u;
  ::yi::FunctionCall_AddDoubleParams* temp = add_double_params_;
  add_double_params_ = nullptr;
  return temp;
}
inline ::yi::FunctionCall_AddDoubleParams* FunctionCall::_internal_mutable_add_double_params() {
  _has_bits_[0] |= 0x00000004u;
  if (add_double_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::yi::FunctionCall_AddDoubleParams>(GetArenaForAllocation());
    add_double_params_ = p;
  }
  return add_double_params_;
}
inline ::yi::FunctionCall_AddDoubleParams* FunctionCall::mutable_add_double_params() {
  ::yi::FunctionCall_AddDoubleParams* _msg = _internal_mutable_add_double_params();
  // @@protoc_insertion_point(field_mutable:yi.FunctionCall.add_double_params)
  return _msg;
}
inline void FunctionCall::set_allocated_add_double_params(::yi::FunctionCall_AddDoubleParams* add_double_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete add_double_params_;
  }
  if (add_double_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::yi::FunctionCall_AddDoubleParams>::GetOwningArena(add_double_params);
    if (message_arena != submessage_arena) {
      add_double_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_double_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  add_double_params_ = add_double_params;
  // @@protoc_insertion_point(field_set_allocated:yi.FunctionCall.add_double_params)
}

// optional .yi.FunctionCall.AddStringParams add_string_params = 4;
inline bool FunctionCall::_internal_has_add_string_params() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || add_string_params_ != nullptr);
  return value;
}
inline bool FunctionCall::has_add_string_params() const {
  return _internal_has_add_string_params();
}
inline void FunctionCall::clear_add_string_params() {
  if (add_string_params_ != nullptr) add_string_params_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::yi::FunctionCall_AddStringParams& FunctionCall::_internal_add_string_params() const {
  const ::yi::FunctionCall_AddStringParams* p = add_string_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::yi::FunctionCall_AddStringParams&>(
      ::yi::_FunctionCall_AddStringParams_default_instance_);
}
inline const ::yi::FunctionCall_AddStringParams& FunctionCall::add_string_params() const {
  // @@protoc_insertion_point(field_get:yi.FunctionCall.add_string_params)
  return _internal_add_string_params();
}
inline void FunctionCall::unsafe_arena_set_allocated_add_string_params(
    ::yi::FunctionCall_AddStringParams* add_string_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(add_string_params_);
  }
  add_string_params_ = add_string_params;
  if (add_string_params) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:yi.FunctionCall.add_string_params)
}
inline ::yi::FunctionCall_AddStringParams* FunctionCall::release_add_string_params() {
  _has_bits_[0] &= ~0x00000008u;
  ::yi::FunctionCall_AddStringParams* temp = add_string_params_;
  add_string_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::yi::FunctionCall_AddStringParams* FunctionCall::unsafe_arena_release_add_string_params() {
  // @@protoc_insertion_point(field_release:yi.FunctionCall.add_string_params)
  _has_bits_[0] &= ~0x00000008u;
  ::yi::FunctionCall_AddStringParams* temp = add_string_params_;
  add_string_params_ = nullptr;
  return temp;
}
inline ::yi::FunctionCall_AddStringParams* FunctionCall::_internal_mutable_add_string_params() {
  _has_bits_[0] |= 0x00000008u;
  if (add_string_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::yi::FunctionCall_AddStringParams>(GetArenaForAllocation());
    add_string_params_ = p;
  }
  return add_string_params_;
}
inline ::yi::FunctionCall_AddStringParams* FunctionCall::mutable_add_string_params() {
  ::yi::FunctionCall_AddStringParams* _msg = _internal_mutable_add_string_params();
  // @@protoc_insertion_point(field_mutable:yi.FunctionCall.add_string_params)
  return _msg;
}
inline void FunctionCall::set_allocated_add_string_params(::yi::FunctionCall_AddStringParams* add_string_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete add_string_params_;
  }
  if (add_string_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::yi::FunctionCall_AddStringParams>::GetOwningArena(add_string_params);
    if (message_arena != submessage_arena) {
      add_string_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_string_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  add_string_params_ = add_string_params;
  // @@protoc_insertion_point(field_set_allocated:yi.FunctionCall.add_string_params)
}

// optional .yi.FunctionCall.PlayerMoveParams player_move_params = 5;
inline bool FunctionCall::_internal_has_player_move_params() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || player_move_params_ != nullptr);
  return value;
}
inline bool FunctionCall::has_player_move_params() const {
  return _internal_has_player_move_params();
}
inline void FunctionCall::clear_player_move_params() {
  if (player_move_params_ != nullptr) player_move_params_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::yi::FunctionCall_PlayerMoveParams& FunctionCall::_internal_player_move_params() const {
  const ::yi::FunctionCall_PlayerMoveParams* p = player_move_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::yi::FunctionCall_PlayerMoveParams&>(
      ::yi::_FunctionCall_PlayerMoveParams_default_instance_);
}
inline const ::yi::FunctionCall_PlayerMoveParams& FunctionCall::player_move_params() const {
  // @@protoc_insertion_point(field_get:yi.FunctionCall.player_move_params)
  return _internal_player_move_params();
}
inline void FunctionCall::unsafe_arena_set_allocated_player_move_params(
    ::yi::FunctionCall_PlayerMoveParams* player_move_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_move_params_);
  }
  player_move_params_ = player_move_params;
  if (player_move_params) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:yi.FunctionCall.player_move_params)
}
inline ::yi::FunctionCall_PlayerMoveParams* FunctionCall::release_player_move_params() {
  _has_bits_[0] &= ~0x00000010u;
  ::yi::FunctionCall_PlayerMoveParams* temp = player_move_params_;
  player_move_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::yi::FunctionCall_PlayerMoveParams* FunctionCall::unsafe_arena_release_player_move_params() {
  // @@protoc_insertion_point(field_release:yi.FunctionCall.player_move_params)
  _has_bits_[0] &= ~0x00000010u;
  ::yi::FunctionCall_PlayerMoveParams* temp = player_move_params_;
  player_move_params_ = nullptr;
  return temp;
}
inline ::yi::FunctionCall_PlayerMoveParams* FunctionCall::_internal_mutable_player_move_params() {
  _has_bits_[0] |= 0x00000010u;
  if (player_move_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::yi::FunctionCall_PlayerMoveParams>(GetArenaForAllocation());
    player_move_params_ = p;
  }
  return player_move_params_;
}
inline ::yi::FunctionCall_PlayerMoveParams* FunctionCall::mutable_player_move_params() {
  ::yi::FunctionCall_PlayerMoveParams* _msg = _internal_mutable_player_move_params();
  // @@protoc_insertion_point(field_mutable:yi.FunctionCall.player_move_params)
  return _msg;
}
inline void FunctionCall::set_allocated_player_move_params(::yi::FunctionCall_PlayerMoveParams* player_move_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_move_params_;
  }
  if (player_move_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::yi::FunctionCall_PlayerMoveParams>::GetOwningArena(player_move_params);
    if (message_arena != submessage_arena) {
      player_move_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_move_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  player_move_params_ = player_move_params;
  // @@protoc_insertion_point(field_set_allocated:yi.FunctionCall.player_move_params)
}

// -------------------------------------------------------------------

// FunctionRet_AddIntRet

// required int32 ret = 1;
inline bool FunctionRet_AddIntRet::_internal_has_ret() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FunctionRet_AddIntRet::has_ret() const {
  return _internal_has_ret();
}
inline void FunctionRet_AddIntRet::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t FunctionRet_AddIntRet::_internal_ret() const {
  return ret_;
}
inline int32_t FunctionRet_AddIntRet::ret() const {
  // @@protoc_insertion_point(field_get:yi.FunctionRet.AddIntRet.ret)
  return _internal_ret();
}
inline void FunctionRet_AddIntRet::_internal_set_ret(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  ret_ = value;
}
inline void FunctionRet_AddIntRet::set_ret(int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:yi.FunctionRet.AddIntRet.ret)
}

// -------------------------------------------------------------------

// FunctionRet_AddDoubleRet

// required double ret = 1;
inline bool FunctionRet_AddDoubleRet::_internal_has_ret() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FunctionRet_AddDoubleRet::has_ret() const {
  return _internal_has_ret();
}
inline void FunctionRet_AddDoubleRet::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double FunctionRet_AddDoubleRet::_internal_ret() const {
  return ret_;
}
inline double FunctionRet_AddDoubleRet::ret() const {
  // @@protoc_insertion_point(field_get:yi.FunctionRet.AddDoubleRet.ret)
  return _internal_ret();
}
inline void FunctionRet_AddDoubleRet::_internal_set_ret(double value) {
  _has_bits_[0] |= 0x00000001u;
  ret_ = value;
}
inline void FunctionRet_AddDoubleRet::set_ret(double value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:yi.FunctionRet.AddDoubleRet.ret)
}

// -------------------------------------------------------------------

// FunctionRet_AddStringRet

// required string ret = 1;
inline bool FunctionRet_AddStringRet::_internal_has_ret() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FunctionRet_AddStringRet::has_ret() const {
  return _internal_has_ret();
}
inline void FunctionRet_AddStringRet::clear_ret() {
  ret_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FunctionRet_AddStringRet::ret() const {
  // @@protoc_insertion_point(field_get:yi.FunctionRet.AddStringRet.ret)
  return _internal_ret();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FunctionRet_AddStringRet::set_ret(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 ret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:yi.FunctionRet.AddStringRet.ret)
}
inline std::string* FunctionRet_AddStringRet::mutable_ret() {
  std::string* _s = _internal_mutable_ret();
  // @@protoc_insertion_point(field_mutable:yi.FunctionRet.AddStringRet.ret)
  return _s;
}
inline const std::string& FunctionRet_AddStringRet::_internal_ret() const {
  return ret_.Get();
}
inline void FunctionRet_AddStringRet::_internal_set_ret(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FunctionRet_AddStringRet::_internal_mutable_ret() {
  _has_bits_[0] |= 0x00000001u;
  return ret_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FunctionRet_AddStringRet::release_ret() {
  // @@protoc_insertion_point(field_release:yi.FunctionRet.AddStringRet.ret)
  if (!_internal_has_ret()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = ret_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ret_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FunctionRet_AddStringRet::set_allocated_ret(std::string* ret) {
  if (ret != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ret,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ret_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:yi.FunctionRet.AddStringRet.ret)
}

// -------------------------------------------------------------------

// FunctionRet_PlayerMoveRet

// required double x = 1;
inline bool FunctionRet_PlayerMoveRet::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FunctionRet_PlayerMoveRet::has_x() const {
  return _internal_has_x();
}
inline void FunctionRet_PlayerMoveRet::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double FunctionRet_PlayerMoveRet::_internal_x() const {
  return x_;
}
inline double FunctionRet_PlayerMoveRet::x() const {
  // @@protoc_insertion_point(field_get:yi.FunctionRet.PlayerMoveRet.x)
  return _internal_x();
}
inline void FunctionRet_PlayerMoveRet::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void FunctionRet_PlayerMoveRet::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:yi.FunctionRet.PlayerMoveRet.x)
}

// required double y = 2;
inline bool FunctionRet_PlayerMoveRet::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FunctionRet_PlayerMoveRet::has_y() const {
  return _internal_has_y();
}
inline void FunctionRet_PlayerMoveRet::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double FunctionRet_PlayerMoveRet::_internal_y() const {
  return y_;
}
inline double FunctionRet_PlayerMoveRet::y() const {
  // @@protoc_insertion_point(field_get:yi.FunctionRet.PlayerMoveRet.y)
  return _internal_y();
}
inline void FunctionRet_PlayerMoveRet::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void FunctionRet_PlayerMoveRet::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:yi.FunctionRet.PlayerMoveRet.y)
}

// required double speed = 3;
inline bool FunctionRet_PlayerMoveRet::_internal_has_speed() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FunctionRet_PlayerMoveRet::has_speed() const {
  return _internal_has_speed();
}
inline void FunctionRet_PlayerMoveRet::clear_speed() {
  speed_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double FunctionRet_PlayerMoveRet::_internal_speed() const {
  return speed_;
}
inline double FunctionRet_PlayerMoveRet::speed() const {
  // @@protoc_insertion_point(field_get:yi.FunctionRet.PlayerMoveRet.speed)
  return _internal_speed();
}
inline void FunctionRet_PlayerMoveRet::_internal_set_speed(double value) {
  _has_bits_[0] |= 0x00000004u;
  speed_ = value;
}
inline void FunctionRet_PlayerMoveRet::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:yi.FunctionRet.PlayerMoveRet.speed)
}

// required double aspect = 5;
inline bool FunctionRet_PlayerMoveRet::_internal_has_aspect() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FunctionRet_PlayerMoveRet::has_aspect() const {
  return _internal_has_aspect();
}
inline void FunctionRet_PlayerMoveRet::clear_aspect() {
  aspect_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double FunctionRet_PlayerMoveRet::_internal_aspect() const {
  return aspect_;
}
inline double FunctionRet_PlayerMoveRet::aspect() const {
  // @@protoc_insertion_point(field_get:yi.FunctionRet.PlayerMoveRet.aspect)
  return _internal_aspect();
}
inline void FunctionRet_PlayerMoveRet::_internal_set_aspect(double value) {
  _has_bits_[0] |= 0x00000008u;
  aspect_ = value;
}
inline void FunctionRet_PlayerMoveRet::set_aspect(double value) {
  _internal_set_aspect(value);
  // @@protoc_insertion_point(field_set:yi.FunctionRet.PlayerMoveRet.aspect)
}

// -------------------------------------------------------------------

// FunctionRet

// required string function_name = 1;
inline bool FunctionRet::_internal_has_function_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FunctionRet::has_function_name() const {
  return _internal_has_function_name();
}
inline void FunctionRet::clear_function_name() {
  function_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FunctionRet::function_name() const {
  // @@protoc_insertion_point(field_get:yi.FunctionRet.function_name)
  return _internal_function_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FunctionRet::set_function_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 function_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:yi.FunctionRet.function_name)
}
inline std::string* FunctionRet::mutable_function_name() {
  std::string* _s = _internal_mutable_function_name();
  // @@protoc_insertion_point(field_mutable:yi.FunctionRet.function_name)
  return _s;
}
inline const std::string& FunctionRet::_internal_function_name() const {
  return function_name_.Get();
}
inline void FunctionRet::_internal_set_function_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  function_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FunctionRet::_internal_mutable_function_name() {
  _has_bits_[0] |= 0x00000001u;
  return function_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FunctionRet::release_function_name() {
  // @@protoc_insertion_point(field_release:yi.FunctionRet.function_name)
  if (!_internal_has_function_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = function_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (function_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    function_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FunctionRet::set_allocated_function_name(std::string* function_name) {
  if (function_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  function_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), function_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (function_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    function_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:yi.FunctionRet.function_name)
}

// optional .yi.FunctionRet.AddIntRet add_int_ret_params = 2;
inline bool FunctionRet::_internal_has_add_int_ret_params() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || add_int_ret_params_ != nullptr);
  return value;
}
inline bool FunctionRet::has_add_int_ret_params() const {
  return _internal_has_add_int_ret_params();
}
inline void FunctionRet::clear_add_int_ret_params() {
  if (add_int_ret_params_ != nullptr) add_int_ret_params_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::yi::FunctionRet_AddIntRet& FunctionRet::_internal_add_int_ret_params() const {
  const ::yi::FunctionRet_AddIntRet* p = add_int_ret_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::yi::FunctionRet_AddIntRet&>(
      ::yi::_FunctionRet_AddIntRet_default_instance_);
}
inline const ::yi::FunctionRet_AddIntRet& FunctionRet::add_int_ret_params() const {
  // @@protoc_insertion_point(field_get:yi.FunctionRet.add_int_ret_params)
  return _internal_add_int_ret_params();
}
inline void FunctionRet::unsafe_arena_set_allocated_add_int_ret_params(
    ::yi::FunctionRet_AddIntRet* add_int_ret_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(add_int_ret_params_);
  }
  add_int_ret_params_ = add_int_ret_params;
  if (add_int_ret_params) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:yi.FunctionRet.add_int_ret_params)
}
inline ::yi::FunctionRet_AddIntRet* FunctionRet::release_add_int_ret_params() {
  _has_bits_[0] &= ~0x00000002u;
  ::yi::FunctionRet_AddIntRet* temp = add_int_ret_params_;
  add_int_ret_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::yi::FunctionRet_AddIntRet* FunctionRet::unsafe_arena_release_add_int_ret_params() {
  // @@protoc_insertion_point(field_release:yi.FunctionRet.add_int_ret_params)
  _has_bits_[0] &= ~0x00000002u;
  ::yi::FunctionRet_AddIntRet* temp = add_int_ret_params_;
  add_int_ret_params_ = nullptr;
  return temp;
}
inline ::yi::FunctionRet_AddIntRet* FunctionRet::_internal_mutable_add_int_ret_params() {
  _has_bits_[0] |= 0x00000002u;
  if (add_int_ret_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::yi::FunctionRet_AddIntRet>(GetArenaForAllocation());
    add_int_ret_params_ = p;
  }
  return add_int_ret_params_;
}
inline ::yi::FunctionRet_AddIntRet* FunctionRet::mutable_add_int_ret_params() {
  ::yi::FunctionRet_AddIntRet* _msg = _internal_mutable_add_int_ret_params();
  // @@protoc_insertion_point(field_mutable:yi.FunctionRet.add_int_ret_params)
  return _msg;
}
inline void FunctionRet::set_allocated_add_int_ret_params(::yi::FunctionRet_AddIntRet* add_int_ret_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete add_int_ret_params_;
  }
  if (add_int_ret_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::yi::FunctionRet_AddIntRet>::GetOwningArena(add_int_ret_params);
    if (message_arena != submessage_arena) {
      add_int_ret_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_int_ret_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  add_int_ret_params_ = add_int_ret_params;
  // @@protoc_insertion_point(field_set_allocated:yi.FunctionRet.add_int_ret_params)
}

// optional .yi.FunctionRet.AddDoubleRet add_double_ret_params = 3;
inline bool FunctionRet::_internal_has_add_double_ret_params() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || add_double_ret_params_ != nullptr);
  return value;
}
inline bool FunctionRet::has_add_double_ret_params() const {
  return _internal_has_add_double_ret_params();
}
inline void FunctionRet::clear_add_double_ret_params() {
  if (add_double_ret_params_ != nullptr) add_double_ret_params_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::yi::FunctionRet_AddDoubleRet& FunctionRet::_internal_add_double_ret_params() const {
  const ::yi::FunctionRet_AddDoubleRet* p = add_double_ret_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::yi::FunctionRet_AddDoubleRet&>(
      ::yi::_FunctionRet_AddDoubleRet_default_instance_);
}
inline const ::yi::FunctionRet_AddDoubleRet& FunctionRet::add_double_ret_params() const {
  // @@protoc_insertion_point(field_get:yi.FunctionRet.add_double_ret_params)
  return _internal_add_double_ret_params();
}
inline void FunctionRet::unsafe_arena_set_allocated_add_double_ret_params(
    ::yi::FunctionRet_AddDoubleRet* add_double_ret_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(add_double_ret_params_);
  }
  add_double_ret_params_ = add_double_ret_params;
  if (add_double_ret_params) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:yi.FunctionRet.add_double_ret_params)
}
inline ::yi::FunctionRet_AddDoubleRet* FunctionRet::release_add_double_ret_params() {
  _has_bits_[0] &= ~0x00000004u;
  ::yi::FunctionRet_AddDoubleRet* temp = add_double_ret_params_;
  add_double_ret_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::yi::FunctionRet_AddDoubleRet* FunctionRet::unsafe_arena_release_add_double_ret_params() {
  // @@protoc_insertion_point(field_release:yi.FunctionRet.add_double_ret_params)
  _has_bits_[0] &= ~0x00000004u;
  ::yi::FunctionRet_AddDoubleRet* temp = add_double_ret_params_;
  add_double_ret_params_ = nullptr;
  return temp;
}
inline ::yi::FunctionRet_AddDoubleRet* FunctionRet::_internal_mutable_add_double_ret_params() {
  _has_bits_[0] |= 0x00000004u;
  if (add_double_ret_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::yi::FunctionRet_AddDoubleRet>(GetArenaForAllocation());
    add_double_ret_params_ = p;
  }
  return add_double_ret_params_;
}
inline ::yi::FunctionRet_AddDoubleRet* FunctionRet::mutable_add_double_ret_params() {
  ::yi::FunctionRet_AddDoubleRet* _msg = _internal_mutable_add_double_ret_params();
  // @@protoc_insertion_point(field_mutable:yi.FunctionRet.add_double_ret_params)
  return _msg;
}
inline void FunctionRet::set_allocated_add_double_ret_params(::yi::FunctionRet_AddDoubleRet* add_double_ret_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete add_double_ret_params_;
  }
  if (add_double_ret_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::yi::FunctionRet_AddDoubleRet>::GetOwningArena(add_double_ret_params);
    if (message_arena != submessage_arena) {
      add_double_ret_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_double_ret_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  add_double_ret_params_ = add_double_ret_params;
  // @@protoc_insertion_point(field_set_allocated:yi.FunctionRet.add_double_ret_params)
}

// optional .yi.FunctionRet.AddStringRet add_string_ret_params = 4;
inline bool FunctionRet::_internal_has_add_string_ret_params() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || add_string_ret_params_ != nullptr);
  return value;
}
inline bool FunctionRet::has_add_string_ret_params() const {
  return _internal_has_add_string_ret_params();
}
inline void FunctionRet::clear_add_string_ret_params() {
  if (add_string_ret_params_ != nullptr) add_string_ret_params_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::yi::FunctionRet_AddStringRet& FunctionRet::_internal_add_string_ret_params() const {
  const ::yi::FunctionRet_AddStringRet* p = add_string_ret_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::yi::FunctionRet_AddStringRet&>(
      ::yi::_FunctionRet_AddStringRet_default_instance_);
}
inline const ::yi::FunctionRet_AddStringRet& FunctionRet::add_string_ret_params() const {
  // @@protoc_insertion_point(field_get:yi.FunctionRet.add_string_ret_params)
  return _internal_add_string_ret_params();
}
inline void FunctionRet::unsafe_arena_set_allocated_add_string_ret_params(
    ::yi::FunctionRet_AddStringRet* add_string_ret_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(add_string_ret_params_);
  }
  add_string_ret_params_ = add_string_ret_params;
  if (add_string_ret_params) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:yi.FunctionRet.add_string_ret_params)
}
inline ::yi::FunctionRet_AddStringRet* FunctionRet::release_add_string_ret_params() {
  _has_bits_[0] &= ~0x00000008u;
  ::yi::FunctionRet_AddStringRet* temp = add_string_ret_params_;
  add_string_ret_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::yi::FunctionRet_AddStringRet* FunctionRet::unsafe_arena_release_add_string_ret_params() {
  // @@protoc_insertion_point(field_release:yi.FunctionRet.add_string_ret_params)
  _has_bits_[0] &= ~0x00000008u;
  ::yi::FunctionRet_AddStringRet* temp = add_string_ret_params_;
  add_string_ret_params_ = nullptr;
  return temp;
}
inline ::yi::FunctionRet_AddStringRet* FunctionRet::_internal_mutable_add_string_ret_params() {
  _has_bits_[0] |= 0x00000008u;
  if (add_string_ret_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::yi::FunctionRet_AddStringRet>(GetArenaForAllocation());
    add_string_ret_params_ = p;
  }
  return add_string_ret_params_;
}
inline ::yi::FunctionRet_AddStringRet* FunctionRet::mutable_add_string_ret_params() {
  ::yi::FunctionRet_AddStringRet* _msg = _internal_mutable_add_string_ret_params();
  // @@protoc_insertion_point(field_mutable:yi.FunctionRet.add_string_ret_params)
  return _msg;
}
inline void FunctionRet::set_allocated_add_string_ret_params(::yi::FunctionRet_AddStringRet* add_string_ret_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete add_string_ret_params_;
  }
  if (add_string_ret_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::yi::FunctionRet_AddStringRet>::GetOwningArena(add_string_ret_params);
    if (message_arena != submessage_arena) {
      add_string_ret_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_string_ret_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  add_string_ret_params_ = add_string_ret_params;
  // @@protoc_insertion_point(field_set_allocated:yi.FunctionRet.add_string_ret_params)
}

// optional .yi.FunctionRet.PlayerMoveRet player_move_ret_params = 5;
inline bool FunctionRet::_internal_has_player_move_ret_params() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || player_move_ret_params_ != nullptr);
  return value;
}
inline bool FunctionRet::has_player_move_ret_params() const {
  return _internal_has_player_move_ret_params();
}
inline void FunctionRet::clear_player_move_ret_params() {
  if (player_move_ret_params_ != nullptr) player_move_ret_params_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::yi::FunctionRet_PlayerMoveRet& FunctionRet::_internal_player_move_ret_params() const {
  const ::yi::FunctionRet_PlayerMoveRet* p = player_move_ret_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::yi::FunctionRet_PlayerMoveRet&>(
      ::yi::_FunctionRet_PlayerMoveRet_default_instance_);
}
inline const ::yi::FunctionRet_PlayerMoveRet& FunctionRet::player_move_ret_params() const {
  // @@protoc_insertion_point(field_get:yi.FunctionRet.player_move_ret_params)
  return _internal_player_move_ret_params();
}
inline void FunctionRet::unsafe_arena_set_allocated_player_move_ret_params(
    ::yi::FunctionRet_PlayerMoveRet* player_move_ret_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_move_ret_params_);
  }
  player_move_ret_params_ = player_move_ret_params;
  if (player_move_ret_params) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:yi.FunctionRet.player_move_ret_params)
}
inline ::yi::FunctionRet_PlayerMoveRet* FunctionRet::release_player_move_ret_params() {
  _has_bits_[0] &= ~0x00000010u;
  ::yi::FunctionRet_PlayerMoveRet* temp = player_move_ret_params_;
  player_move_ret_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::yi::FunctionRet_PlayerMoveRet* FunctionRet::unsafe_arena_release_player_move_ret_params() {
  // @@protoc_insertion_point(field_release:yi.FunctionRet.player_move_ret_params)
  _has_bits_[0] &= ~0x00000010u;
  ::yi::FunctionRet_PlayerMoveRet* temp = player_move_ret_params_;
  player_move_ret_params_ = nullptr;
  return temp;
}
inline ::yi::FunctionRet_PlayerMoveRet* FunctionRet::_internal_mutable_player_move_ret_params() {
  _has_bits_[0] |= 0x00000010u;
  if (player_move_ret_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::yi::FunctionRet_PlayerMoveRet>(GetArenaForAllocation());
    player_move_ret_params_ = p;
  }
  return player_move_ret_params_;
}
inline ::yi::FunctionRet_PlayerMoveRet* FunctionRet::mutable_player_move_ret_params() {
  ::yi::FunctionRet_PlayerMoveRet* _msg = _internal_mutable_player_move_ret_params();
  // @@protoc_insertion_point(field_mutable:yi.FunctionRet.player_move_ret_params)
  return _msg;
}
inline void FunctionRet::set_allocated_player_move_ret_params(::yi::FunctionRet_PlayerMoveRet* player_move_ret_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_move_ret_params_;
  }
  if (player_move_ret_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::yi::FunctionRet_PlayerMoveRet>::GetOwningArena(player_move_ret_params);
    if (message_arena != submessage_arena) {
      player_move_ret_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_move_ret_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  player_move_ret_params_ = player_move_ret_params;
  // @@protoc_insertion_point(field_set_allocated:yi.FunctionRet.player_move_ret_params)
}

// -------------------------------------------------------------------

// Request

// required .yi.Request.RequestType call_type = 1;
inline bool Request::_internal_has_call_type() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool Request::has_call_type() const {
  return _internal_has_call_type();
}
inline void Request::clear_call_type() {
  call_type_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::yi::Request_RequestType Request::_internal_call_type() const {
  return static_cast< ::yi::Request_RequestType >(call_type_);
}
inline ::yi::Request_RequestType Request::call_type() const {
  // @@protoc_insertion_point(field_get:yi.Request.call_type)
  return _internal_call_type();
}
inline void Request::_internal_set_call_type(::yi::Request_RequestType value) {
  assert(::yi::Request_RequestType_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  call_type_ = value;
}
inline void Request::set_call_type(::yi::Request_RequestType value) {
  _internal_set_call_type(value);
  // @@protoc_insertion_point(field_set:yi.Request.call_type)
}

// optional .yi.ConnectionReq connection_req = 2;
inline bool Request::_internal_has_connection_req() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || connection_req_ != nullptr);
  return value;
}
inline bool Request::has_connection_req() const {
  return _internal_has_connection_req();
}
inline void Request::clear_connection_req() {
  if (connection_req_ != nullptr) connection_req_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::yi::ConnectionReq& Request::_internal_connection_req() const {
  const ::yi::ConnectionReq* p = connection_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::yi::ConnectionReq&>(
      ::yi::_ConnectionReq_default_instance_);
}
inline const ::yi::ConnectionReq& Request::connection_req() const {
  // @@protoc_insertion_point(field_get:yi.Request.connection_req)
  return _internal_connection_req();
}
inline void Request::unsafe_arena_set_allocated_connection_req(
    ::yi::ConnectionReq* connection_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(connection_req_);
  }
  connection_req_ = connection_req;
  if (connection_req) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:yi.Request.connection_req)
}
inline ::yi::ConnectionReq* Request::release_connection_req() {
  _has_bits_[0] &= ~0x00000001u;
  ::yi::ConnectionReq* temp = connection_req_;
  connection_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::yi::ConnectionReq* Request::unsafe_arena_release_connection_req() {
  // @@protoc_insertion_point(field_release:yi.Request.connection_req)
  _has_bits_[0] &= ~0x00000001u;
  ::yi::ConnectionReq* temp = connection_req_;
  connection_req_ = nullptr;
  return temp;
}
inline ::yi::ConnectionReq* Request::_internal_mutable_connection_req() {
  _has_bits_[0] |= 0x00000001u;
  if (connection_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::yi::ConnectionReq>(GetArenaForAllocation());
    connection_req_ = p;
  }
  return connection_req_;
}
inline ::yi::ConnectionReq* Request::mutable_connection_req() {
  ::yi::ConnectionReq* _msg = _internal_mutable_connection_req();
  // @@protoc_insertion_point(field_mutable:yi.Request.connection_req)
  return _msg;
}
inline void Request::set_allocated_connection_req(::yi::ConnectionReq* connection_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete connection_req_;
  }
  if (connection_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::yi::ConnectionReq>::GetOwningArena(connection_req);
    if (message_arena != submessage_arena) {
      connection_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  connection_req_ = connection_req;
  // @@protoc_insertion_point(field_set_allocated:yi.Request.connection_req)
}

// optional .yi.ConnectionRet connection_ret = 3;
inline bool Request::_internal_has_connection_ret() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || connection_ret_ != nullptr);
  return value;
}
inline bool Request::has_connection_ret() const {
  return _internal_has_connection_ret();
}
inline void Request::clear_connection_ret() {
  if (connection_ret_ != nullptr) connection_ret_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::yi::ConnectionRet& Request::_internal_connection_ret() const {
  const ::yi::ConnectionRet* p = connection_ret_;
  return p != nullptr ? *p : reinterpret_cast<const ::yi::ConnectionRet&>(
      ::yi::_ConnectionRet_default_instance_);
}
inline const ::yi::ConnectionRet& Request::connection_ret() const {
  // @@protoc_insertion_point(field_get:yi.Request.connection_ret)
  return _internal_connection_ret();
}
inline void Request::unsafe_arena_set_allocated_connection_ret(
    ::yi::ConnectionRet* connection_ret) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(connection_ret_);
  }
  connection_ret_ = connection_ret;
  if (connection_ret) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:yi.Request.connection_ret)
}
inline ::yi::ConnectionRet* Request::release_connection_ret() {
  _has_bits_[0] &= ~0x00000002u;
  ::yi::ConnectionRet* temp = connection_ret_;
  connection_ret_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::yi::ConnectionRet* Request::unsafe_arena_release_connection_ret() {
  // @@protoc_insertion_point(field_release:yi.Request.connection_ret)
  _has_bits_[0] &= ~0x00000002u;
  ::yi::ConnectionRet* temp = connection_ret_;
  connection_ret_ = nullptr;
  return temp;
}
inline ::yi::ConnectionRet* Request::_internal_mutable_connection_ret() {
  _has_bits_[0] |= 0x00000002u;
  if (connection_ret_ == nullptr) {
    auto* p = CreateMaybeMessage<::yi::ConnectionRet>(GetArenaForAllocation());
    connection_ret_ = p;
  }
  return connection_ret_;
}
inline ::yi::ConnectionRet* Request::mutable_connection_ret() {
  ::yi::ConnectionRet* _msg = _internal_mutable_connection_ret();
  // @@protoc_insertion_point(field_mutable:yi.Request.connection_ret)
  return _msg;
}
inline void Request::set_allocated_connection_ret(::yi::ConnectionRet* connection_ret) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete connection_ret_;
  }
  if (connection_ret) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::yi::ConnectionRet>::GetOwningArena(connection_ret);
    if (message_arena != submessage_arena) {
      connection_ret = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection_ret, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  connection_ret_ = connection_ret;
  // @@protoc_insertion_point(field_set_allocated:yi.Request.connection_ret)
}

// optional .yi.FunctionCall function_call = 4;
inline bool Request::_internal_has_function_call() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || function_call_ != nullptr);
  return value;
}
inline bool Request::has_function_call() const {
  return _internal_has_function_call();
}
inline void Request::clear_function_call() {
  if (function_call_ != nullptr) function_call_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::yi::FunctionCall& Request::_internal_function_call() const {
  const ::yi::FunctionCall* p = function_call_;
  return p != nullptr ? *p : reinterpret_cast<const ::yi::FunctionCall&>(
      ::yi::_FunctionCall_default_instance_);
}
inline const ::yi::FunctionCall& Request::function_call() const {
  // @@protoc_insertion_point(field_get:yi.Request.function_call)
  return _internal_function_call();
}
inline void Request::unsafe_arena_set_allocated_function_call(
    ::yi::FunctionCall* function_call) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(function_call_);
  }
  function_call_ = function_call;
  if (function_call) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:yi.Request.function_call)
}
inline ::yi::FunctionCall* Request::release_function_call() {
  _has_bits_[0] &= ~0x00000004u;
  ::yi::FunctionCall* temp = function_call_;
  function_call_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::yi::FunctionCall* Request::unsafe_arena_release_function_call() {
  // @@protoc_insertion_point(field_release:yi.Request.function_call)
  _has_bits_[0] &= ~0x00000004u;
  ::yi::FunctionCall* temp = function_call_;
  function_call_ = nullptr;
  return temp;
}
inline ::yi::FunctionCall* Request::_internal_mutable_function_call() {
  _has_bits_[0] |= 0x00000004u;
  if (function_call_ == nullptr) {
    auto* p = CreateMaybeMessage<::yi::FunctionCall>(GetArenaForAllocation());
    function_call_ = p;
  }
  return function_call_;
}
inline ::yi::FunctionCall* Request::mutable_function_call() {
  ::yi::FunctionCall* _msg = _internal_mutable_function_call();
  // @@protoc_insertion_point(field_mutable:yi.Request.function_call)
  return _msg;
}
inline void Request::set_allocated_function_call(::yi::FunctionCall* function_call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete function_call_;
  }
  if (function_call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::yi::FunctionCall>::GetOwningArena(function_call);
    if (message_arena != submessage_arena) {
      function_call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, function_call, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  function_call_ = function_call;
  // @@protoc_insertion_point(field_set_allocated:yi.Request.function_call)
}

// optional .yi.FunctionRet function_ret = 5;
inline bool Request::_internal_has_function_ret() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || function_ret_ != nullptr);
  return value;
}
inline bool Request::has_function_ret() const {
  return _internal_has_function_ret();
}
inline void Request::clear_function_ret() {
  if (function_ret_ != nullptr) function_ret_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::yi::FunctionRet& Request::_internal_function_ret() const {
  const ::yi::FunctionRet* p = function_ret_;
  return p != nullptr ? *p : reinterpret_cast<const ::yi::FunctionRet&>(
      ::yi::_FunctionRet_default_instance_);
}
inline const ::yi::FunctionRet& Request::function_ret() const {
  // @@protoc_insertion_point(field_get:yi.Request.function_ret)
  return _internal_function_ret();
}
inline void Request::unsafe_arena_set_allocated_function_ret(
    ::yi::FunctionRet* function_ret) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(function_ret_);
  }
  function_ret_ = function_ret;
  if (function_ret) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:yi.Request.function_ret)
}
inline ::yi::FunctionRet* Request::release_function_ret() {
  _has_bits_[0] &= ~0x00000008u;
  ::yi::FunctionRet* temp = function_ret_;
  function_ret_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::yi::FunctionRet* Request::unsafe_arena_release_function_ret() {
  // @@protoc_insertion_point(field_release:yi.Request.function_ret)
  _has_bits_[0] &= ~0x00000008u;
  ::yi::FunctionRet* temp = function_ret_;
  function_ret_ = nullptr;
  return temp;
}
inline ::yi::FunctionRet* Request::_internal_mutable_function_ret() {
  _has_bits_[0] |= 0x00000008u;
  if (function_ret_ == nullptr) {
    auto* p = CreateMaybeMessage<::yi::FunctionRet>(GetArenaForAllocation());
    function_ret_ = p;
  }
  return function_ret_;
}
inline ::yi::FunctionRet* Request::mutable_function_ret() {
  ::yi::FunctionRet* _msg = _internal_mutable_function_ret();
  // @@protoc_insertion_point(field_mutable:yi.Request.function_ret)
  return _msg;
}
inline void Request::set_allocated_function_ret(::yi::FunctionRet* function_ret) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete function_ret_;
  }
  if (function_ret) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::yi::FunctionRet>::GetOwningArena(function_ret);
    if (message_arena != submessage_arena) {
      function_ret = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, function_ret, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  function_ret_ = function_ret;
  // @@protoc_insertion_point(field_set_allocated:yi.Request.function_ret)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace yi

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::yi::Request_RequestType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::yi::Request_RequestType>() {
  return ::yi::Request_RequestType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Request_2eproto
