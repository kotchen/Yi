// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Request.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Request_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Request_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Request_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Request_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Request_2eproto;
namespace yi {
class ConnectionReq;
struct ConnectionReqDefaultTypeInternal;
extern ConnectionReqDefaultTypeInternal _ConnectionReq_default_instance_;
class FunctionCall;
struct FunctionCallDefaultTypeInternal;
extern FunctionCallDefaultTypeInternal _FunctionCall_default_instance_;
class FunctionCall_add_double;
struct FunctionCall_add_doubleDefaultTypeInternal;
extern FunctionCall_add_doubleDefaultTypeInternal _FunctionCall_add_double_default_instance_;
class FunctionCall_add_int;
struct FunctionCall_add_intDefaultTypeInternal;
extern FunctionCall_add_intDefaultTypeInternal _FunctionCall_add_int_default_instance_;
class FunctionCall_add_string;
struct FunctionCall_add_stringDefaultTypeInternal;
extern FunctionCall_add_stringDefaultTypeInternal _FunctionCall_add_string_default_instance_;
class FunctionCall_player_move;
struct FunctionCall_player_moveDefaultTypeInternal;
extern FunctionCall_player_moveDefaultTypeInternal _FunctionCall_player_move_default_instance_;
class FunctionRet;
struct FunctionRetDefaultTypeInternal;
extern FunctionRetDefaultTypeInternal _FunctionRet_default_instance_;
class FunctionRet_add_double_ret;
struct FunctionRet_add_double_retDefaultTypeInternal;
extern FunctionRet_add_double_retDefaultTypeInternal _FunctionRet_add_double_ret_default_instance_;
class FunctionRet_add_int_ret;
struct FunctionRet_add_int_retDefaultTypeInternal;
extern FunctionRet_add_int_retDefaultTypeInternal _FunctionRet_add_int_ret_default_instance_;
class FunctionRet_add_string_ret;
struct FunctionRet_add_string_retDefaultTypeInternal;
extern FunctionRet_add_string_retDefaultTypeInternal _FunctionRet_add_string_ret_default_instance_;
class FunctionRet_player_move_ret;
struct FunctionRet_player_move_retDefaultTypeInternal;
extern FunctionRet_player_move_retDefaultTypeInternal _FunctionRet_player_move_ret_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
}  // namespace yi
PROTOBUF_NAMESPACE_OPEN
template<> ::yi::ConnectionReq* Arena::CreateMaybeMessage<::yi::ConnectionReq>(Arena*);
template<> ::yi::FunctionCall* Arena::CreateMaybeMessage<::yi::FunctionCall>(Arena*);
template<> ::yi::FunctionCall_add_double* Arena::CreateMaybeMessage<::yi::FunctionCall_add_double>(Arena*);
template<> ::yi::FunctionCall_add_int* Arena::CreateMaybeMessage<::yi::FunctionCall_add_int>(Arena*);
template<> ::yi::FunctionCall_add_string* Arena::CreateMaybeMessage<::yi::FunctionCall_add_string>(Arena*);
template<> ::yi::FunctionCall_player_move* Arena::CreateMaybeMessage<::yi::FunctionCall_player_move>(Arena*);
template<> ::yi::FunctionRet* Arena::CreateMaybeMessage<::yi::FunctionRet>(Arena*);
template<> ::yi::FunctionRet_add_double_ret* Arena::CreateMaybeMessage<::yi::FunctionRet_add_double_ret>(Arena*);
template<> ::yi::FunctionRet_add_int_ret* Arena::CreateMaybeMessage<::yi::FunctionRet_add_int_ret>(Arena*);
template<> ::yi::FunctionRet_add_string_ret* Arena::CreateMaybeMessage<::yi::FunctionRet_add_string_ret>(Arena*);
template<> ::yi::FunctionRet_player_move_ret* Arena::CreateMaybeMessage<::yi::FunctionRet_player_move_ret>(Arena*);
template<> ::yi::Request* Arena::CreateMaybeMessage<::yi::Request>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace yi {

// ===================================================================

class ConnectionReq final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:yi.ConnectionReq) */ {
 public:
  inline ConnectionReq() : ConnectionReq(nullptr) {}
  explicit constexpr ConnectionReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConnectionReq(const ConnectionReq& from);
  ConnectionReq(ConnectionReq&& from) noexcept
    : ConnectionReq() {
    *this = ::std::move(from);
  }

  inline ConnectionReq& operator=(const ConnectionReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConnectionReq& operator=(ConnectionReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConnectionReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConnectionReq* internal_default_instance() {
    return reinterpret_cast<const ConnectionReq*>(
               &_ConnectionReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConnectionReq& a, ConnectionReq& b) {
    a.Swap(&b);
  }
  inline void Swap(ConnectionReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConnectionReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConnectionReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConnectionReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ConnectionReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ConnectionReq& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yi.ConnectionReq";
  }
  protected:
  explicit ConnectionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:yi.ConnectionReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Request_2eproto;
};
// -------------------------------------------------------------------

class FunctionCall_add_int final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yi.FunctionCall.add_int) */ {
 public:
  inline FunctionCall_add_int() : FunctionCall_add_int(nullptr) {}
  ~FunctionCall_add_int() override;
  explicit constexpr FunctionCall_add_int(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionCall_add_int(const FunctionCall_add_int& from);
  FunctionCall_add_int(FunctionCall_add_int&& from) noexcept
    : FunctionCall_add_int() {
    *this = ::std::move(from);
  }

  inline FunctionCall_add_int& operator=(const FunctionCall_add_int& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionCall_add_int& operator=(FunctionCall_add_int&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionCall_add_int& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionCall_add_int* internal_default_instance() {
    return reinterpret_cast<const FunctionCall_add_int*>(
               &_FunctionCall_add_int_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FunctionCall_add_int& a, FunctionCall_add_int& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionCall_add_int* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionCall_add_int* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionCall_add_int* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionCall_add_int>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionCall_add_int& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FunctionCall_add_int& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionCall_add_int* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yi.FunctionCall.add_int";
  }
  protected:
  explicit FunctionCall_add_int(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 1,
    kRightFieldNumber = 2,
  };
  // required int32 left = 1;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  int32_t left() const;
  void set_left(int32_t value);
  private:
  int32_t _internal_left() const;
  void _internal_set_left(int32_t value);
  public:

  // required int32 right = 2;
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  int32_t right() const;
  void set_right(int32_t value);
  private:
  int32_t _internal_right() const;
  void _internal_set_right(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:yi.FunctionCall.add_int)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t left_;
  int32_t right_;
  friend struct ::TableStruct_Request_2eproto;
};
// -------------------------------------------------------------------

class FunctionCall_add_double final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yi.FunctionCall.add_double) */ {
 public:
  inline FunctionCall_add_double() : FunctionCall_add_double(nullptr) {}
  ~FunctionCall_add_double() override;
  explicit constexpr FunctionCall_add_double(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionCall_add_double(const FunctionCall_add_double& from);
  FunctionCall_add_double(FunctionCall_add_double&& from) noexcept
    : FunctionCall_add_double() {
    *this = ::std::move(from);
  }

  inline FunctionCall_add_double& operator=(const FunctionCall_add_double& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionCall_add_double& operator=(FunctionCall_add_double&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionCall_add_double& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionCall_add_double* internal_default_instance() {
    return reinterpret_cast<const FunctionCall_add_double*>(
               &_FunctionCall_add_double_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FunctionCall_add_double& a, FunctionCall_add_double& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionCall_add_double* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionCall_add_double* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionCall_add_double* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionCall_add_double>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionCall_add_double& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FunctionCall_add_double& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionCall_add_double* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yi.FunctionCall.add_double";
  }
  protected:
  explicit FunctionCall_add_double(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 1,
    kRightFieldNumber = 2,
  };
  // required double left = 1;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  double left() const;
  void set_left(double value);
  private:
  double _internal_left() const;
  void _internal_set_left(double value);
  public:

  // required double right = 2;
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  double right() const;
  void set_right(double value);
  private:
  double _internal_right() const;
  void _internal_set_right(double value);
  public:

  // @@protoc_insertion_point(class_scope:yi.FunctionCall.add_double)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double left_;
  double right_;
  friend struct ::TableStruct_Request_2eproto;
};
// -------------------------------------------------------------------

class FunctionCall_add_string final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yi.FunctionCall.add_string) */ {
 public:
  inline FunctionCall_add_string() : FunctionCall_add_string(nullptr) {}
  ~FunctionCall_add_string() override;
  explicit constexpr FunctionCall_add_string(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionCall_add_string(const FunctionCall_add_string& from);
  FunctionCall_add_string(FunctionCall_add_string&& from) noexcept
    : FunctionCall_add_string() {
    *this = ::std::move(from);
  }

  inline FunctionCall_add_string& operator=(const FunctionCall_add_string& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionCall_add_string& operator=(FunctionCall_add_string&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionCall_add_string& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionCall_add_string* internal_default_instance() {
    return reinterpret_cast<const FunctionCall_add_string*>(
               &_FunctionCall_add_string_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FunctionCall_add_string& a, FunctionCall_add_string& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionCall_add_string* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionCall_add_string* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionCall_add_string* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionCall_add_string>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionCall_add_string& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FunctionCall_add_string& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionCall_add_string* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yi.FunctionCall.add_string";
  }
  protected:
  explicit FunctionCall_add_string(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftFieldNumber = 1,
    kRightFieldNumber = 2,
  };
  // required string left = 1;
  bool has_left() const;
  private:
  bool _internal_has_left() const;
  public:
  void clear_left();
  const std::string& left() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_left(ArgT0&& arg0, ArgT... args);
  std::string* mutable_left();
  PROTOBUF_NODISCARD std::string* release_left();
  void set_allocated_left(std::string* left);
  private:
  const std::string& _internal_left() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_left(const std::string& value);
  std::string* _internal_mutable_left();
  public:

  // required string right = 2;
  bool has_right() const;
  private:
  bool _internal_has_right() const;
  public:
  void clear_right();
  const std::string& right() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_right(ArgT0&& arg0, ArgT... args);
  std::string* mutable_right();
  PROTOBUF_NODISCARD std::string* release_right();
  void set_allocated_right(std::string* right);
  private:
  const std::string& _internal_right() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_right(const std::string& value);
  std::string* _internal_mutable_right();
  public:

  // @@protoc_insertion_point(class_scope:yi.FunctionCall.add_string)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr left_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr right_;
  friend struct ::TableStruct_Request_2eproto;
};
// -------------------------------------------------------------------

class FunctionCall_player_move final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yi.FunctionCall.player_move) */ {
 public:
  inline FunctionCall_player_move() : FunctionCall_player_move(nullptr) {}
  ~FunctionCall_player_move() override;
  explicit constexpr FunctionCall_player_move(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionCall_player_move(const FunctionCall_player_move& from);
  FunctionCall_player_move(FunctionCall_player_move&& from) noexcept
    : FunctionCall_player_move() {
    *this = ::std::move(from);
  }

  inline FunctionCall_player_move& operator=(const FunctionCall_player_move& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionCall_player_move& operator=(FunctionCall_player_move&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionCall_player_move& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionCall_player_move* internal_default_instance() {
    return reinterpret_cast<const FunctionCall_player_move*>(
               &_FunctionCall_player_move_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FunctionCall_player_move& a, FunctionCall_player_move& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionCall_player_move* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionCall_player_move* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionCall_player_move* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionCall_player_move>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionCall_player_move& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FunctionCall_player_move& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionCall_player_move* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yi.FunctionCall.player_move";
  }
  protected:
  explicit FunctionCall_player_move(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kSpeedFieldNumber = 3,
    kAccelerationFieldNumber = 4,
    kAspectFieldNumber = 5,
    kAngleFieldNumber = 6,
  };
  // required double x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // required double y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // required double speed = 3;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  double speed() const;
  void set_speed(double value);
  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);
  public:

  // required double acceleration = 4;
  bool has_acceleration() const;
  private:
  bool _internal_has_acceleration() const;
  public:
  void clear_acceleration();
  double acceleration() const;
  void set_acceleration(double value);
  private:
  double _internal_acceleration() const;
  void _internal_set_acceleration(double value);
  public:

  // required double aspect = 5;
  bool has_aspect() const;
  private:
  bool _internal_has_aspect() const;
  public:
  void clear_aspect();
  double aspect() const;
  void set_aspect(double value);
  private:
  double _internal_aspect() const;
  void _internal_set_aspect(double value);
  public:

  // required double angle = 6;
  bool has_angle() const;
  private:
  bool _internal_has_angle() const;
  public:
  void clear_angle();
  double angle() const;
  void set_angle(double value);
  private:
  double _internal_angle() const;
  void _internal_set_angle(double value);
  public:

  // @@protoc_insertion_point(class_scope:yi.FunctionCall.player_move)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double speed_;
  double acceleration_;
  double aspect_;
  double angle_;
  friend struct ::TableStruct_Request_2eproto;
};
// -------------------------------------------------------------------

class FunctionCall final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yi.FunctionCall) */ {
 public:
  inline FunctionCall() : FunctionCall(nullptr) {}
  ~FunctionCall() override;
  explicit constexpr FunctionCall(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionCall(const FunctionCall& from);
  FunctionCall(FunctionCall&& from) noexcept
    : FunctionCall() {
    *this = ::std::move(from);
  }

  inline FunctionCall& operator=(const FunctionCall& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionCall& operator=(FunctionCall&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionCall& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionCall* internal_default_instance() {
    return reinterpret_cast<const FunctionCall*>(
               &_FunctionCall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FunctionCall& a, FunctionCall& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionCall* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionCall* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionCall* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionCall>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionCall& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FunctionCall& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionCall* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yi.FunctionCall";
  }
  protected:
  explicit FunctionCall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FunctionCall_add_int add_int;
  typedef FunctionCall_add_double add_double;
  typedef FunctionCall_add_string add_string;
  typedef FunctionCall_player_move player_move;

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionNameFieldNumber = 1,
    kAddIntParamsFieldNumber = 2,
    kAddDoubleParamsFieldNumber = 3,
    kAddStringParamsFieldNumber = 4,
    kPlayerMoveParamsFieldNumber = 5,
  };
  // required string function_name = 1;
  bool has_function_name() const;
  private:
  bool _internal_has_function_name() const;
  public:
  void clear_function_name();
  const std::string& function_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_function_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_function_name();
  PROTOBUF_NODISCARD std::string* release_function_name();
  void set_allocated_function_name(std::string* function_name);
  private:
  const std::string& _internal_function_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_function_name(const std::string& value);
  std::string* _internal_mutable_function_name();
  public:

  // optional .yi.FunctionCall.add_int add_int_params = 2;
  bool has_add_int_params() const;
  private:
  bool _internal_has_add_int_params() const;
  public:
  void clear_add_int_params();
  const ::yi::FunctionCall_add_int& add_int_params() const;
  PROTOBUF_NODISCARD ::yi::FunctionCall_add_int* release_add_int_params();
  ::yi::FunctionCall_add_int* mutable_add_int_params();
  void set_allocated_add_int_params(::yi::FunctionCall_add_int* add_int_params);
  private:
  const ::yi::FunctionCall_add_int& _internal_add_int_params() const;
  ::yi::FunctionCall_add_int* _internal_mutable_add_int_params();
  public:
  void unsafe_arena_set_allocated_add_int_params(
      ::yi::FunctionCall_add_int* add_int_params);
  ::yi::FunctionCall_add_int* unsafe_arena_release_add_int_params();

  // optional .yi.FunctionCall.add_double add_double_params = 3;
  bool has_add_double_params() const;
  private:
  bool _internal_has_add_double_params() const;
  public:
  void clear_add_double_params();
  const ::yi::FunctionCall_add_double& add_double_params() const;
  PROTOBUF_NODISCARD ::yi::FunctionCall_add_double* release_add_double_params();
  ::yi::FunctionCall_add_double* mutable_add_double_params();
  void set_allocated_add_double_params(::yi::FunctionCall_add_double* add_double_params);
  private:
  const ::yi::FunctionCall_add_double& _internal_add_double_params() const;
  ::yi::FunctionCall_add_double* _internal_mutable_add_double_params();
  public:
  void unsafe_arena_set_allocated_add_double_params(
      ::yi::FunctionCall_add_double* add_double_params);
  ::yi::FunctionCall_add_double* unsafe_arena_release_add_double_params();

  // optional .yi.FunctionCall.add_string add_string_params = 4;
  bool has_add_string_params() const;
  private:
  bool _internal_has_add_string_params() const;
  public:
  void clear_add_string_params();
  const ::yi::FunctionCall_add_string& add_string_params() const;
  PROTOBUF_NODISCARD ::yi::FunctionCall_add_string* release_add_string_params();
  ::yi::FunctionCall_add_string* mutable_add_string_params();
  void set_allocated_add_string_params(::yi::FunctionCall_add_string* add_string_params);
  private:
  const ::yi::FunctionCall_add_string& _internal_add_string_params() const;
  ::yi::FunctionCall_add_string* _internal_mutable_add_string_params();
  public:
  void unsafe_arena_set_allocated_add_string_params(
      ::yi::FunctionCall_add_string* add_string_params);
  ::yi::FunctionCall_add_string* unsafe_arena_release_add_string_params();

  // optional .yi.FunctionCall.player_move player_move_params = 5;
  bool has_player_move_params() const;
  private:
  bool _internal_has_player_move_params() const;
  public:
  void clear_player_move_params();
  const ::yi::FunctionCall_player_move& player_move_params() const;
  PROTOBUF_NODISCARD ::yi::FunctionCall_player_move* release_player_move_params();
  ::yi::FunctionCall_player_move* mutable_player_move_params();
  void set_allocated_player_move_params(::yi::FunctionCall_player_move* player_move_params);
  private:
  const ::yi::FunctionCall_player_move& _internal_player_move_params() const;
  ::yi::FunctionCall_player_move* _internal_mutable_player_move_params();
  public:
  void unsafe_arena_set_allocated_player_move_params(
      ::yi::FunctionCall_player_move* player_move_params);
  ::yi::FunctionCall_player_move* unsafe_arena_release_player_move_params();

  // @@protoc_insertion_point(class_scope:yi.FunctionCall)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_name_;
  ::yi::FunctionCall_add_int* add_int_params_;
  ::yi::FunctionCall_add_double* add_double_params_;
  ::yi::FunctionCall_add_string* add_string_params_;
  ::yi::FunctionCall_player_move* player_move_params_;
  friend struct ::TableStruct_Request_2eproto;
};
// -------------------------------------------------------------------

class FunctionRet_add_int_ret final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yi.FunctionRet.add_int_ret) */ {
 public:
  inline FunctionRet_add_int_ret() : FunctionRet_add_int_ret(nullptr) {}
  ~FunctionRet_add_int_ret() override;
  explicit constexpr FunctionRet_add_int_ret(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionRet_add_int_ret(const FunctionRet_add_int_ret& from);
  FunctionRet_add_int_ret(FunctionRet_add_int_ret&& from) noexcept
    : FunctionRet_add_int_ret() {
    *this = ::std::move(from);
  }

  inline FunctionRet_add_int_ret& operator=(const FunctionRet_add_int_ret& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionRet_add_int_ret& operator=(FunctionRet_add_int_ret&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionRet_add_int_ret& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionRet_add_int_ret* internal_default_instance() {
    return reinterpret_cast<const FunctionRet_add_int_ret*>(
               &_FunctionRet_add_int_ret_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FunctionRet_add_int_ret& a, FunctionRet_add_int_ret& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionRet_add_int_ret* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionRet_add_int_ret* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionRet_add_int_ret* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionRet_add_int_ret>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionRet_add_int_ret& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FunctionRet_add_int_ret& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionRet_add_int_ret* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yi.FunctionRet.add_int_ret";
  }
  protected:
  explicit FunctionRet_add_int_ret(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetFieldNumber = 1,
  };
  // required int32 ret = 1;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  int32_t ret() const;
  void set_ret(int32_t value);
  private:
  int32_t _internal_ret() const;
  void _internal_set_ret(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:yi.FunctionRet.add_int_ret)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t ret_;
  friend struct ::TableStruct_Request_2eproto;
};
// -------------------------------------------------------------------

class FunctionRet_add_double_ret final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yi.FunctionRet.add_double_ret) */ {
 public:
  inline FunctionRet_add_double_ret() : FunctionRet_add_double_ret(nullptr) {}
  ~FunctionRet_add_double_ret() override;
  explicit constexpr FunctionRet_add_double_ret(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionRet_add_double_ret(const FunctionRet_add_double_ret& from);
  FunctionRet_add_double_ret(FunctionRet_add_double_ret&& from) noexcept
    : FunctionRet_add_double_ret() {
    *this = ::std::move(from);
  }

  inline FunctionRet_add_double_ret& operator=(const FunctionRet_add_double_ret& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionRet_add_double_ret& operator=(FunctionRet_add_double_ret&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionRet_add_double_ret& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionRet_add_double_ret* internal_default_instance() {
    return reinterpret_cast<const FunctionRet_add_double_ret*>(
               &_FunctionRet_add_double_ret_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FunctionRet_add_double_ret& a, FunctionRet_add_double_ret& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionRet_add_double_ret* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionRet_add_double_ret* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionRet_add_double_ret* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionRet_add_double_ret>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionRet_add_double_ret& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FunctionRet_add_double_ret& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionRet_add_double_ret* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yi.FunctionRet.add_double_ret";
  }
  protected:
  explicit FunctionRet_add_double_ret(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetFieldNumber = 1,
  };
  // required double ret = 1;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  double ret() const;
  void set_ret(double value);
  private:
  double _internal_ret() const;
  void _internal_set_ret(double value);
  public:

  // @@protoc_insertion_point(class_scope:yi.FunctionRet.add_double_ret)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double ret_;
  friend struct ::TableStruct_Request_2eproto;
};
// -------------------------------------------------------------------

class FunctionRet_add_string_ret final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yi.FunctionRet.add_string_ret) */ {
 public:
  inline FunctionRet_add_string_ret() : FunctionRet_add_string_ret(nullptr) {}
  ~FunctionRet_add_string_ret() override;
  explicit constexpr FunctionRet_add_string_ret(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionRet_add_string_ret(const FunctionRet_add_string_ret& from);
  FunctionRet_add_string_ret(FunctionRet_add_string_ret&& from) noexcept
    : FunctionRet_add_string_ret() {
    *this = ::std::move(from);
  }

  inline FunctionRet_add_string_ret& operator=(const FunctionRet_add_string_ret& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionRet_add_string_ret& operator=(FunctionRet_add_string_ret&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionRet_add_string_ret& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionRet_add_string_ret* internal_default_instance() {
    return reinterpret_cast<const FunctionRet_add_string_ret*>(
               &_FunctionRet_add_string_ret_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FunctionRet_add_string_ret& a, FunctionRet_add_string_ret& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionRet_add_string_ret* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionRet_add_string_ret* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionRet_add_string_ret* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionRet_add_string_ret>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionRet_add_string_ret& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FunctionRet_add_string_ret& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionRet_add_string_ret* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yi.FunctionRet.add_string_ret";
  }
  protected:
  explicit FunctionRet_add_string_ret(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRetFieldNumber = 1,
  };
  // required string ret = 1;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  const std::string& ret() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ret(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ret();
  PROTOBUF_NODISCARD std::string* release_ret();
  void set_allocated_ret(std::string* ret);
  private:
  const std::string& _internal_ret() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ret(const std::string& value);
  std::string* _internal_mutable_ret();
  public:

  // @@protoc_insertion_point(class_scope:yi.FunctionRet.add_string_ret)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ret_;
  friend struct ::TableStruct_Request_2eproto;
};
// -------------------------------------------------------------------

class FunctionRet_player_move_ret final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yi.FunctionRet.player_move_ret) */ {
 public:
  inline FunctionRet_player_move_ret() : FunctionRet_player_move_ret(nullptr) {}
  ~FunctionRet_player_move_ret() override;
  explicit constexpr FunctionRet_player_move_ret(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionRet_player_move_ret(const FunctionRet_player_move_ret& from);
  FunctionRet_player_move_ret(FunctionRet_player_move_ret&& from) noexcept
    : FunctionRet_player_move_ret() {
    *this = ::std::move(from);
  }

  inline FunctionRet_player_move_ret& operator=(const FunctionRet_player_move_ret& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionRet_player_move_ret& operator=(FunctionRet_player_move_ret&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionRet_player_move_ret& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionRet_player_move_ret* internal_default_instance() {
    return reinterpret_cast<const FunctionRet_player_move_ret*>(
               &_FunctionRet_player_move_ret_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FunctionRet_player_move_ret& a, FunctionRet_player_move_ret& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionRet_player_move_ret* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionRet_player_move_ret* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionRet_player_move_ret* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionRet_player_move_ret>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionRet_player_move_ret& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FunctionRet_player_move_ret& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionRet_player_move_ret* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yi.FunctionRet.player_move_ret";
  }
  protected:
  explicit FunctionRet_player_move_ret(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kSpeedFieldNumber = 3,
    kAspectFieldNumber = 5,
  };
  // required double x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // required double y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // required double speed = 3;
  bool has_speed() const;
  private:
  bool _internal_has_speed() const;
  public:
  void clear_speed();
  double speed() const;
  void set_speed(double value);
  private:
  double _internal_speed() const;
  void _internal_set_speed(double value);
  public:

  // required double aspect = 5;
  bool has_aspect() const;
  private:
  bool _internal_has_aspect() const;
  public:
  void clear_aspect();
  double aspect() const;
  void set_aspect(double value);
  private:
  double _internal_aspect() const;
  void _internal_set_aspect(double value);
  public:

  // @@protoc_insertion_point(class_scope:yi.FunctionRet.player_move_ret)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double x_;
  double y_;
  double speed_;
  double aspect_;
  friend struct ::TableStruct_Request_2eproto;
};
// -------------------------------------------------------------------

class FunctionRet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yi.FunctionRet) */ {
 public:
  inline FunctionRet() : FunctionRet(nullptr) {}
  ~FunctionRet() override;
  explicit constexpr FunctionRet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FunctionRet(const FunctionRet& from);
  FunctionRet(FunctionRet&& from) noexcept
    : FunctionRet() {
    *this = ::std::move(from);
  }

  inline FunctionRet& operator=(const FunctionRet& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionRet& operator=(FunctionRet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FunctionRet& default_instance() {
    return *internal_default_instance();
  }
  static inline const FunctionRet* internal_default_instance() {
    return reinterpret_cast<const FunctionRet*>(
               &_FunctionRet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(FunctionRet& a, FunctionRet& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionRet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionRet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FunctionRet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FunctionRet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FunctionRet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FunctionRet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionRet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yi.FunctionRet";
  }
  protected:
  explicit FunctionRet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef FunctionRet_add_int_ret add_int_ret;
  typedef FunctionRet_add_double_ret add_double_ret;
  typedef FunctionRet_add_string_ret add_string_ret;
  typedef FunctionRet_player_move_ret player_move_ret;

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionNameFieldNumber = 1,
    kAddIntRetParamsFieldNumber = 2,
    kAddDoubleRetParamsFieldNumber = 3,
    kAddStringRetParamsFieldNumber = 4,
    kPlayerMoveRetParamsFieldNumber = 5,
  };
  // required string function_name = 1;
  bool has_function_name() const;
  private:
  bool _internal_has_function_name() const;
  public:
  void clear_function_name();
  const std::string& function_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_function_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_function_name();
  PROTOBUF_NODISCARD std::string* release_function_name();
  void set_allocated_function_name(std::string* function_name);
  private:
  const std::string& _internal_function_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_function_name(const std::string& value);
  std::string* _internal_mutable_function_name();
  public:

  // optional .yi.FunctionRet.add_int_ret add_int_ret_params = 2;
  bool has_add_int_ret_params() const;
  private:
  bool _internal_has_add_int_ret_params() const;
  public:
  void clear_add_int_ret_params();
  const ::yi::FunctionRet_add_int_ret& add_int_ret_params() const;
  PROTOBUF_NODISCARD ::yi::FunctionRet_add_int_ret* release_add_int_ret_params();
  ::yi::FunctionRet_add_int_ret* mutable_add_int_ret_params();
  void set_allocated_add_int_ret_params(::yi::FunctionRet_add_int_ret* add_int_ret_params);
  private:
  const ::yi::FunctionRet_add_int_ret& _internal_add_int_ret_params() const;
  ::yi::FunctionRet_add_int_ret* _internal_mutable_add_int_ret_params();
  public:
  void unsafe_arena_set_allocated_add_int_ret_params(
      ::yi::FunctionRet_add_int_ret* add_int_ret_params);
  ::yi::FunctionRet_add_int_ret* unsafe_arena_release_add_int_ret_params();

  // optional .yi.FunctionRet.add_double_ret add_double_ret_params = 3;
  bool has_add_double_ret_params() const;
  private:
  bool _internal_has_add_double_ret_params() const;
  public:
  void clear_add_double_ret_params();
  const ::yi::FunctionRet_add_double_ret& add_double_ret_params() const;
  PROTOBUF_NODISCARD ::yi::FunctionRet_add_double_ret* release_add_double_ret_params();
  ::yi::FunctionRet_add_double_ret* mutable_add_double_ret_params();
  void set_allocated_add_double_ret_params(::yi::FunctionRet_add_double_ret* add_double_ret_params);
  private:
  const ::yi::FunctionRet_add_double_ret& _internal_add_double_ret_params() const;
  ::yi::FunctionRet_add_double_ret* _internal_mutable_add_double_ret_params();
  public:
  void unsafe_arena_set_allocated_add_double_ret_params(
      ::yi::FunctionRet_add_double_ret* add_double_ret_params);
  ::yi::FunctionRet_add_double_ret* unsafe_arena_release_add_double_ret_params();

  // optional .yi.FunctionRet.add_string_ret add_string_ret_params = 4;
  bool has_add_string_ret_params() const;
  private:
  bool _internal_has_add_string_ret_params() const;
  public:
  void clear_add_string_ret_params();
  const ::yi::FunctionRet_add_string_ret& add_string_ret_params() const;
  PROTOBUF_NODISCARD ::yi::FunctionRet_add_string_ret* release_add_string_ret_params();
  ::yi::FunctionRet_add_string_ret* mutable_add_string_ret_params();
  void set_allocated_add_string_ret_params(::yi::FunctionRet_add_string_ret* add_string_ret_params);
  private:
  const ::yi::FunctionRet_add_string_ret& _internal_add_string_ret_params() const;
  ::yi::FunctionRet_add_string_ret* _internal_mutable_add_string_ret_params();
  public:
  void unsafe_arena_set_allocated_add_string_ret_params(
      ::yi::FunctionRet_add_string_ret* add_string_ret_params);
  ::yi::FunctionRet_add_string_ret* unsafe_arena_release_add_string_ret_params();

  // optional .yi.FunctionRet.player_move_ret player_move_ret_params = 5;
  bool has_player_move_ret_params() const;
  private:
  bool _internal_has_player_move_ret_params() const;
  public:
  void clear_player_move_ret_params();
  const ::yi::FunctionRet_player_move_ret& player_move_ret_params() const;
  PROTOBUF_NODISCARD ::yi::FunctionRet_player_move_ret* release_player_move_ret_params();
  ::yi::FunctionRet_player_move_ret* mutable_player_move_ret_params();
  void set_allocated_player_move_ret_params(::yi::FunctionRet_player_move_ret* player_move_ret_params);
  private:
  const ::yi::FunctionRet_player_move_ret& _internal_player_move_ret_params() const;
  ::yi::FunctionRet_player_move_ret* _internal_mutable_player_move_ret_params();
  public:
  void unsafe_arena_set_allocated_player_move_ret_params(
      ::yi::FunctionRet_player_move_ret* player_move_ret_params);
  ::yi::FunctionRet_player_move_ret* unsafe_arena_release_player_move_ret_params();

  // @@protoc_insertion_point(class_scope:yi.FunctionRet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_name_;
  ::yi::FunctionRet_add_int_ret* add_int_ret_params_;
  ::yi::FunctionRet_add_double_ret* add_double_ret_params_;
  ::yi::FunctionRet_add_string_ret* add_string_ret_params_;
  ::yi::FunctionRet_player_move_ret* player_move_ret_params_;
  friend struct ::TableStruct_Request_2eproto;
};
// -------------------------------------------------------------------

class Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:yi.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  explicit constexpr Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "yi.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCallTypeFieldNumber = 1,
    kConnectionReqFieldNumber = 2,
    kFunctionCallFieldNumber = 3,
    kFunctionRetFieldNumber = 4,
  };
  // required string call_type = 1;
  bool has_call_type() const;
  private:
  bool _internal_has_call_type() const;
  public:
  void clear_call_type();
  const std::string& call_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_call_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_call_type();
  PROTOBUF_NODISCARD std::string* release_call_type();
  void set_allocated_call_type(std::string* call_type);
  private:
  const std::string& _internal_call_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_call_type(const std::string& value);
  std::string* _internal_mutable_call_type();
  public:

  // optional .yi.ConnectionReq connection_req = 2;
  bool has_connection_req() const;
  private:
  bool _internal_has_connection_req() const;
  public:
  void clear_connection_req();
  const ::yi::ConnectionReq& connection_req() const;
  PROTOBUF_NODISCARD ::yi::ConnectionReq* release_connection_req();
  ::yi::ConnectionReq* mutable_connection_req();
  void set_allocated_connection_req(::yi::ConnectionReq* connection_req);
  private:
  const ::yi::ConnectionReq& _internal_connection_req() const;
  ::yi::ConnectionReq* _internal_mutable_connection_req();
  public:
  void unsafe_arena_set_allocated_connection_req(
      ::yi::ConnectionReq* connection_req);
  ::yi::ConnectionReq* unsafe_arena_release_connection_req();

  // optional .yi.FunctionCall function_call = 3;
  bool has_function_call() const;
  private:
  bool _internal_has_function_call() const;
  public:
  void clear_function_call();
  const ::yi::FunctionCall& function_call() const;
  PROTOBUF_NODISCARD ::yi::FunctionCall* release_function_call();
  ::yi::FunctionCall* mutable_function_call();
  void set_allocated_function_call(::yi::FunctionCall* function_call);
  private:
  const ::yi::FunctionCall& _internal_function_call() const;
  ::yi::FunctionCall* _internal_mutable_function_call();
  public:
  void unsafe_arena_set_allocated_function_call(
      ::yi::FunctionCall* function_call);
  ::yi::FunctionCall* unsafe_arena_release_function_call();

  // optional .yi.FunctionRet function_ret = 4;
  bool has_function_ret() const;
  private:
  bool _internal_has_function_ret() const;
  public:
  void clear_function_ret();
  const ::yi::FunctionRet& function_ret() const;
  PROTOBUF_NODISCARD ::yi::FunctionRet* release_function_ret();
  ::yi::FunctionRet* mutable_function_ret();
  void set_allocated_function_ret(::yi::FunctionRet* function_ret);
  private:
  const ::yi::FunctionRet& _internal_function_ret() const;
  ::yi::FunctionRet* _internal_mutable_function_ret();
  public:
  void unsafe_arena_set_allocated_function_ret(
      ::yi::FunctionRet* function_ret);
  ::yi::FunctionRet* unsafe_arena_release_function_ret();

  // @@protoc_insertion_point(class_scope:yi.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr call_type_;
  ::yi::ConnectionReq* connection_req_;
  ::yi::FunctionCall* function_call_;
  ::yi::FunctionRet* function_ret_;
  friend struct ::TableStruct_Request_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConnectionReq

// -------------------------------------------------------------------

// FunctionCall_add_int

// required int32 left = 1;
inline bool FunctionCall_add_int::_internal_has_left() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FunctionCall_add_int::has_left() const {
  return _internal_has_left();
}
inline void FunctionCall_add_int::clear_left() {
  left_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t FunctionCall_add_int::_internal_left() const {
  return left_;
}
inline int32_t FunctionCall_add_int::left() const {
  // @@protoc_insertion_point(field_get:yi.FunctionCall.add_int.left)
  return _internal_left();
}
inline void FunctionCall_add_int::_internal_set_left(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  left_ = value;
}
inline void FunctionCall_add_int::set_left(int32_t value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:yi.FunctionCall.add_int.left)
}

// required int32 right = 2;
inline bool FunctionCall_add_int::_internal_has_right() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FunctionCall_add_int::has_right() const {
  return _internal_has_right();
}
inline void FunctionCall_add_int::clear_right() {
  right_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t FunctionCall_add_int::_internal_right() const {
  return right_;
}
inline int32_t FunctionCall_add_int::right() const {
  // @@protoc_insertion_point(field_get:yi.FunctionCall.add_int.right)
  return _internal_right();
}
inline void FunctionCall_add_int::_internal_set_right(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  right_ = value;
}
inline void FunctionCall_add_int::set_right(int32_t value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:yi.FunctionCall.add_int.right)
}

// -------------------------------------------------------------------

// FunctionCall_add_double

// required double left = 1;
inline bool FunctionCall_add_double::_internal_has_left() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FunctionCall_add_double::has_left() const {
  return _internal_has_left();
}
inline void FunctionCall_add_double::clear_left() {
  left_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double FunctionCall_add_double::_internal_left() const {
  return left_;
}
inline double FunctionCall_add_double::left() const {
  // @@protoc_insertion_point(field_get:yi.FunctionCall.add_double.left)
  return _internal_left();
}
inline void FunctionCall_add_double::_internal_set_left(double value) {
  _has_bits_[0] |= 0x00000001u;
  left_ = value;
}
inline void FunctionCall_add_double::set_left(double value) {
  _internal_set_left(value);
  // @@protoc_insertion_point(field_set:yi.FunctionCall.add_double.left)
}

// required double right = 2;
inline bool FunctionCall_add_double::_internal_has_right() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FunctionCall_add_double::has_right() const {
  return _internal_has_right();
}
inline void FunctionCall_add_double::clear_right() {
  right_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double FunctionCall_add_double::_internal_right() const {
  return right_;
}
inline double FunctionCall_add_double::right() const {
  // @@protoc_insertion_point(field_get:yi.FunctionCall.add_double.right)
  return _internal_right();
}
inline void FunctionCall_add_double::_internal_set_right(double value) {
  _has_bits_[0] |= 0x00000002u;
  right_ = value;
}
inline void FunctionCall_add_double::set_right(double value) {
  _internal_set_right(value);
  // @@protoc_insertion_point(field_set:yi.FunctionCall.add_double.right)
}

// -------------------------------------------------------------------

// FunctionCall_add_string

// required string left = 1;
inline bool FunctionCall_add_string::_internal_has_left() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FunctionCall_add_string::has_left() const {
  return _internal_has_left();
}
inline void FunctionCall_add_string::clear_left() {
  left_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FunctionCall_add_string::left() const {
  // @@protoc_insertion_point(field_get:yi.FunctionCall.add_string.left)
  return _internal_left();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FunctionCall_add_string::set_left(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 left_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:yi.FunctionCall.add_string.left)
}
inline std::string* FunctionCall_add_string::mutable_left() {
  std::string* _s = _internal_mutable_left();
  // @@protoc_insertion_point(field_mutable:yi.FunctionCall.add_string.left)
  return _s;
}
inline const std::string& FunctionCall_add_string::_internal_left() const {
  return left_.Get();
}
inline void FunctionCall_add_string::_internal_set_left(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  left_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FunctionCall_add_string::_internal_mutable_left() {
  _has_bits_[0] |= 0x00000001u;
  return left_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FunctionCall_add_string::release_left() {
  // @@protoc_insertion_point(field_release:yi.FunctionCall.add_string.left)
  if (!_internal_has_left()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = left_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (left_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    left_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FunctionCall_add_string::set_allocated_left(std::string* left) {
  if (left != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  left_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), left,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (left_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    left_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:yi.FunctionCall.add_string.left)
}

// required string right = 2;
inline bool FunctionCall_add_string::_internal_has_right() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FunctionCall_add_string::has_right() const {
  return _internal_has_right();
}
inline void FunctionCall_add_string::clear_right() {
  right_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FunctionCall_add_string::right() const {
  // @@protoc_insertion_point(field_get:yi.FunctionCall.add_string.right)
  return _internal_right();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FunctionCall_add_string::set_right(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 right_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:yi.FunctionCall.add_string.right)
}
inline std::string* FunctionCall_add_string::mutable_right() {
  std::string* _s = _internal_mutable_right();
  // @@protoc_insertion_point(field_mutable:yi.FunctionCall.add_string.right)
  return _s;
}
inline const std::string& FunctionCall_add_string::_internal_right() const {
  return right_.Get();
}
inline void FunctionCall_add_string::_internal_set_right(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  right_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FunctionCall_add_string::_internal_mutable_right() {
  _has_bits_[0] |= 0x00000002u;
  return right_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FunctionCall_add_string::release_right() {
  // @@protoc_insertion_point(field_release:yi.FunctionCall.add_string.right)
  if (!_internal_has_right()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = right_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (right_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    right_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FunctionCall_add_string::set_allocated_right(std::string* right) {
  if (right != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  right_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), right,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (right_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    right_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:yi.FunctionCall.add_string.right)
}

// -------------------------------------------------------------------

// FunctionCall_player_move

// required double x = 1;
inline bool FunctionCall_player_move::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FunctionCall_player_move::has_x() const {
  return _internal_has_x();
}
inline void FunctionCall_player_move::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double FunctionCall_player_move::_internal_x() const {
  return x_;
}
inline double FunctionCall_player_move::x() const {
  // @@protoc_insertion_point(field_get:yi.FunctionCall.player_move.x)
  return _internal_x();
}
inline void FunctionCall_player_move::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void FunctionCall_player_move::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:yi.FunctionCall.player_move.x)
}

// required double y = 2;
inline bool FunctionCall_player_move::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FunctionCall_player_move::has_y() const {
  return _internal_has_y();
}
inline void FunctionCall_player_move::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double FunctionCall_player_move::_internal_y() const {
  return y_;
}
inline double FunctionCall_player_move::y() const {
  // @@protoc_insertion_point(field_get:yi.FunctionCall.player_move.y)
  return _internal_y();
}
inline void FunctionCall_player_move::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void FunctionCall_player_move::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:yi.FunctionCall.player_move.y)
}

// required double speed = 3;
inline bool FunctionCall_player_move::_internal_has_speed() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FunctionCall_player_move::has_speed() const {
  return _internal_has_speed();
}
inline void FunctionCall_player_move::clear_speed() {
  speed_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double FunctionCall_player_move::_internal_speed() const {
  return speed_;
}
inline double FunctionCall_player_move::speed() const {
  // @@protoc_insertion_point(field_get:yi.FunctionCall.player_move.speed)
  return _internal_speed();
}
inline void FunctionCall_player_move::_internal_set_speed(double value) {
  _has_bits_[0] |= 0x00000004u;
  speed_ = value;
}
inline void FunctionCall_player_move::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:yi.FunctionCall.player_move.speed)
}

// required double acceleration = 4;
inline bool FunctionCall_player_move::_internal_has_acceleration() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FunctionCall_player_move::has_acceleration() const {
  return _internal_has_acceleration();
}
inline void FunctionCall_player_move::clear_acceleration() {
  acceleration_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double FunctionCall_player_move::_internal_acceleration() const {
  return acceleration_;
}
inline double FunctionCall_player_move::acceleration() const {
  // @@protoc_insertion_point(field_get:yi.FunctionCall.player_move.acceleration)
  return _internal_acceleration();
}
inline void FunctionCall_player_move::_internal_set_acceleration(double value) {
  _has_bits_[0] |= 0x00000008u;
  acceleration_ = value;
}
inline void FunctionCall_player_move::set_acceleration(double value) {
  _internal_set_acceleration(value);
  // @@protoc_insertion_point(field_set:yi.FunctionCall.player_move.acceleration)
}

// required double aspect = 5;
inline bool FunctionCall_player_move::_internal_has_aspect() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool FunctionCall_player_move::has_aspect() const {
  return _internal_has_aspect();
}
inline void FunctionCall_player_move::clear_aspect() {
  aspect_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double FunctionCall_player_move::_internal_aspect() const {
  return aspect_;
}
inline double FunctionCall_player_move::aspect() const {
  // @@protoc_insertion_point(field_get:yi.FunctionCall.player_move.aspect)
  return _internal_aspect();
}
inline void FunctionCall_player_move::_internal_set_aspect(double value) {
  _has_bits_[0] |= 0x00000010u;
  aspect_ = value;
}
inline void FunctionCall_player_move::set_aspect(double value) {
  _internal_set_aspect(value);
  // @@protoc_insertion_point(field_set:yi.FunctionCall.player_move.aspect)
}

// required double angle = 6;
inline bool FunctionCall_player_move::_internal_has_angle() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool FunctionCall_player_move::has_angle() const {
  return _internal_has_angle();
}
inline void FunctionCall_player_move::clear_angle() {
  angle_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double FunctionCall_player_move::_internal_angle() const {
  return angle_;
}
inline double FunctionCall_player_move::angle() const {
  // @@protoc_insertion_point(field_get:yi.FunctionCall.player_move.angle)
  return _internal_angle();
}
inline void FunctionCall_player_move::_internal_set_angle(double value) {
  _has_bits_[0] |= 0x00000020u;
  angle_ = value;
}
inline void FunctionCall_player_move::set_angle(double value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:yi.FunctionCall.player_move.angle)
}

// -------------------------------------------------------------------

// FunctionCall

// required string function_name = 1;
inline bool FunctionCall::_internal_has_function_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FunctionCall::has_function_name() const {
  return _internal_has_function_name();
}
inline void FunctionCall::clear_function_name() {
  function_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FunctionCall::function_name() const {
  // @@protoc_insertion_point(field_get:yi.FunctionCall.function_name)
  return _internal_function_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FunctionCall::set_function_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 function_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:yi.FunctionCall.function_name)
}
inline std::string* FunctionCall::mutable_function_name() {
  std::string* _s = _internal_mutable_function_name();
  // @@protoc_insertion_point(field_mutable:yi.FunctionCall.function_name)
  return _s;
}
inline const std::string& FunctionCall::_internal_function_name() const {
  return function_name_.Get();
}
inline void FunctionCall::_internal_set_function_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  function_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FunctionCall::_internal_mutable_function_name() {
  _has_bits_[0] |= 0x00000001u;
  return function_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FunctionCall::release_function_name() {
  // @@protoc_insertion_point(field_release:yi.FunctionCall.function_name)
  if (!_internal_has_function_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = function_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (function_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    function_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FunctionCall::set_allocated_function_name(std::string* function_name) {
  if (function_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  function_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), function_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (function_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    function_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:yi.FunctionCall.function_name)
}

// optional .yi.FunctionCall.add_int add_int_params = 2;
inline bool FunctionCall::_internal_has_add_int_params() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || add_int_params_ != nullptr);
  return value;
}
inline bool FunctionCall::has_add_int_params() const {
  return _internal_has_add_int_params();
}
inline void FunctionCall::clear_add_int_params() {
  if (add_int_params_ != nullptr) add_int_params_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::yi::FunctionCall_add_int& FunctionCall::_internal_add_int_params() const {
  const ::yi::FunctionCall_add_int* p = add_int_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::yi::FunctionCall_add_int&>(
      ::yi::_FunctionCall_add_int_default_instance_);
}
inline const ::yi::FunctionCall_add_int& FunctionCall::add_int_params() const {
  // @@protoc_insertion_point(field_get:yi.FunctionCall.add_int_params)
  return _internal_add_int_params();
}
inline void FunctionCall::unsafe_arena_set_allocated_add_int_params(
    ::yi::FunctionCall_add_int* add_int_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(add_int_params_);
  }
  add_int_params_ = add_int_params;
  if (add_int_params) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:yi.FunctionCall.add_int_params)
}
inline ::yi::FunctionCall_add_int* FunctionCall::release_add_int_params() {
  _has_bits_[0] &= ~0x00000002u;
  ::yi::FunctionCall_add_int* temp = add_int_params_;
  add_int_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::yi::FunctionCall_add_int* FunctionCall::unsafe_arena_release_add_int_params() {
  // @@protoc_insertion_point(field_release:yi.FunctionCall.add_int_params)
  _has_bits_[0] &= ~0x00000002u;
  ::yi::FunctionCall_add_int* temp = add_int_params_;
  add_int_params_ = nullptr;
  return temp;
}
inline ::yi::FunctionCall_add_int* FunctionCall::_internal_mutable_add_int_params() {
  _has_bits_[0] |= 0x00000002u;
  if (add_int_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::yi::FunctionCall_add_int>(GetArenaForAllocation());
    add_int_params_ = p;
  }
  return add_int_params_;
}
inline ::yi::FunctionCall_add_int* FunctionCall::mutable_add_int_params() {
  ::yi::FunctionCall_add_int* _msg = _internal_mutable_add_int_params();
  // @@protoc_insertion_point(field_mutable:yi.FunctionCall.add_int_params)
  return _msg;
}
inline void FunctionCall::set_allocated_add_int_params(::yi::FunctionCall_add_int* add_int_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete add_int_params_;
  }
  if (add_int_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::yi::FunctionCall_add_int>::GetOwningArena(add_int_params);
    if (message_arena != submessage_arena) {
      add_int_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_int_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  add_int_params_ = add_int_params;
  // @@protoc_insertion_point(field_set_allocated:yi.FunctionCall.add_int_params)
}

// optional .yi.FunctionCall.add_double add_double_params = 3;
inline bool FunctionCall::_internal_has_add_double_params() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || add_double_params_ != nullptr);
  return value;
}
inline bool FunctionCall::has_add_double_params() const {
  return _internal_has_add_double_params();
}
inline void FunctionCall::clear_add_double_params() {
  if (add_double_params_ != nullptr) add_double_params_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::yi::FunctionCall_add_double& FunctionCall::_internal_add_double_params() const {
  const ::yi::FunctionCall_add_double* p = add_double_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::yi::FunctionCall_add_double&>(
      ::yi::_FunctionCall_add_double_default_instance_);
}
inline const ::yi::FunctionCall_add_double& FunctionCall::add_double_params() const {
  // @@protoc_insertion_point(field_get:yi.FunctionCall.add_double_params)
  return _internal_add_double_params();
}
inline void FunctionCall::unsafe_arena_set_allocated_add_double_params(
    ::yi::FunctionCall_add_double* add_double_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(add_double_params_);
  }
  add_double_params_ = add_double_params;
  if (add_double_params) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:yi.FunctionCall.add_double_params)
}
inline ::yi::FunctionCall_add_double* FunctionCall::release_add_double_params() {
  _has_bits_[0] &= ~0x00000004u;
  ::yi::FunctionCall_add_double* temp = add_double_params_;
  add_double_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::yi::FunctionCall_add_double* FunctionCall::unsafe_arena_release_add_double_params() {
  // @@protoc_insertion_point(field_release:yi.FunctionCall.add_double_params)
  _has_bits_[0] &= ~0x00000004u;
  ::yi::FunctionCall_add_double* temp = add_double_params_;
  add_double_params_ = nullptr;
  return temp;
}
inline ::yi::FunctionCall_add_double* FunctionCall::_internal_mutable_add_double_params() {
  _has_bits_[0] |= 0x00000004u;
  if (add_double_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::yi::FunctionCall_add_double>(GetArenaForAllocation());
    add_double_params_ = p;
  }
  return add_double_params_;
}
inline ::yi::FunctionCall_add_double* FunctionCall::mutable_add_double_params() {
  ::yi::FunctionCall_add_double* _msg = _internal_mutable_add_double_params();
  // @@protoc_insertion_point(field_mutable:yi.FunctionCall.add_double_params)
  return _msg;
}
inline void FunctionCall::set_allocated_add_double_params(::yi::FunctionCall_add_double* add_double_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete add_double_params_;
  }
  if (add_double_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::yi::FunctionCall_add_double>::GetOwningArena(add_double_params);
    if (message_arena != submessage_arena) {
      add_double_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_double_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  add_double_params_ = add_double_params;
  // @@protoc_insertion_point(field_set_allocated:yi.FunctionCall.add_double_params)
}

// optional .yi.FunctionCall.add_string add_string_params = 4;
inline bool FunctionCall::_internal_has_add_string_params() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || add_string_params_ != nullptr);
  return value;
}
inline bool FunctionCall::has_add_string_params() const {
  return _internal_has_add_string_params();
}
inline void FunctionCall::clear_add_string_params() {
  if (add_string_params_ != nullptr) add_string_params_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::yi::FunctionCall_add_string& FunctionCall::_internal_add_string_params() const {
  const ::yi::FunctionCall_add_string* p = add_string_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::yi::FunctionCall_add_string&>(
      ::yi::_FunctionCall_add_string_default_instance_);
}
inline const ::yi::FunctionCall_add_string& FunctionCall::add_string_params() const {
  // @@protoc_insertion_point(field_get:yi.FunctionCall.add_string_params)
  return _internal_add_string_params();
}
inline void FunctionCall::unsafe_arena_set_allocated_add_string_params(
    ::yi::FunctionCall_add_string* add_string_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(add_string_params_);
  }
  add_string_params_ = add_string_params;
  if (add_string_params) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:yi.FunctionCall.add_string_params)
}
inline ::yi::FunctionCall_add_string* FunctionCall::release_add_string_params() {
  _has_bits_[0] &= ~0x00000008u;
  ::yi::FunctionCall_add_string* temp = add_string_params_;
  add_string_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::yi::FunctionCall_add_string* FunctionCall::unsafe_arena_release_add_string_params() {
  // @@protoc_insertion_point(field_release:yi.FunctionCall.add_string_params)
  _has_bits_[0] &= ~0x00000008u;
  ::yi::FunctionCall_add_string* temp = add_string_params_;
  add_string_params_ = nullptr;
  return temp;
}
inline ::yi::FunctionCall_add_string* FunctionCall::_internal_mutable_add_string_params() {
  _has_bits_[0] |= 0x00000008u;
  if (add_string_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::yi::FunctionCall_add_string>(GetArenaForAllocation());
    add_string_params_ = p;
  }
  return add_string_params_;
}
inline ::yi::FunctionCall_add_string* FunctionCall::mutable_add_string_params() {
  ::yi::FunctionCall_add_string* _msg = _internal_mutable_add_string_params();
  // @@protoc_insertion_point(field_mutable:yi.FunctionCall.add_string_params)
  return _msg;
}
inline void FunctionCall::set_allocated_add_string_params(::yi::FunctionCall_add_string* add_string_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete add_string_params_;
  }
  if (add_string_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::yi::FunctionCall_add_string>::GetOwningArena(add_string_params);
    if (message_arena != submessage_arena) {
      add_string_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_string_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  add_string_params_ = add_string_params;
  // @@protoc_insertion_point(field_set_allocated:yi.FunctionCall.add_string_params)
}

// optional .yi.FunctionCall.player_move player_move_params = 5;
inline bool FunctionCall::_internal_has_player_move_params() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || player_move_params_ != nullptr);
  return value;
}
inline bool FunctionCall::has_player_move_params() const {
  return _internal_has_player_move_params();
}
inline void FunctionCall::clear_player_move_params() {
  if (player_move_params_ != nullptr) player_move_params_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::yi::FunctionCall_player_move& FunctionCall::_internal_player_move_params() const {
  const ::yi::FunctionCall_player_move* p = player_move_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::yi::FunctionCall_player_move&>(
      ::yi::_FunctionCall_player_move_default_instance_);
}
inline const ::yi::FunctionCall_player_move& FunctionCall::player_move_params() const {
  // @@protoc_insertion_point(field_get:yi.FunctionCall.player_move_params)
  return _internal_player_move_params();
}
inline void FunctionCall::unsafe_arena_set_allocated_player_move_params(
    ::yi::FunctionCall_player_move* player_move_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_move_params_);
  }
  player_move_params_ = player_move_params;
  if (player_move_params) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:yi.FunctionCall.player_move_params)
}
inline ::yi::FunctionCall_player_move* FunctionCall::release_player_move_params() {
  _has_bits_[0] &= ~0x00000010u;
  ::yi::FunctionCall_player_move* temp = player_move_params_;
  player_move_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::yi::FunctionCall_player_move* FunctionCall::unsafe_arena_release_player_move_params() {
  // @@protoc_insertion_point(field_release:yi.FunctionCall.player_move_params)
  _has_bits_[0] &= ~0x00000010u;
  ::yi::FunctionCall_player_move* temp = player_move_params_;
  player_move_params_ = nullptr;
  return temp;
}
inline ::yi::FunctionCall_player_move* FunctionCall::_internal_mutable_player_move_params() {
  _has_bits_[0] |= 0x00000010u;
  if (player_move_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::yi::FunctionCall_player_move>(GetArenaForAllocation());
    player_move_params_ = p;
  }
  return player_move_params_;
}
inline ::yi::FunctionCall_player_move* FunctionCall::mutable_player_move_params() {
  ::yi::FunctionCall_player_move* _msg = _internal_mutable_player_move_params();
  // @@protoc_insertion_point(field_mutable:yi.FunctionCall.player_move_params)
  return _msg;
}
inline void FunctionCall::set_allocated_player_move_params(::yi::FunctionCall_player_move* player_move_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_move_params_;
  }
  if (player_move_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::yi::FunctionCall_player_move>::GetOwningArena(player_move_params);
    if (message_arena != submessage_arena) {
      player_move_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_move_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  player_move_params_ = player_move_params;
  // @@protoc_insertion_point(field_set_allocated:yi.FunctionCall.player_move_params)
}

// -------------------------------------------------------------------

// FunctionRet_add_int_ret

// required int32 ret = 1;
inline bool FunctionRet_add_int_ret::_internal_has_ret() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FunctionRet_add_int_ret::has_ret() const {
  return _internal_has_ret();
}
inline void FunctionRet_add_int_ret::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t FunctionRet_add_int_ret::_internal_ret() const {
  return ret_;
}
inline int32_t FunctionRet_add_int_ret::ret() const {
  // @@protoc_insertion_point(field_get:yi.FunctionRet.add_int_ret.ret)
  return _internal_ret();
}
inline void FunctionRet_add_int_ret::_internal_set_ret(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  ret_ = value;
}
inline void FunctionRet_add_int_ret::set_ret(int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:yi.FunctionRet.add_int_ret.ret)
}

// -------------------------------------------------------------------

// FunctionRet_add_double_ret

// required double ret = 1;
inline bool FunctionRet_add_double_ret::_internal_has_ret() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FunctionRet_add_double_ret::has_ret() const {
  return _internal_has_ret();
}
inline void FunctionRet_add_double_ret::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double FunctionRet_add_double_ret::_internal_ret() const {
  return ret_;
}
inline double FunctionRet_add_double_ret::ret() const {
  // @@protoc_insertion_point(field_get:yi.FunctionRet.add_double_ret.ret)
  return _internal_ret();
}
inline void FunctionRet_add_double_ret::_internal_set_ret(double value) {
  _has_bits_[0] |= 0x00000001u;
  ret_ = value;
}
inline void FunctionRet_add_double_ret::set_ret(double value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:yi.FunctionRet.add_double_ret.ret)
}

// -------------------------------------------------------------------

// FunctionRet_add_string_ret

// required string ret = 1;
inline bool FunctionRet_add_string_ret::_internal_has_ret() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FunctionRet_add_string_ret::has_ret() const {
  return _internal_has_ret();
}
inline void FunctionRet_add_string_ret::clear_ret() {
  ret_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FunctionRet_add_string_ret::ret() const {
  // @@protoc_insertion_point(field_get:yi.FunctionRet.add_string_ret.ret)
  return _internal_ret();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FunctionRet_add_string_ret::set_ret(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 ret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:yi.FunctionRet.add_string_ret.ret)
}
inline std::string* FunctionRet_add_string_ret::mutable_ret() {
  std::string* _s = _internal_mutable_ret();
  // @@protoc_insertion_point(field_mutable:yi.FunctionRet.add_string_ret.ret)
  return _s;
}
inline const std::string& FunctionRet_add_string_ret::_internal_ret() const {
  return ret_.Get();
}
inline void FunctionRet_add_string_ret::_internal_set_ret(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FunctionRet_add_string_ret::_internal_mutable_ret() {
  _has_bits_[0] |= 0x00000001u;
  return ret_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FunctionRet_add_string_ret::release_ret() {
  // @@protoc_insertion_point(field_release:yi.FunctionRet.add_string_ret.ret)
  if (!_internal_has_ret()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = ret_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ret_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FunctionRet_add_string_ret::set_allocated_ret(std::string* ret) {
  if (ret != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ret,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ret_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:yi.FunctionRet.add_string_ret.ret)
}

// -------------------------------------------------------------------

// FunctionRet_player_move_ret

// required double x = 1;
inline bool FunctionRet_player_move_ret::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FunctionRet_player_move_ret::has_x() const {
  return _internal_has_x();
}
inline void FunctionRet_player_move_ret::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double FunctionRet_player_move_ret::_internal_x() const {
  return x_;
}
inline double FunctionRet_player_move_ret::x() const {
  // @@protoc_insertion_point(field_get:yi.FunctionRet.player_move_ret.x)
  return _internal_x();
}
inline void FunctionRet_player_move_ret::_internal_set_x(double value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void FunctionRet_player_move_ret::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:yi.FunctionRet.player_move_ret.x)
}

// required double y = 2;
inline bool FunctionRet_player_move_ret::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FunctionRet_player_move_ret::has_y() const {
  return _internal_has_y();
}
inline void FunctionRet_player_move_ret::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double FunctionRet_player_move_ret::_internal_y() const {
  return y_;
}
inline double FunctionRet_player_move_ret::y() const {
  // @@protoc_insertion_point(field_get:yi.FunctionRet.player_move_ret.y)
  return _internal_y();
}
inline void FunctionRet_player_move_ret::_internal_set_y(double value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void FunctionRet_player_move_ret::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:yi.FunctionRet.player_move_ret.y)
}

// required double speed = 3;
inline bool FunctionRet_player_move_ret::_internal_has_speed() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool FunctionRet_player_move_ret::has_speed() const {
  return _internal_has_speed();
}
inline void FunctionRet_player_move_ret::clear_speed() {
  speed_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double FunctionRet_player_move_ret::_internal_speed() const {
  return speed_;
}
inline double FunctionRet_player_move_ret::speed() const {
  // @@protoc_insertion_point(field_get:yi.FunctionRet.player_move_ret.speed)
  return _internal_speed();
}
inline void FunctionRet_player_move_ret::_internal_set_speed(double value) {
  _has_bits_[0] |= 0x00000004u;
  speed_ = value;
}
inline void FunctionRet_player_move_ret::set_speed(double value) {
  _internal_set_speed(value);
  // @@protoc_insertion_point(field_set:yi.FunctionRet.player_move_ret.speed)
}

// required double aspect = 5;
inline bool FunctionRet_player_move_ret::_internal_has_aspect() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool FunctionRet_player_move_ret::has_aspect() const {
  return _internal_has_aspect();
}
inline void FunctionRet_player_move_ret::clear_aspect() {
  aspect_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double FunctionRet_player_move_ret::_internal_aspect() const {
  return aspect_;
}
inline double FunctionRet_player_move_ret::aspect() const {
  // @@protoc_insertion_point(field_get:yi.FunctionRet.player_move_ret.aspect)
  return _internal_aspect();
}
inline void FunctionRet_player_move_ret::_internal_set_aspect(double value) {
  _has_bits_[0] |= 0x00000008u;
  aspect_ = value;
}
inline void FunctionRet_player_move_ret::set_aspect(double value) {
  _internal_set_aspect(value);
  // @@protoc_insertion_point(field_set:yi.FunctionRet.player_move_ret.aspect)
}

// -------------------------------------------------------------------

// FunctionRet

// required string function_name = 1;
inline bool FunctionRet::_internal_has_function_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FunctionRet::has_function_name() const {
  return _internal_has_function_name();
}
inline void FunctionRet::clear_function_name() {
  function_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FunctionRet::function_name() const {
  // @@protoc_insertion_point(field_get:yi.FunctionRet.function_name)
  return _internal_function_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FunctionRet::set_function_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 function_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:yi.FunctionRet.function_name)
}
inline std::string* FunctionRet::mutable_function_name() {
  std::string* _s = _internal_mutable_function_name();
  // @@protoc_insertion_point(field_mutable:yi.FunctionRet.function_name)
  return _s;
}
inline const std::string& FunctionRet::_internal_function_name() const {
  return function_name_.Get();
}
inline void FunctionRet::_internal_set_function_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  function_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FunctionRet::_internal_mutable_function_name() {
  _has_bits_[0] |= 0x00000001u;
  return function_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FunctionRet::release_function_name() {
  // @@protoc_insertion_point(field_release:yi.FunctionRet.function_name)
  if (!_internal_has_function_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = function_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (function_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    function_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void FunctionRet::set_allocated_function_name(std::string* function_name) {
  if (function_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  function_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), function_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (function_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    function_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:yi.FunctionRet.function_name)
}

// optional .yi.FunctionRet.add_int_ret add_int_ret_params = 2;
inline bool FunctionRet::_internal_has_add_int_ret_params() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || add_int_ret_params_ != nullptr);
  return value;
}
inline bool FunctionRet::has_add_int_ret_params() const {
  return _internal_has_add_int_ret_params();
}
inline void FunctionRet::clear_add_int_ret_params() {
  if (add_int_ret_params_ != nullptr) add_int_ret_params_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::yi::FunctionRet_add_int_ret& FunctionRet::_internal_add_int_ret_params() const {
  const ::yi::FunctionRet_add_int_ret* p = add_int_ret_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::yi::FunctionRet_add_int_ret&>(
      ::yi::_FunctionRet_add_int_ret_default_instance_);
}
inline const ::yi::FunctionRet_add_int_ret& FunctionRet::add_int_ret_params() const {
  // @@protoc_insertion_point(field_get:yi.FunctionRet.add_int_ret_params)
  return _internal_add_int_ret_params();
}
inline void FunctionRet::unsafe_arena_set_allocated_add_int_ret_params(
    ::yi::FunctionRet_add_int_ret* add_int_ret_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(add_int_ret_params_);
  }
  add_int_ret_params_ = add_int_ret_params;
  if (add_int_ret_params) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:yi.FunctionRet.add_int_ret_params)
}
inline ::yi::FunctionRet_add_int_ret* FunctionRet::release_add_int_ret_params() {
  _has_bits_[0] &= ~0x00000002u;
  ::yi::FunctionRet_add_int_ret* temp = add_int_ret_params_;
  add_int_ret_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::yi::FunctionRet_add_int_ret* FunctionRet::unsafe_arena_release_add_int_ret_params() {
  // @@protoc_insertion_point(field_release:yi.FunctionRet.add_int_ret_params)
  _has_bits_[0] &= ~0x00000002u;
  ::yi::FunctionRet_add_int_ret* temp = add_int_ret_params_;
  add_int_ret_params_ = nullptr;
  return temp;
}
inline ::yi::FunctionRet_add_int_ret* FunctionRet::_internal_mutable_add_int_ret_params() {
  _has_bits_[0] |= 0x00000002u;
  if (add_int_ret_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::yi::FunctionRet_add_int_ret>(GetArenaForAllocation());
    add_int_ret_params_ = p;
  }
  return add_int_ret_params_;
}
inline ::yi::FunctionRet_add_int_ret* FunctionRet::mutable_add_int_ret_params() {
  ::yi::FunctionRet_add_int_ret* _msg = _internal_mutable_add_int_ret_params();
  // @@protoc_insertion_point(field_mutable:yi.FunctionRet.add_int_ret_params)
  return _msg;
}
inline void FunctionRet::set_allocated_add_int_ret_params(::yi::FunctionRet_add_int_ret* add_int_ret_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete add_int_ret_params_;
  }
  if (add_int_ret_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::yi::FunctionRet_add_int_ret>::GetOwningArena(add_int_ret_params);
    if (message_arena != submessage_arena) {
      add_int_ret_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_int_ret_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  add_int_ret_params_ = add_int_ret_params;
  // @@protoc_insertion_point(field_set_allocated:yi.FunctionRet.add_int_ret_params)
}

// optional .yi.FunctionRet.add_double_ret add_double_ret_params = 3;
inline bool FunctionRet::_internal_has_add_double_ret_params() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || add_double_ret_params_ != nullptr);
  return value;
}
inline bool FunctionRet::has_add_double_ret_params() const {
  return _internal_has_add_double_ret_params();
}
inline void FunctionRet::clear_add_double_ret_params() {
  if (add_double_ret_params_ != nullptr) add_double_ret_params_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::yi::FunctionRet_add_double_ret& FunctionRet::_internal_add_double_ret_params() const {
  const ::yi::FunctionRet_add_double_ret* p = add_double_ret_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::yi::FunctionRet_add_double_ret&>(
      ::yi::_FunctionRet_add_double_ret_default_instance_);
}
inline const ::yi::FunctionRet_add_double_ret& FunctionRet::add_double_ret_params() const {
  // @@protoc_insertion_point(field_get:yi.FunctionRet.add_double_ret_params)
  return _internal_add_double_ret_params();
}
inline void FunctionRet::unsafe_arena_set_allocated_add_double_ret_params(
    ::yi::FunctionRet_add_double_ret* add_double_ret_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(add_double_ret_params_);
  }
  add_double_ret_params_ = add_double_ret_params;
  if (add_double_ret_params) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:yi.FunctionRet.add_double_ret_params)
}
inline ::yi::FunctionRet_add_double_ret* FunctionRet::release_add_double_ret_params() {
  _has_bits_[0] &= ~0x00000004u;
  ::yi::FunctionRet_add_double_ret* temp = add_double_ret_params_;
  add_double_ret_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::yi::FunctionRet_add_double_ret* FunctionRet::unsafe_arena_release_add_double_ret_params() {
  // @@protoc_insertion_point(field_release:yi.FunctionRet.add_double_ret_params)
  _has_bits_[0] &= ~0x00000004u;
  ::yi::FunctionRet_add_double_ret* temp = add_double_ret_params_;
  add_double_ret_params_ = nullptr;
  return temp;
}
inline ::yi::FunctionRet_add_double_ret* FunctionRet::_internal_mutable_add_double_ret_params() {
  _has_bits_[0] |= 0x00000004u;
  if (add_double_ret_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::yi::FunctionRet_add_double_ret>(GetArenaForAllocation());
    add_double_ret_params_ = p;
  }
  return add_double_ret_params_;
}
inline ::yi::FunctionRet_add_double_ret* FunctionRet::mutable_add_double_ret_params() {
  ::yi::FunctionRet_add_double_ret* _msg = _internal_mutable_add_double_ret_params();
  // @@protoc_insertion_point(field_mutable:yi.FunctionRet.add_double_ret_params)
  return _msg;
}
inline void FunctionRet::set_allocated_add_double_ret_params(::yi::FunctionRet_add_double_ret* add_double_ret_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete add_double_ret_params_;
  }
  if (add_double_ret_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::yi::FunctionRet_add_double_ret>::GetOwningArena(add_double_ret_params);
    if (message_arena != submessage_arena) {
      add_double_ret_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_double_ret_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  add_double_ret_params_ = add_double_ret_params;
  // @@protoc_insertion_point(field_set_allocated:yi.FunctionRet.add_double_ret_params)
}

// optional .yi.FunctionRet.add_string_ret add_string_ret_params = 4;
inline bool FunctionRet::_internal_has_add_string_ret_params() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || add_string_ret_params_ != nullptr);
  return value;
}
inline bool FunctionRet::has_add_string_ret_params() const {
  return _internal_has_add_string_ret_params();
}
inline void FunctionRet::clear_add_string_ret_params() {
  if (add_string_ret_params_ != nullptr) add_string_ret_params_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::yi::FunctionRet_add_string_ret& FunctionRet::_internal_add_string_ret_params() const {
  const ::yi::FunctionRet_add_string_ret* p = add_string_ret_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::yi::FunctionRet_add_string_ret&>(
      ::yi::_FunctionRet_add_string_ret_default_instance_);
}
inline const ::yi::FunctionRet_add_string_ret& FunctionRet::add_string_ret_params() const {
  // @@protoc_insertion_point(field_get:yi.FunctionRet.add_string_ret_params)
  return _internal_add_string_ret_params();
}
inline void FunctionRet::unsafe_arena_set_allocated_add_string_ret_params(
    ::yi::FunctionRet_add_string_ret* add_string_ret_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(add_string_ret_params_);
  }
  add_string_ret_params_ = add_string_ret_params;
  if (add_string_ret_params) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:yi.FunctionRet.add_string_ret_params)
}
inline ::yi::FunctionRet_add_string_ret* FunctionRet::release_add_string_ret_params() {
  _has_bits_[0] &= ~0x00000008u;
  ::yi::FunctionRet_add_string_ret* temp = add_string_ret_params_;
  add_string_ret_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::yi::FunctionRet_add_string_ret* FunctionRet::unsafe_arena_release_add_string_ret_params() {
  // @@protoc_insertion_point(field_release:yi.FunctionRet.add_string_ret_params)
  _has_bits_[0] &= ~0x00000008u;
  ::yi::FunctionRet_add_string_ret* temp = add_string_ret_params_;
  add_string_ret_params_ = nullptr;
  return temp;
}
inline ::yi::FunctionRet_add_string_ret* FunctionRet::_internal_mutable_add_string_ret_params() {
  _has_bits_[0] |= 0x00000008u;
  if (add_string_ret_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::yi::FunctionRet_add_string_ret>(GetArenaForAllocation());
    add_string_ret_params_ = p;
  }
  return add_string_ret_params_;
}
inline ::yi::FunctionRet_add_string_ret* FunctionRet::mutable_add_string_ret_params() {
  ::yi::FunctionRet_add_string_ret* _msg = _internal_mutable_add_string_ret_params();
  // @@protoc_insertion_point(field_mutable:yi.FunctionRet.add_string_ret_params)
  return _msg;
}
inline void FunctionRet::set_allocated_add_string_ret_params(::yi::FunctionRet_add_string_ret* add_string_ret_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete add_string_ret_params_;
  }
  if (add_string_ret_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::yi::FunctionRet_add_string_ret>::GetOwningArena(add_string_ret_params);
    if (message_arena != submessage_arena) {
      add_string_ret_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_string_ret_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  add_string_ret_params_ = add_string_ret_params;
  // @@protoc_insertion_point(field_set_allocated:yi.FunctionRet.add_string_ret_params)
}

// optional .yi.FunctionRet.player_move_ret player_move_ret_params = 5;
inline bool FunctionRet::_internal_has_player_move_ret_params() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || player_move_ret_params_ != nullptr);
  return value;
}
inline bool FunctionRet::has_player_move_ret_params() const {
  return _internal_has_player_move_ret_params();
}
inline void FunctionRet::clear_player_move_ret_params() {
  if (player_move_ret_params_ != nullptr) player_move_ret_params_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::yi::FunctionRet_player_move_ret& FunctionRet::_internal_player_move_ret_params() const {
  const ::yi::FunctionRet_player_move_ret* p = player_move_ret_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::yi::FunctionRet_player_move_ret&>(
      ::yi::_FunctionRet_player_move_ret_default_instance_);
}
inline const ::yi::FunctionRet_player_move_ret& FunctionRet::player_move_ret_params() const {
  // @@protoc_insertion_point(field_get:yi.FunctionRet.player_move_ret_params)
  return _internal_player_move_ret_params();
}
inline void FunctionRet::unsafe_arena_set_allocated_player_move_ret_params(
    ::yi::FunctionRet_player_move_ret* player_move_ret_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_move_ret_params_);
  }
  player_move_ret_params_ = player_move_ret_params;
  if (player_move_ret_params) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:yi.FunctionRet.player_move_ret_params)
}
inline ::yi::FunctionRet_player_move_ret* FunctionRet::release_player_move_ret_params() {
  _has_bits_[0] &= ~0x00000010u;
  ::yi::FunctionRet_player_move_ret* temp = player_move_ret_params_;
  player_move_ret_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::yi::FunctionRet_player_move_ret* FunctionRet::unsafe_arena_release_player_move_ret_params() {
  // @@protoc_insertion_point(field_release:yi.FunctionRet.player_move_ret_params)
  _has_bits_[0] &= ~0x00000010u;
  ::yi::FunctionRet_player_move_ret* temp = player_move_ret_params_;
  player_move_ret_params_ = nullptr;
  return temp;
}
inline ::yi::FunctionRet_player_move_ret* FunctionRet::_internal_mutable_player_move_ret_params() {
  _has_bits_[0] |= 0x00000010u;
  if (player_move_ret_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::yi::FunctionRet_player_move_ret>(GetArenaForAllocation());
    player_move_ret_params_ = p;
  }
  return player_move_ret_params_;
}
inline ::yi::FunctionRet_player_move_ret* FunctionRet::mutable_player_move_ret_params() {
  ::yi::FunctionRet_player_move_ret* _msg = _internal_mutable_player_move_ret_params();
  // @@protoc_insertion_point(field_mutable:yi.FunctionRet.player_move_ret_params)
  return _msg;
}
inline void FunctionRet::set_allocated_player_move_ret_params(::yi::FunctionRet_player_move_ret* player_move_ret_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_move_ret_params_;
  }
  if (player_move_ret_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::yi::FunctionRet_player_move_ret>::GetOwningArena(player_move_ret_params);
    if (message_arena != submessage_arena) {
      player_move_ret_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_move_ret_params, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  player_move_ret_params_ = player_move_ret_params;
  // @@protoc_insertion_point(field_set_allocated:yi.FunctionRet.player_move_ret_params)
}

// -------------------------------------------------------------------

// Request

// required string call_type = 1;
inline bool Request::_internal_has_call_type() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool Request::has_call_type() const {
  return _internal_has_call_type();
}
inline void Request::clear_call_type() {
  call_type_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Request::call_type() const {
  // @@protoc_insertion_point(field_get:yi.Request.call_type)
  return _internal_call_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request::set_call_type(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 call_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:yi.Request.call_type)
}
inline std::string* Request::mutable_call_type() {
  std::string* _s = _internal_mutable_call_type();
  // @@protoc_insertion_point(field_mutable:yi.Request.call_type)
  return _s;
}
inline const std::string& Request::_internal_call_type() const {
  return call_type_.Get();
}
inline void Request::_internal_set_call_type(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  call_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_call_type() {
  _has_bits_[0] |= 0x00000001u;
  return call_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Request::release_call_type() {
  // @@protoc_insertion_point(field_release:yi.Request.call_type)
  if (!_internal_has_call_type()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = call_type_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (call_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    call_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void Request::set_allocated_call_type(std::string* call_type) {
  if (call_type != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  call_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), call_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (call_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    call_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:yi.Request.call_type)
}

// optional .yi.ConnectionReq connection_req = 2;
inline bool Request::_internal_has_connection_req() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || connection_req_ != nullptr);
  return value;
}
inline bool Request::has_connection_req() const {
  return _internal_has_connection_req();
}
inline void Request::clear_connection_req() {
  if (connection_req_ != nullptr) connection_req_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::yi::ConnectionReq& Request::_internal_connection_req() const {
  const ::yi::ConnectionReq* p = connection_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::yi::ConnectionReq&>(
      ::yi::_ConnectionReq_default_instance_);
}
inline const ::yi::ConnectionReq& Request::connection_req() const {
  // @@protoc_insertion_point(field_get:yi.Request.connection_req)
  return _internal_connection_req();
}
inline void Request::unsafe_arena_set_allocated_connection_req(
    ::yi::ConnectionReq* connection_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(connection_req_);
  }
  connection_req_ = connection_req;
  if (connection_req) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:yi.Request.connection_req)
}
inline ::yi::ConnectionReq* Request::release_connection_req() {
  _has_bits_[0] &= ~0x00000002u;
  ::yi::ConnectionReq* temp = connection_req_;
  connection_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::yi::ConnectionReq* Request::unsafe_arena_release_connection_req() {
  // @@protoc_insertion_point(field_release:yi.Request.connection_req)
  _has_bits_[0] &= ~0x00000002u;
  ::yi::ConnectionReq* temp = connection_req_;
  connection_req_ = nullptr;
  return temp;
}
inline ::yi::ConnectionReq* Request::_internal_mutable_connection_req() {
  _has_bits_[0] |= 0x00000002u;
  if (connection_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::yi::ConnectionReq>(GetArenaForAllocation());
    connection_req_ = p;
  }
  return connection_req_;
}
inline ::yi::ConnectionReq* Request::mutable_connection_req() {
  ::yi::ConnectionReq* _msg = _internal_mutable_connection_req();
  // @@protoc_insertion_point(field_mutable:yi.Request.connection_req)
  return _msg;
}
inline void Request::set_allocated_connection_req(::yi::ConnectionReq* connection_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete connection_req_;
  }
  if (connection_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::yi::ConnectionReq>::GetOwningArena(connection_req);
    if (message_arena != submessage_arena) {
      connection_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connection_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  connection_req_ = connection_req;
  // @@protoc_insertion_point(field_set_allocated:yi.Request.connection_req)
}

// optional .yi.FunctionCall function_call = 3;
inline bool Request::_internal_has_function_call() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || function_call_ != nullptr);
  return value;
}
inline bool Request::has_function_call() const {
  return _internal_has_function_call();
}
inline void Request::clear_function_call() {
  if (function_call_ != nullptr) function_call_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::yi::FunctionCall& Request::_internal_function_call() const {
  const ::yi::FunctionCall* p = function_call_;
  return p != nullptr ? *p : reinterpret_cast<const ::yi::FunctionCall&>(
      ::yi::_FunctionCall_default_instance_);
}
inline const ::yi::FunctionCall& Request::function_call() const {
  // @@protoc_insertion_point(field_get:yi.Request.function_call)
  return _internal_function_call();
}
inline void Request::unsafe_arena_set_allocated_function_call(
    ::yi::FunctionCall* function_call) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(function_call_);
  }
  function_call_ = function_call;
  if (function_call) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:yi.Request.function_call)
}
inline ::yi::FunctionCall* Request::release_function_call() {
  _has_bits_[0] &= ~0x00000004u;
  ::yi::FunctionCall* temp = function_call_;
  function_call_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::yi::FunctionCall* Request::unsafe_arena_release_function_call() {
  // @@protoc_insertion_point(field_release:yi.Request.function_call)
  _has_bits_[0] &= ~0x00000004u;
  ::yi::FunctionCall* temp = function_call_;
  function_call_ = nullptr;
  return temp;
}
inline ::yi::FunctionCall* Request::_internal_mutable_function_call() {
  _has_bits_[0] |= 0x00000004u;
  if (function_call_ == nullptr) {
    auto* p = CreateMaybeMessage<::yi::FunctionCall>(GetArenaForAllocation());
    function_call_ = p;
  }
  return function_call_;
}
inline ::yi::FunctionCall* Request::mutable_function_call() {
  ::yi::FunctionCall* _msg = _internal_mutable_function_call();
  // @@protoc_insertion_point(field_mutable:yi.Request.function_call)
  return _msg;
}
inline void Request::set_allocated_function_call(::yi::FunctionCall* function_call) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete function_call_;
  }
  if (function_call) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::yi::FunctionCall>::GetOwningArena(function_call);
    if (message_arena != submessage_arena) {
      function_call = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, function_call, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  function_call_ = function_call;
  // @@protoc_insertion_point(field_set_allocated:yi.Request.function_call)
}

// optional .yi.FunctionRet function_ret = 4;
inline bool Request::_internal_has_function_ret() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || function_ret_ != nullptr);
  return value;
}
inline bool Request::has_function_ret() const {
  return _internal_has_function_ret();
}
inline void Request::clear_function_ret() {
  if (function_ret_ != nullptr) function_ret_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::yi::FunctionRet& Request::_internal_function_ret() const {
  const ::yi::FunctionRet* p = function_ret_;
  return p != nullptr ? *p : reinterpret_cast<const ::yi::FunctionRet&>(
      ::yi::_FunctionRet_default_instance_);
}
inline const ::yi::FunctionRet& Request::function_ret() const {
  // @@protoc_insertion_point(field_get:yi.Request.function_ret)
  return _internal_function_ret();
}
inline void Request::unsafe_arena_set_allocated_function_ret(
    ::yi::FunctionRet* function_ret) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(function_ret_);
  }
  function_ret_ = function_ret;
  if (function_ret) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:yi.Request.function_ret)
}
inline ::yi::FunctionRet* Request::release_function_ret() {
  _has_bits_[0] &= ~0x00000008u;
  ::yi::FunctionRet* temp = function_ret_;
  function_ret_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::yi::FunctionRet* Request::unsafe_arena_release_function_ret() {
  // @@protoc_insertion_point(field_release:yi.Request.function_ret)
  _has_bits_[0] &= ~0x00000008u;
  ::yi::FunctionRet* temp = function_ret_;
  function_ret_ = nullptr;
  return temp;
}
inline ::yi::FunctionRet* Request::_internal_mutable_function_ret() {
  _has_bits_[0] |= 0x00000008u;
  if (function_ret_ == nullptr) {
    auto* p = CreateMaybeMessage<::yi::FunctionRet>(GetArenaForAllocation());
    function_ret_ = p;
  }
  return function_ret_;
}
inline ::yi::FunctionRet* Request::mutable_function_ret() {
  ::yi::FunctionRet* _msg = _internal_mutable_function_ret();
  // @@protoc_insertion_point(field_mutable:yi.Request.function_ret)
  return _msg;
}
inline void Request::set_allocated_function_ret(::yi::FunctionRet* function_ret) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete function_ret_;
  }
  if (function_ret) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::yi::FunctionRet>::GetOwningArena(function_ret);
    if (message_arena != submessage_arena) {
      function_ret = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, function_ret, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  function_ret_ = function_ret;
  // @@protoc_insertion_point(field_set_allocated:yi.Request.function_ret)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace yi

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Request_2eproto
