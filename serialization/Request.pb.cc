// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Request.proto

#include "Request.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace yi {
constexpr ConnectionReq::ConnectionReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ConnectionReqDefaultTypeInternal {
  constexpr ConnectionReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConnectionReqDefaultTypeInternal() {}
  union {
    ConnectionReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConnectionReqDefaultTypeInternal _ConnectionReq_default_instance_;
constexpr ConnectionRet_FuncInfo::ConnectionRet_FuncInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : func_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , params_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , return_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ConnectionRet_FuncInfoDefaultTypeInternal {
  constexpr ConnectionRet_FuncInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConnectionRet_FuncInfoDefaultTypeInternal() {}
  union {
    ConnectionRet_FuncInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConnectionRet_FuncInfoDefaultTypeInternal _ConnectionRet_FuncInfo_default_instance_;
constexpr ConnectionRet::ConnectionRet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : func_info_(){}
struct ConnectionRetDefaultTypeInternal {
  constexpr ConnectionRetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConnectionRetDefaultTypeInternal() {}
  union {
    ConnectionRet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConnectionRetDefaultTypeInternal _ConnectionRet_default_instance_;
constexpr FunctionCall_AddIntParams::FunctionCall_AddIntParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : left_(0)
  , right_(0){}
struct FunctionCall_AddIntParamsDefaultTypeInternal {
  constexpr FunctionCall_AddIntParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctionCall_AddIntParamsDefaultTypeInternal() {}
  union {
    FunctionCall_AddIntParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctionCall_AddIntParamsDefaultTypeInternal _FunctionCall_AddIntParams_default_instance_;
constexpr FunctionCall_AddDoubleParams::FunctionCall_AddDoubleParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : left_(0)
  , right_(0){}
struct FunctionCall_AddDoubleParamsDefaultTypeInternal {
  constexpr FunctionCall_AddDoubleParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctionCall_AddDoubleParamsDefaultTypeInternal() {}
  union {
    FunctionCall_AddDoubleParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctionCall_AddDoubleParamsDefaultTypeInternal _FunctionCall_AddDoubleParams_default_instance_;
constexpr FunctionCall_AddStringParams::FunctionCall_AddStringParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : left_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , right_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FunctionCall_AddStringParamsDefaultTypeInternal {
  constexpr FunctionCall_AddStringParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctionCall_AddStringParamsDefaultTypeInternal() {}
  union {
    FunctionCall_AddStringParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctionCall_AddStringParamsDefaultTypeInternal _FunctionCall_AddStringParams_default_instance_;
constexpr FunctionCall_PlayerMoveParams::FunctionCall_PlayerMoveParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , speed_(0)
  , acceleration_(0)
  , aspect_(0)
  , angle_(0){}
struct FunctionCall_PlayerMoveParamsDefaultTypeInternal {
  constexpr FunctionCall_PlayerMoveParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctionCall_PlayerMoveParamsDefaultTypeInternal() {}
  union {
    FunctionCall_PlayerMoveParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctionCall_PlayerMoveParamsDefaultTypeInternal _FunctionCall_PlayerMoveParams_default_instance_;
constexpr FunctionCall::FunctionCall(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : function_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , add_int_params_(nullptr)
  , add_double_params_(nullptr)
  , add_string_params_(nullptr)
  , player_move_params_(nullptr){}
struct FunctionCallDefaultTypeInternal {
  constexpr FunctionCallDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctionCallDefaultTypeInternal() {}
  union {
    FunctionCall _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctionCallDefaultTypeInternal _FunctionCall_default_instance_;
constexpr FunctionRet_AddIntRet::FunctionRet_AddIntRet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ret_(0){}
struct FunctionRet_AddIntRetDefaultTypeInternal {
  constexpr FunctionRet_AddIntRetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctionRet_AddIntRetDefaultTypeInternal() {}
  union {
    FunctionRet_AddIntRet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctionRet_AddIntRetDefaultTypeInternal _FunctionRet_AddIntRet_default_instance_;
constexpr FunctionRet_AddDoubleRet::FunctionRet_AddDoubleRet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ret_(0){}
struct FunctionRet_AddDoubleRetDefaultTypeInternal {
  constexpr FunctionRet_AddDoubleRetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctionRet_AddDoubleRetDefaultTypeInternal() {}
  union {
    FunctionRet_AddDoubleRet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctionRet_AddDoubleRetDefaultTypeInternal _FunctionRet_AddDoubleRet_default_instance_;
constexpr FunctionRet_AddStringRet::FunctionRet_AddStringRet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ret_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FunctionRet_AddStringRetDefaultTypeInternal {
  constexpr FunctionRet_AddStringRetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctionRet_AddStringRetDefaultTypeInternal() {}
  union {
    FunctionRet_AddStringRet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctionRet_AddStringRetDefaultTypeInternal _FunctionRet_AddStringRet_default_instance_;
constexpr FunctionRet_PlayerMoveRet::FunctionRet_PlayerMoveRet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , speed_(0)
  , aspect_(0){}
struct FunctionRet_PlayerMoveRetDefaultTypeInternal {
  constexpr FunctionRet_PlayerMoveRetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctionRet_PlayerMoveRetDefaultTypeInternal() {}
  union {
    FunctionRet_PlayerMoveRet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctionRet_PlayerMoveRetDefaultTypeInternal _FunctionRet_PlayerMoveRet_default_instance_;
constexpr FunctionRet::FunctionRet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : function_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , add_int_ret_params_(nullptr)
  , add_double_ret_params_(nullptr)
  , add_string_ret_params_(nullptr)
  , player_move_ret_params_(nullptr){}
struct FunctionRetDefaultTypeInternal {
  constexpr FunctionRetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctionRetDefaultTypeInternal() {}
  union {
    FunctionRet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctionRetDefaultTypeInternal _FunctionRet_default_instance_;
constexpr Request::Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : connection_req_(nullptr)
  , connection_ret_(nullptr)
  , function_call_(nullptr)
  , function_ret_(nullptr)
  , call_type_(0)
{}
struct RequestDefaultTypeInternal {
  constexpr RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestDefaultTypeInternal() {}
  union {
    Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestDefaultTypeInternal _Request_default_instance_;
}  // namespace yi
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Request_2eproto[14];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Request_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Request_2eproto = nullptr;

const uint32_t TableStruct_Request_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::yi::ConnectionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::yi::ConnectionRet_FuncInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::yi::ConnectionRet_FuncInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::yi::ConnectionRet_FuncInfo, func_name_),
  PROTOBUF_FIELD_OFFSET(::yi::ConnectionRet_FuncInfo, params_type_),
  PROTOBUF_FIELD_OFFSET(::yi::ConnectionRet_FuncInfo, return_type_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::yi::ConnectionRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::yi::ConnectionRet, func_info_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_AddIntParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_AddIntParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_AddIntParams, left_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_AddIntParams, right_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_AddDoubleParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_AddDoubleParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_AddDoubleParams, left_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_AddDoubleParams, right_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_AddStringParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_AddStringParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_AddStringParams, left_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_AddStringParams, right_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_PlayerMoveParams, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_PlayerMoveParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_PlayerMoveParams, x_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_PlayerMoveParams, y_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_PlayerMoveParams, speed_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_PlayerMoveParams, acceleration_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_PlayerMoveParams, aspect_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_PlayerMoveParams, angle_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall, function_name_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall, add_int_params_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall, add_double_params_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall, add_string_params_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall, player_move_params_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet_AddIntRet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet_AddIntRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet_AddIntRet, ret_),
  0,
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet_AddDoubleRet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet_AddDoubleRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet_AddDoubleRet, ret_),
  0,
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet_AddStringRet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet_AddStringRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet_AddStringRet, ret_),
  0,
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet_PlayerMoveRet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet_PlayerMoveRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet_PlayerMoveRet, x_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet_PlayerMoveRet, y_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet_PlayerMoveRet, speed_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet_PlayerMoveRet, aspect_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet, function_name_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet, add_int_ret_params_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet, add_double_ret_params_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet, add_string_ret_params_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet, player_move_ret_params_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::yi::Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::yi::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::yi::Request, call_type_),
  PROTOBUF_FIELD_OFFSET(::yi::Request, connection_req_),
  PROTOBUF_FIELD_OFFSET(::yi::Request, connection_ret_),
  PROTOBUF_FIELD_OFFSET(::yi::Request, function_call_),
  PROTOBUF_FIELD_OFFSET(::yi::Request, function_ret_),
  4,
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::yi::ConnectionReq)},
  { 6, 15, -1, sizeof(::yi::ConnectionRet_FuncInfo)},
  { 18, -1, -1, sizeof(::yi::ConnectionRet)},
  { 25, 33, -1, sizeof(::yi::FunctionCall_AddIntParams)},
  { 35, 43, -1, sizeof(::yi::FunctionCall_AddDoubleParams)},
  { 45, 53, -1, sizeof(::yi::FunctionCall_AddStringParams)},
  { 55, 67, -1, sizeof(::yi::FunctionCall_PlayerMoveParams)},
  { 73, 84, -1, sizeof(::yi::FunctionCall)},
  { 89, 96, -1, sizeof(::yi::FunctionRet_AddIntRet)},
  { 97, 104, -1, sizeof(::yi::FunctionRet_AddDoubleRet)},
  { 105, 112, -1, sizeof(::yi::FunctionRet_AddStringRet)},
  { 113, 123, -1, sizeof(::yi::FunctionRet_PlayerMoveRet)},
  { 127, 138, -1, sizeof(::yi::FunctionRet)},
  { 143, 154, -1, sizeof(::yi::Request)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::yi::_ConnectionReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::yi::_ConnectionRet_FuncInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::yi::_ConnectionRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::yi::_FunctionCall_AddIntParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::yi::_FunctionCall_AddDoubleParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::yi::_FunctionCall_AddStringParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::yi::_FunctionCall_PlayerMoveParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::yi::_FunctionCall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::yi::_FunctionRet_AddIntRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::yi::_FunctionRet_AddDoubleRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::yi::_FunctionRet_AddStringRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::yi::_FunctionRet_PlayerMoveRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::yi::_FunctionRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::yi::_Request_default_instance_),
};

const char descriptor_table_protodef_Request_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rRequest.proto\022\002yi\"\017\n\rConnectionReq\"\207\001\n"
  "\rConnectionRet\022-\n\tfunc_info\030\001 \003(\0132\032.yi.C"
  "onnectionRet.FuncInfo\032G\n\010FuncInfo\022\021\n\tfun"
  "c_name\030\001 \002(\t\022\023\n\013params_type\030\002 \002(\t\022\023\n\013ret"
  "urn_type\030\003 \002(\t\"\220\004\n\014FunctionCall\022\025\n\rfunct"
  "ion_name\030\001 \002(\t\0225\n\016add_int_params\030\002 \001(\0132\035"
  ".yi.FunctionCall.AddIntParams\022;\n\021add_dou"
  "ble_params\030\003 \001(\0132 .yi.FunctionCall.AddDo"
  "ubleParams\022;\n\021add_string_params\030\004 \001(\0132 ."
  "yi.FunctionCall.AddStringParams\022=\n\022playe"
  "r_move_params\030\005 \001(\0132!.yi.FunctionCall.Pl"
  "ayerMoveParams\032+\n\014AddIntParams\022\014\n\004left\030\001"
  " \002(\005\022\r\n\005right\030\002 \002(\005\032.\n\017AddDoubleParams\022\014"
  "\n\004left\030\001 \002(\001\022\r\n\005right\030\002 \002(\001\032.\n\017AddString"
  "Params\022\014\n\004left\030\001 \002(\t\022\r\n\005right\030\002 \002(\t\032l\n\020P"
  "layerMoveParams\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\r\n"
  "\005speed\030\003 \002(\001\022\024\n\014acceleration\030\004 \002(\001\022\016\n\006as"
  "pect\030\005 \002(\001\022\r\n\005angle\030\006 \002(\001\"\256\003\n\013FunctionRe"
  "t\022\025\n\rfunction_name\030\001 \002(\t\0225\n\022add_int_ret_"
  "params\030\002 \001(\0132\031.yi.FunctionRet.AddIntRet\022"
  ";\n\025add_double_ret_params\030\003 \001(\0132\034.yi.Func"
  "tionRet.AddDoubleRet\022;\n\025add_string_ret_p"
  "arams\030\004 \001(\0132\034.yi.FunctionRet.AddStringRe"
  "t\022=\n\026player_move_ret_params\030\005 \001(\0132\035.yi.F"
  "unctionRet.PlayerMoveRet\032\030\n\tAddIntRet\022\013\n"
  "\003ret\030\001 \002(\005\032\033\n\014AddDoubleRet\022\013\n\003ret\030\001 \002(\001\032"
  "\033\n\014AddStringRet\022\013\n\003ret\030\001 \002(\t\032D\n\rPlayerMo"
  "veRet\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\r\n\005speed\030\003 \002"
  "(\001\022\016\n\006aspect\030\005 \002(\001\"\263\002\n\007Request\022*\n\tcall_t"
  "ype\030\001 \002(\0162\027.yi.Request.RequestType\022)\n\016co"
  "nnection_req\030\002 \001(\0132\021.yi.ConnectionReq\022)\n"
  "\016connection_ret\030\003 \001(\0132\021.yi.ConnectionRet"
  "\022\'\n\rfunction_call\030\004 \001(\0132\020.yi.FunctionCal"
  "l\022%\n\014function_ret\030\005 \001(\0132\017.yi.FunctionRet"
  "\"V\n\013RequestType\022\021\n\rConnectionReq\020\000\022\021\n\rCo"
  "nnectionRet\020\001\022\020\n\014FunctionCall\020\002\022\017\n\013Funct"
  "ionRet\020\003"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Request_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Request_2eproto = {
  false, false, 1448, descriptor_table_protodef_Request_2eproto, "Request.proto", 
  &descriptor_table_Request_2eproto_once, nullptr, 0, 14,
  schemas, file_default_instances, TableStruct_Request_2eproto::offsets,
  file_level_metadata_Request_2eproto, file_level_enum_descriptors_Request_2eproto, file_level_service_descriptors_Request_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Request_2eproto_getter() {
  return &descriptor_table_Request_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Request_2eproto(&descriptor_table_Request_2eproto);
namespace yi {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Request_RequestType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Request_2eproto);
  return file_level_enum_descriptors_Request_2eproto[0];
}
bool Request_RequestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Request_RequestType Request::ConnectionReq;
constexpr Request_RequestType Request::ConnectionRet;
constexpr Request_RequestType Request::FunctionCall;
constexpr Request_RequestType Request::FunctionRet;
constexpr Request_RequestType Request::RequestType_MIN;
constexpr Request_RequestType Request::RequestType_MAX;
constexpr int Request::RequestType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ConnectionReq::_Internal {
 public:
};

ConnectionReq::ConnectionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:yi.ConnectionReq)
}
ConnectionReq::ConnectionReq(const ConnectionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:yi.ConnectionReq)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectionReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectionReq::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ConnectionReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[0]);
}

// ===================================================================

class ConnectionRet_FuncInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<ConnectionRet_FuncInfo>()._has_bits_);
  static void set_has_func_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_params_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_return_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

ConnectionRet_FuncInfo::ConnectionRet_FuncInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:yi.ConnectionRet.FuncInfo)
}
ConnectionRet_FuncInfo::ConnectionRet_FuncInfo(const ConnectionRet_FuncInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  func_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    func_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_func_name()) {
    func_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_func_name(), 
      GetArenaForAllocation());
  }
  params_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    params_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_params_type()) {
    params_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_params_type(), 
      GetArenaForAllocation());
  }
  return_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    return_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_return_type()) {
    return_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_return_type(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:yi.ConnectionRet.FuncInfo)
}

inline void ConnectionRet_FuncInfo::SharedCtor() {
func_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  func_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
params_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  params_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
return_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConnectionRet_FuncInfo::~ConnectionRet_FuncInfo() {
  // @@protoc_insertion_point(destructor:yi.ConnectionRet.FuncInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConnectionRet_FuncInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  func_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  params_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  return_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConnectionRet_FuncInfo::ArenaDtor(void* object) {
  ConnectionRet_FuncInfo* _this = reinterpret_cast< ConnectionRet_FuncInfo* >(object);
  (void)_this;
}
void ConnectionRet_FuncInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnectionRet_FuncInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConnectionRet_FuncInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:yi.ConnectionRet.FuncInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      func_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      params_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      return_type_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionRet_FuncInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string func_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_func_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "yi.ConnectionRet.FuncInfo.func_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string params_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_params_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "yi.ConnectionRet.FuncInfo.params_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string return_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_return_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "yi.ConnectionRet.FuncInfo.return_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectionRet_FuncInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:yi.ConnectionRet.FuncInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string func_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_func_name().data(), static_cast<int>(this->_internal_func_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "yi.ConnectionRet.FuncInfo.func_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_func_name(), target);
  }

  // required string params_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_params_type().data(), static_cast<int>(this->_internal_params_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "yi.ConnectionRet.FuncInfo.params_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_params_type(), target);
  }

  // required string return_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_return_type().data(), static_cast<int>(this->_internal_return_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "yi.ConnectionRet.FuncInfo.return_type");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_return_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yi.ConnectionRet.FuncInfo)
  return target;
}

size_t ConnectionRet_FuncInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:yi.ConnectionRet.FuncInfo)
  size_t total_size = 0;

  if (_internal_has_func_name()) {
    // required string func_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_func_name());
  }

  if (_internal_has_params_type()) {
    // required string params_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_params_type());
  }

  if (_internal_has_return_type()) {
    // required string return_type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_return_type());
  }

  return total_size;
}
size_t ConnectionRet_FuncInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yi.ConnectionRet.FuncInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string func_name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_func_name());

    // required string params_type = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_params_type());

    // required string return_type = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_return_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectionRet_FuncInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConnectionRet_FuncInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectionRet_FuncInfo::GetClassData() const { return &_class_data_; }

void ConnectionRet_FuncInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConnectionRet_FuncInfo *>(to)->MergeFrom(
      static_cast<const ConnectionRet_FuncInfo &>(from));
}


void ConnectionRet_FuncInfo::MergeFrom(const ConnectionRet_FuncInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yi.ConnectionRet.FuncInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_func_name(from._internal_func_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_params_type(from._internal_params_type());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_return_type(from._internal_return_type());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionRet_FuncInfo::CopyFrom(const ConnectionRet_FuncInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yi.ConnectionRet.FuncInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionRet_FuncInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ConnectionRet_FuncInfo::InternalSwap(ConnectionRet_FuncInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &func_name_, lhs_arena,
      &other->func_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &params_type_, lhs_arena,
      &other->params_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &return_type_, lhs_arena,
      &other->return_type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionRet_FuncInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[1]);
}

// ===================================================================

class ConnectionRet::_Internal {
 public:
};

ConnectionRet::ConnectionRet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  func_info_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:yi.ConnectionRet)
}
ConnectionRet::ConnectionRet(const ConnectionRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      func_info_(from.func_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:yi.ConnectionRet)
}

inline void ConnectionRet::SharedCtor() {
}

ConnectionRet::~ConnectionRet() {
  // @@protoc_insertion_point(destructor:yi.ConnectionRet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConnectionRet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ConnectionRet::ArenaDtor(void* object) {
  ConnectionRet* _this = reinterpret_cast< ConnectionRet* >(object);
  (void)_this;
}
void ConnectionRet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConnectionRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConnectionRet::Clear() {
// @@protoc_insertion_point(message_clear_start:yi.ConnectionRet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  func_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConnectionRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .yi.ConnectionRet.FuncInfo func_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_func_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConnectionRet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:yi.ConnectionRet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .yi.ConnectionRet.FuncInfo func_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_func_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_func_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yi.ConnectionRet)
  return target;
}

size_t ConnectionRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yi.ConnectionRet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .yi.ConnectionRet.FuncInfo func_info = 1;
  total_size += 1UL * this->_internal_func_info_size();
  for (const auto& msg : this->func_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectionRet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConnectionRet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectionRet::GetClassData() const { return &_class_data_; }

void ConnectionRet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ConnectionRet *>(to)->MergeFrom(
      static_cast<const ConnectionRet &>(from));
}


void ConnectionRet::MergeFrom(const ConnectionRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yi.ConnectionRet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  func_info_.MergeFrom(from.func_info_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConnectionRet::CopyFrom(const ConnectionRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yi.ConnectionRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionRet::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(func_info_))
    return false;
  return true;
}

void ConnectionRet::InternalSwap(ConnectionRet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  func_info_.InternalSwap(&other->func_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ConnectionRet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[2]);
}

// ===================================================================

class FunctionCall_AddIntParams::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionCall_AddIntParams>()._has_bits_);
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_right(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

FunctionCall_AddIntParams::FunctionCall_AddIntParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:yi.FunctionCall.AddIntParams)
}
FunctionCall_AddIntParams::FunctionCall_AddIntParams(const FunctionCall_AddIntParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&left_, &from.left_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_) -
    reinterpret_cast<char*>(&left_)) + sizeof(right_));
  // @@protoc_insertion_point(copy_constructor:yi.FunctionCall.AddIntParams)
}

inline void FunctionCall_AddIntParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&left_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&right_) -
    reinterpret_cast<char*>(&left_)) + sizeof(right_));
}

FunctionCall_AddIntParams::~FunctionCall_AddIntParams() {
  // @@protoc_insertion_point(destructor:yi.FunctionCall.AddIntParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FunctionCall_AddIntParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FunctionCall_AddIntParams::ArenaDtor(void* object) {
  FunctionCall_AddIntParams* _this = reinterpret_cast< FunctionCall_AddIntParams* >(object);
  (void)_this;
}
void FunctionCall_AddIntParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionCall_AddIntParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FunctionCall_AddIntParams::Clear() {
// @@protoc_insertion_point(message_clear_start:yi.FunctionCall.AddIntParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&left_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&right_) -
        reinterpret_cast<char*>(&left_)) + sizeof(right_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionCall_AddIntParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_left(&has_bits);
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_right(&has_bits);
          right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionCall_AddIntParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:yi.FunctionCall.AddIntParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 left = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_left(), target);
  }

  // required int32 right = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_right(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yi.FunctionCall.AddIntParams)
  return target;
}

size_t FunctionCall_AddIntParams::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:yi.FunctionCall.AddIntParams)
  size_t total_size = 0;

  if (_internal_has_left()) {
    // required int32 left = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_left());
  }

  if (_internal_has_right()) {
    // required int32 right = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_right());
  }

  return total_size;
}
size_t FunctionCall_AddIntParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yi.FunctionCall.AddIntParams)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 left = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_left());

    // required int32 right = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_right());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionCall_AddIntParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FunctionCall_AddIntParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionCall_AddIntParams::GetClassData() const { return &_class_data_; }

void FunctionCall_AddIntParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FunctionCall_AddIntParams *>(to)->MergeFrom(
      static_cast<const FunctionCall_AddIntParams &>(from));
}


void FunctionCall_AddIntParams::MergeFrom(const FunctionCall_AddIntParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yi.FunctionCall.AddIntParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      left_ = from.left_;
    }
    if (cached_has_bits & 0x00000002u) {
      right_ = from.right_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionCall_AddIntParams::CopyFrom(const FunctionCall_AddIntParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yi.FunctionCall.AddIntParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionCall_AddIntParams::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FunctionCall_AddIntParams::InternalSwap(FunctionCall_AddIntParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FunctionCall_AddIntParams, right_)
      + sizeof(FunctionCall_AddIntParams::right_)
      - PROTOBUF_FIELD_OFFSET(FunctionCall_AddIntParams, left_)>(
          reinterpret_cast<char*>(&left_),
          reinterpret_cast<char*>(&other->left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionCall_AddIntParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[3]);
}

// ===================================================================

class FunctionCall_AddDoubleParams::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionCall_AddDoubleParams>()._has_bits_);
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_right(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

FunctionCall_AddDoubleParams::FunctionCall_AddDoubleParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:yi.FunctionCall.AddDoubleParams)
}
FunctionCall_AddDoubleParams::FunctionCall_AddDoubleParams(const FunctionCall_AddDoubleParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&left_, &from.left_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_) -
    reinterpret_cast<char*>(&left_)) + sizeof(right_));
  // @@protoc_insertion_point(copy_constructor:yi.FunctionCall.AddDoubleParams)
}

inline void FunctionCall_AddDoubleParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&left_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&right_) -
    reinterpret_cast<char*>(&left_)) + sizeof(right_));
}

FunctionCall_AddDoubleParams::~FunctionCall_AddDoubleParams() {
  // @@protoc_insertion_point(destructor:yi.FunctionCall.AddDoubleParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FunctionCall_AddDoubleParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FunctionCall_AddDoubleParams::ArenaDtor(void* object) {
  FunctionCall_AddDoubleParams* _this = reinterpret_cast< FunctionCall_AddDoubleParams* >(object);
  (void)_this;
}
void FunctionCall_AddDoubleParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionCall_AddDoubleParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FunctionCall_AddDoubleParams::Clear() {
// @@protoc_insertion_point(message_clear_start:yi.FunctionCall.AddDoubleParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&left_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&right_) -
        reinterpret_cast<char*>(&left_)) + sizeof(right_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionCall_AddDoubleParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_left(&has_bits);
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_right(&has_bits);
          right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionCall_AddDoubleParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:yi.FunctionCall.AddDoubleParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double left = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_left(), target);
  }

  // required double right = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_right(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yi.FunctionCall.AddDoubleParams)
  return target;
}

size_t FunctionCall_AddDoubleParams::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:yi.FunctionCall.AddDoubleParams)
  size_t total_size = 0;

  if (_internal_has_left()) {
    // required double left = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_right()) {
    // required double right = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t FunctionCall_AddDoubleParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yi.FunctionCall.AddDoubleParams)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double left = 1;
    total_size += 1 + 8;

    // required double right = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionCall_AddDoubleParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FunctionCall_AddDoubleParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionCall_AddDoubleParams::GetClassData() const { return &_class_data_; }

void FunctionCall_AddDoubleParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FunctionCall_AddDoubleParams *>(to)->MergeFrom(
      static_cast<const FunctionCall_AddDoubleParams &>(from));
}


void FunctionCall_AddDoubleParams::MergeFrom(const FunctionCall_AddDoubleParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yi.FunctionCall.AddDoubleParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      left_ = from.left_;
    }
    if (cached_has_bits & 0x00000002u) {
      right_ = from.right_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionCall_AddDoubleParams::CopyFrom(const FunctionCall_AddDoubleParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yi.FunctionCall.AddDoubleParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionCall_AddDoubleParams::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FunctionCall_AddDoubleParams::InternalSwap(FunctionCall_AddDoubleParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FunctionCall_AddDoubleParams, right_)
      + sizeof(FunctionCall_AddDoubleParams::right_)
      - PROTOBUF_FIELD_OFFSET(FunctionCall_AddDoubleParams, left_)>(
          reinterpret_cast<char*>(&left_),
          reinterpret_cast<char*>(&other->left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionCall_AddDoubleParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[4]);
}

// ===================================================================

class FunctionCall_AddStringParams::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionCall_AddStringParams>()._has_bits_);
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_right(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

FunctionCall_AddStringParams::FunctionCall_AddStringParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:yi.FunctionCall.AddStringParams)
}
FunctionCall_AddStringParams::FunctionCall_AddStringParams(const FunctionCall_AddStringParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  left_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    left_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_left()) {
    left_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_left(), 
      GetArenaForAllocation());
  }
  right_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    right_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_right()) {
    right_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_right(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:yi.FunctionCall.AddStringParams)
}

inline void FunctionCall_AddStringParams::SharedCtor() {
left_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  left_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
right_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  right_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FunctionCall_AddStringParams::~FunctionCall_AddStringParams() {
  // @@protoc_insertion_point(destructor:yi.FunctionCall.AddStringParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FunctionCall_AddStringParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  left_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  right_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FunctionCall_AddStringParams::ArenaDtor(void* object) {
  FunctionCall_AddStringParams* _this = reinterpret_cast< FunctionCall_AddStringParams* >(object);
  (void)_this;
}
void FunctionCall_AddStringParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionCall_AddStringParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FunctionCall_AddStringParams::Clear() {
// @@protoc_insertion_point(message_clear_start:yi.FunctionCall.AddStringParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      left_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      right_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionCall_AddStringParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_left();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "yi.FunctionCall.AddStringParams.left");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_right();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "yi.FunctionCall.AddStringParams.right");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionCall_AddStringParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:yi.FunctionCall.AddStringParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string left = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_left().data(), static_cast<int>(this->_internal_left().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "yi.FunctionCall.AddStringParams.left");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_left(), target);
  }

  // required string right = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_right().data(), static_cast<int>(this->_internal_right().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "yi.FunctionCall.AddStringParams.right");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_right(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yi.FunctionCall.AddStringParams)
  return target;
}

size_t FunctionCall_AddStringParams::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:yi.FunctionCall.AddStringParams)
  size_t total_size = 0;

  if (_internal_has_left()) {
    // required string left = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_left());
  }

  if (_internal_has_right()) {
    // required string right = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_right());
  }

  return total_size;
}
size_t FunctionCall_AddStringParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yi.FunctionCall.AddStringParams)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string left = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_left());

    // required string right = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_right());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionCall_AddStringParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FunctionCall_AddStringParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionCall_AddStringParams::GetClassData() const { return &_class_data_; }

void FunctionCall_AddStringParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FunctionCall_AddStringParams *>(to)->MergeFrom(
      static_cast<const FunctionCall_AddStringParams &>(from));
}


void FunctionCall_AddStringParams::MergeFrom(const FunctionCall_AddStringParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yi.FunctionCall.AddStringParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_left(from._internal_left());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_right(from._internal_right());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionCall_AddStringParams::CopyFrom(const FunctionCall_AddStringParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yi.FunctionCall.AddStringParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionCall_AddStringParams::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FunctionCall_AddStringParams::InternalSwap(FunctionCall_AddStringParams* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &left_, lhs_arena,
      &other->left_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &right_, lhs_arena,
      &other->right_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionCall_AddStringParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[5]);
}

// ===================================================================

class FunctionCall_PlayerMoveParams::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionCall_PlayerMoveParams>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_aspect(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

FunctionCall_PlayerMoveParams::FunctionCall_PlayerMoveParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:yi.FunctionCall.PlayerMoveParams)
}
FunctionCall_PlayerMoveParams::FunctionCall_PlayerMoveParams(const FunctionCall_PlayerMoveParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&x_)) + sizeof(angle_));
  // @@protoc_insertion_point(copy_constructor:yi.FunctionCall.PlayerMoveParams)
}

inline void FunctionCall_PlayerMoveParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&x_)) + sizeof(angle_));
}

FunctionCall_PlayerMoveParams::~FunctionCall_PlayerMoveParams() {
  // @@protoc_insertion_point(destructor:yi.FunctionCall.PlayerMoveParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FunctionCall_PlayerMoveParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FunctionCall_PlayerMoveParams::ArenaDtor(void* object) {
  FunctionCall_PlayerMoveParams* _this = reinterpret_cast< FunctionCall_PlayerMoveParams* >(object);
  (void)_this;
}
void FunctionCall_PlayerMoveParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionCall_PlayerMoveParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FunctionCall_PlayerMoveParams::Clear() {
// @@protoc_insertion_point(message_clear_start:yi.FunctionCall.PlayerMoveParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&angle_) -
        reinterpret_cast<char*>(&x_)) + sizeof(angle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionCall_PlayerMoveParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double acceleration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_acceleration(&has_bits);
          acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double aspect = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_aspect(&has_bits);
          aspect_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double angle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_angle(&has_bits);
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionCall_PlayerMoveParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:yi.FunctionCall.PlayerMoveParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // required double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // required double speed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_speed(), target);
  }

  // required double acceleration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_acceleration(), target);
  }

  // required double aspect = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_aspect(), target);
  }

  // required double angle = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yi.FunctionCall.PlayerMoveParams)
  return target;
}

size_t FunctionCall_PlayerMoveParams::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:yi.FunctionCall.PlayerMoveParams)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required double x = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_y()) {
    // required double y = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_speed()) {
    // required double speed = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_acceleration()) {
    // required double acceleration = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_aspect()) {
    // required double aspect = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_angle()) {
    // required double angle = 6;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t FunctionCall_PlayerMoveParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yi.FunctionCall.PlayerMoveParams)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required double x = 1;
    total_size += 1 + 8;

    // required double y = 2;
    total_size += 1 + 8;

    // required double speed = 3;
    total_size += 1 + 8;

    // required double acceleration = 4;
    total_size += 1 + 8;

    // required double aspect = 5;
    total_size += 1 + 8;

    // required double angle = 6;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionCall_PlayerMoveParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FunctionCall_PlayerMoveParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionCall_PlayerMoveParams::GetClassData() const { return &_class_data_; }

void FunctionCall_PlayerMoveParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FunctionCall_PlayerMoveParams *>(to)->MergeFrom(
      static_cast<const FunctionCall_PlayerMoveParams &>(from));
}


void FunctionCall_PlayerMoveParams::MergeFrom(const FunctionCall_PlayerMoveParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yi.FunctionCall.PlayerMoveParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000008u) {
      acceleration_ = from.acceleration_;
    }
    if (cached_has_bits & 0x00000010u) {
      aspect_ = from.aspect_;
    }
    if (cached_has_bits & 0x00000020u) {
      angle_ = from.angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionCall_PlayerMoveParams::CopyFrom(const FunctionCall_PlayerMoveParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yi.FunctionCall.PlayerMoveParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionCall_PlayerMoveParams::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FunctionCall_PlayerMoveParams::InternalSwap(FunctionCall_PlayerMoveParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FunctionCall_PlayerMoveParams, angle_)
      + sizeof(FunctionCall_PlayerMoveParams::angle_)
      - PROTOBUF_FIELD_OFFSET(FunctionCall_PlayerMoveParams, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionCall_PlayerMoveParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[6]);
}

// ===================================================================

class FunctionCall::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionCall>()._has_bits_);
  static void set_has_function_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::yi::FunctionCall_AddIntParams& add_int_params(const FunctionCall* msg);
  static void set_has_add_int_params(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::yi::FunctionCall_AddDoubleParams& add_double_params(const FunctionCall* msg);
  static void set_has_add_double_params(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::yi::FunctionCall_AddStringParams& add_string_params(const FunctionCall* msg);
  static void set_has_add_string_params(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::yi::FunctionCall_PlayerMoveParams& player_move_params(const FunctionCall* msg);
  static void set_has_player_move_params(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::yi::FunctionCall_AddIntParams&
FunctionCall::_Internal::add_int_params(const FunctionCall* msg) {
  return *msg->add_int_params_;
}
const ::yi::FunctionCall_AddDoubleParams&
FunctionCall::_Internal::add_double_params(const FunctionCall* msg) {
  return *msg->add_double_params_;
}
const ::yi::FunctionCall_AddStringParams&
FunctionCall::_Internal::add_string_params(const FunctionCall* msg) {
  return *msg->add_string_params_;
}
const ::yi::FunctionCall_PlayerMoveParams&
FunctionCall::_Internal::player_move_params(const FunctionCall* msg) {
  return *msg->player_move_params_;
}
FunctionCall::FunctionCall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:yi.FunctionCall)
}
FunctionCall::FunctionCall(const FunctionCall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  function_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    function_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_function_name()) {
    function_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_function_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_add_int_params()) {
    add_int_params_ = new ::yi::FunctionCall_AddIntParams(*from.add_int_params_);
  } else {
    add_int_params_ = nullptr;
  }
  if (from._internal_has_add_double_params()) {
    add_double_params_ = new ::yi::FunctionCall_AddDoubleParams(*from.add_double_params_);
  } else {
    add_double_params_ = nullptr;
  }
  if (from._internal_has_add_string_params()) {
    add_string_params_ = new ::yi::FunctionCall_AddStringParams(*from.add_string_params_);
  } else {
    add_string_params_ = nullptr;
  }
  if (from._internal_has_player_move_params()) {
    player_move_params_ = new ::yi::FunctionCall_PlayerMoveParams(*from.player_move_params_);
  } else {
    player_move_params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:yi.FunctionCall)
}

inline void FunctionCall::SharedCtor() {
function_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  function_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&add_int_params_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_move_params_) -
    reinterpret_cast<char*>(&add_int_params_)) + sizeof(player_move_params_));
}

FunctionCall::~FunctionCall() {
  // @@protoc_insertion_point(destructor:yi.FunctionCall)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FunctionCall::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  function_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete add_int_params_;
  if (this != internal_default_instance()) delete add_double_params_;
  if (this != internal_default_instance()) delete add_string_params_;
  if (this != internal_default_instance()) delete player_move_params_;
}

void FunctionCall::ArenaDtor(void* object) {
  FunctionCall* _this = reinterpret_cast< FunctionCall* >(object);
  (void)_this;
}
void FunctionCall::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionCall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FunctionCall::Clear() {
// @@protoc_insertion_point(message_clear_start:yi.FunctionCall)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      function_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(add_int_params_ != nullptr);
      add_int_params_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(add_double_params_ != nullptr);
      add_double_params_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(add_string_params_ != nullptr);
      add_string_params_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(player_move_params_ != nullptr);
      player_move_params_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionCall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string function_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_function_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "yi.FunctionCall.function_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .yi.FunctionCall.AddIntParams add_int_params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_int_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .yi.FunctionCall.AddDoubleParams add_double_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_double_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .yi.FunctionCall.AddStringParams add_string_params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_string_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .yi.FunctionCall.PlayerMoveParams player_move_params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_move_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionCall::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:yi.FunctionCall)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string function_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_function_name().data(), static_cast<int>(this->_internal_function_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "yi.FunctionCall.function_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_function_name(), target);
  }

  // optional .yi.FunctionCall.AddIntParams add_int_params = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::add_int_params(this), target, stream);
  }

  // optional .yi.FunctionCall.AddDoubleParams add_double_params = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::add_double_params(this), target, stream);
  }

  // optional .yi.FunctionCall.AddStringParams add_string_params = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::add_string_params(this), target, stream);
  }

  // optional .yi.FunctionCall.PlayerMoveParams player_move_params = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::player_move_params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yi.FunctionCall)
  return target;
}

size_t FunctionCall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yi.FunctionCall)
  size_t total_size = 0;

  // required string function_name = 1;
  if (_internal_has_function_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_function_name());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional .yi.FunctionCall.AddIntParams add_int_params = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *add_int_params_);
    }

    // optional .yi.FunctionCall.AddDoubleParams add_double_params = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *add_double_params_);
    }

    // optional .yi.FunctionCall.AddStringParams add_string_params = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *add_string_params_);
    }

    // optional .yi.FunctionCall.PlayerMoveParams player_move_params = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *player_move_params_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionCall::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FunctionCall::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionCall::GetClassData() const { return &_class_data_; }

void FunctionCall::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FunctionCall *>(to)->MergeFrom(
      static_cast<const FunctionCall &>(from));
}


void FunctionCall::MergeFrom(const FunctionCall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yi.FunctionCall)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_function_name(from._internal_function_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_add_int_params()->::yi::FunctionCall_AddIntParams::MergeFrom(from._internal_add_int_params());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_add_double_params()->::yi::FunctionCall_AddDoubleParams::MergeFrom(from._internal_add_double_params());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_add_string_params()->::yi::FunctionCall_AddStringParams::MergeFrom(from._internal_add_string_params());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_player_move_params()->::yi::FunctionCall_PlayerMoveParams::MergeFrom(from._internal_player_move_params());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionCall::CopyFrom(const FunctionCall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yi.FunctionCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionCall::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_add_int_params()) {
    if (!add_int_params_->IsInitialized()) return false;
  }
  if (_internal_has_add_double_params()) {
    if (!add_double_params_->IsInitialized()) return false;
  }
  if (_internal_has_add_string_params()) {
    if (!add_string_params_->IsInitialized()) return false;
  }
  if (_internal_has_player_move_params()) {
    if (!player_move_params_->IsInitialized()) return false;
  }
  return true;
}

void FunctionCall::InternalSwap(FunctionCall* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &function_name_, lhs_arena,
      &other->function_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FunctionCall, player_move_params_)
      + sizeof(FunctionCall::player_move_params_)
      - PROTOBUF_FIELD_OFFSET(FunctionCall, add_int_params_)>(
          reinterpret_cast<char*>(&add_int_params_),
          reinterpret_cast<char*>(&other->add_int_params_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionCall::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[7]);
}

// ===================================================================

class FunctionRet_AddIntRet::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionRet_AddIntRet>()._has_bits_);
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

FunctionRet_AddIntRet::FunctionRet_AddIntRet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:yi.FunctionRet.AddIntRet)
}
FunctionRet_AddIntRet::FunctionRet_AddIntRet(const FunctionRet_AddIntRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:yi.FunctionRet.AddIntRet)
}

inline void FunctionRet_AddIntRet::SharedCtor() {
ret_ = 0;
}

FunctionRet_AddIntRet::~FunctionRet_AddIntRet() {
  // @@protoc_insertion_point(destructor:yi.FunctionRet.AddIntRet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FunctionRet_AddIntRet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FunctionRet_AddIntRet::ArenaDtor(void* object) {
  FunctionRet_AddIntRet* _this = reinterpret_cast< FunctionRet_AddIntRet* >(object);
  (void)_this;
}
void FunctionRet_AddIntRet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionRet_AddIntRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FunctionRet_AddIntRet::Clear() {
// @@protoc_insertion_point(message_clear_start:yi.FunctionRet.AddIntRet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionRet_AddIntRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionRet_AddIntRet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:yi.FunctionRet.AddIntRet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 ret = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yi.FunctionRet.AddIntRet)
  return target;
}

size_t FunctionRet_AddIntRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yi.FunctionRet.AddIntRet)
  size_t total_size = 0;

  // required int32 ret = 1;
  if (_internal_has_ret()) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ret());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionRet_AddIntRet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FunctionRet_AddIntRet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionRet_AddIntRet::GetClassData() const { return &_class_data_; }

void FunctionRet_AddIntRet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FunctionRet_AddIntRet *>(to)->MergeFrom(
      static_cast<const FunctionRet_AddIntRet &>(from));
}


void FunctionRet_AddIntRet::MergeFrom(const FunctionRet_AddIntRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yi.FunctionRet.AddIntRet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ret()) {
    _internal_set_ret(from._internal_ret());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionRet_AddIntRet::CopyFrom(const FunctionRet_AddIntRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yi.FunctionRet.AddIntRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionRet_AddIntRet::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FunctionRet_AddIntRet::InternalSwap(FunctionRet_AddIntRet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionRet_AddIntRet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[8]);
}

// ===================================================================

class FunctionRet_AddDoubleRet::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionRet_AddDoubleRet>()._has_bits_);
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

FunctionRet_AddDoubleRet::FunctionRet_AddDoubleRet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:yi.FunctionRet.AddDoubleRet)
}
FunctionRet_AddDoubleRet::FunctionRet_AddDoubleRet(const FunctionRet_AddDoubleRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:yi.FunctionRet.AddDoubleRet)
}

inline void FunctionRet_AddDoubleRet::SharedCtor() {
ret_ = 0;
}

FunctionRet_AddDoubleRet::~FunctionRet_AddDoubleRet() {
  // @@protoc_insertion_point(destructor:yi.FunctionRet.AddDoubleRet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FunctionRet_AddDoubleRet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FunctionRet_AddDoubleRet::ArenaDtor(void* object) {
  FunctionRet_AddDoubleRet* _this = reinterpret_cast< FunctionRet_AddDoubleRet* >(object);
  (void)_this;
}
void FunctionRet_AddDoubleRet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionRet_AddDoubleRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FunctionRet_AddDoubleRet::Clear() {
// @@protoc_insertion_point(message_clear_start:yi.FunctionRet.AddDoubleRet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionRet_AddDoubleRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionRet_AddDoubleRet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:yi.FunctionRet.AddDoubleRet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double ret = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yi.FunctionRet.AddDoubleRet)
  return target;
}

size_t FunctionRet_AddDoubleRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yi.FunctionRet.AddDoubleRet)
  size_t total_size = 0;

  // required double ret = 1;
  if (_internal_has_ret()) {
    total_size += 1 + 8;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionRet_AddDoubleRet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FunctionRet_AddDoubleRet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionRet_AddDoubleRet::GetClassData() const { return &_class_data_; }

void FunctionRet_AddDoubleRet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FunctionRet_AddDoubleRet *>(to)->MergeFrom(
      static_cast<const FunctionRet_AddDoubleRet &>(from));
}


void FunctionRet_AddDoubleRet::MergeFrom(const FunctionRet_AddDoubleRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yi.FunctionRet.AddDoubleRet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ret()) {
    _internal_set_ret(from._internal_ret());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionRet_AddDoubleRet::CopyFrom(const FunctionRet_AddDoubleRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yi.FunctionRet.AddDoubleRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionRet_AddDoubleRet::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FunctionRet_AddDoubleRet::InternalSwap(FunctionRet_AddDoubleRet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionRet_AddDoubleRet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[9]);
}

// ===================================================================

class FunctionRet_AddStringRet::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionRet_AddStringRet>()._has_bits_);
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

FunctionRet_AddStringRet::FunctionRet_AddStringRet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:yi.FunctionRet.AddStringRet)
}
FunctionRet_AddStringRet::FunctionRet_AddStringRet(const FunctionRet_AddStringRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ret()) {
    ret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ret(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:yi.FunctionRet.AddStringRet)
}

inline void FunctionRet_AddStringRet::SharedCtor() {
ret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FunctionRet_AddStringRet::~FunctionRet_AddStringRet() {
  // @@protoc_insertion_point(destructor:yi.FunctionRet.AddStringRet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FunctionRet_AddStringRet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FunctionRet_AddStringRet::ArenaDtor(void* object) {
  FunctionRet_AddStringRet* _this = reinterpret_cast< FunctionRet_AddStringRet* >(object);
  (void)_this;
}
void FunctionRet_AddStringRet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionRet_AddStringRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FunctionRet_AddStringRet::Clear() {
// @@protoc_insertion_point(message_clear_start:yi.FunctionRet.AddStringRet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ret_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionRet_AddStringRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "yi.FunctionRet.AddStringRet.ret");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionRet_AddStringRet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:yi.FunctionRet.AddStringRet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ret = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ret().data(), static_cast<int>(this->_internal_ret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "yi.FunctionRet.AddStringRet.ret");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yi.FunctionRet.AddStringRet)
  return target;
}

size_t FunctionRet_AddStringRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yi.FunctionRet.AddStringRet)
  size_t total_size = 0;

  // required string ret = 1;
  if (_internal_has_ret()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ret());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionRet_AddStringRet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FunctionRet_AddStringRet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionRet_AddStringRet::GetClassData() const { return &_class_data_; }

void FunctionRet_AddStringRet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FunctionRet_AddStringRet *>(to)->MergeFrom(
      static_cast<const FunctionRet_AddStringRet &>(from));
}


void FunctionRet_AddStringRet::MergeFrom(const FunctionRet_AddStringRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yi.FunctionRet.AddStringRet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ret()) {
    _internal_set_ret(from._internal_ret());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionRet_AddStringRet::CopyFrom(const FunctionRet_AddStringRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yi.FunctionRet.AddStringRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionRet_AddStringRet::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FunctionRet_AddStringRet::InternalSwap(FunctionRet_AddStringRet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ret_, lhs_arena,
      &other->ret_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionRet_AddStringRet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[10]);
}

// ===================================================================

class FunctionRet_PlayerMoveRet::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionRet_PlayerMoveRet>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_aspect(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

FunctionRet_PlayerMoveRet::FunctionRet_PlayerMoveRet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:yi.FunctionRet.PlayerMoveRet)
}
FunctionRet_PlayerMoveRet::FunctionRet_PlayerMoveRet(const FunctionRet_PlayerMoveRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&aspect_) -
    reinterpret_cast<char*>(&x_)) + sizeof(aspect_));
  // @@protoc_insertion_point(copy_constructor:yi.FunctionRet.PlayerMoveRet)
}

inline void FunctionRet_PlayerMoveRet::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&aspect_) -
    reinterpret_cast<char*>(&x_)) + sizeof(aspect_));
}

FunctionRet_PlayerMoveRet::~FunctionRet_PlayerMoveRet() {
  // @@protoc_insertion_point(destructor:yi.FunctionRet.PlayerMoveRet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FunctionRet_PlayerMoveRet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FunctionRet_PlayerMoveRet::ArenaDtor(void* object) {
  FunctionRet_PlayerMoveRet* _this = reinterpret_cast< FunctionRet_PlayerMoveRet* >(object);
  (void)_this;
}
void FunctionRet_PlayerMoveRet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionRet_PlayerMoveRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FunctionRet_PlayerMoveRet::Clear() {
// @@protoc_insertion_point(message_clear_start:yi.FunctionRet.PlayerMoveRet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&aspect_) -
        reinterpret_cast<char*>(&x_)) + sizeof(aspect_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionRet_PlayerMoveRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double aspect = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_aspect(&has_bits);
          aspect_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionRet_PlayerMoveRet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:yi.FunctionRet.PlayerMoveRet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // required double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // required double speed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_speed(), target);
  }

  // required double aspect = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_aspect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yi.FunctionRet.PlayerMoveRet)
  return target;
}

size_t FunctionRet_PlayerMoveRet::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:yi.FunctionRet.PlayerMoveRet)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required double x = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_y()) {
    // required double y = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_speed()) {
    // required double speed = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_aspect()) {
    // required double aspect = 5;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t FunctionRet_PlayerMoveRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yi.FunctionRet.PlayerMoveRet)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double x = 1;
    total_size += 1 + 8;

    // required double y = 2;
    total_size += 1 + 8;

    // required double speed = 3;
    total_size += 1 + 8;

    // required double aspect = 5;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionRet_PlayerMoveRet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FunctionRet_PlayerMoveRet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionRet_PlayerMoveRet::GetClassData() const { return &_class_data_; }

void FunctionRet_PlayerMoveRet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FunctionRet_PlayerMoveRet *>(to)->MergeFrom(
      static_cast<const FunctionRet_PlayerMoveRet &>(from));
}


void FunctionRet_PlayerMoveRet::MergeFrom(const FunctionRet_PlayerMoveRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yi.FunctionRet.PlayerMoveRet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000008u) {
      aspect_ = from.aspect_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionRet_PlayerMoveRet::CopyFrom(const FunctionRet_PlayerMoveRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yi.FunctionRet.PlayerMoveRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionRet_PlayerMoveRet::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FunctionRet_PlayerMoveRet::InternalSwap(FunctionRet_PlayerMoveRet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FunctionRet_PlayerMoveRet, aspect_)
      + sizeof(FunctionRet_PlayerMoveRet::aspect_)
      - PROTOBUF_FIELD_OFFSET(FunctionRet_PlayerMoveRet, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionRet_PlayerMoveRet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[11]);
}

// ===================================================================

class FunctionRet::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionRet>()._has_bits_);
  static void set_has_function_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::yi::FunctionRet_AddIntRet& add_int_ret_params(const FunctionRet* msg);
  static void set_has_add_int_ret_params(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::yi::FunctionRet_AddDoubleRet& add_double_ret_params(const FunctionRet* msg);
  static void set_has_add_double_ret_params(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::yi::FunctionRet_AddStringRet& add_string_ret_params(const FunctionRet* msg);
  static void set_has_add_string_ret_params(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::yi::FunctionRet_PlayerMoveRet& player_move_ret_params(const FunctionRet* msg);
  static void set_has_player_move_ret_params(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::yi::FunctionRet_AddIntRet&
FunctionRet::_Internal::add_int_ret_params(const FunctionRet* msg) {
  return *msg->add_int_ret_params_;
}
const ::yi::FunctionRet_AddDoubleRet&
FunctionRet::_Internal::add_double_ret_params(const FunctionRet* msg) {
  return *msg->add_double_ret_params_;
}
const ::yi::FunctionRet_AddStringRet&
FunctionRet::_Internal::add_string_ret_params(const FunctionRet* msg) {
  return *msg->add_string_ret_params_;
}
const ::yi::FunctionRet_PlayerMoveRet&
FunctionRet::_Internal::player_move_ret_params(const FunctionRet* msg) {
  return *msg->player_move_ret_params_;
}
FunctionRet::FunctionRet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:yi.FunctionRet)
}
FunctionRet::FunctionRet(const FunctionRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  function_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    function_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_function_name()) {
    function_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_function_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_add_int_ret_params()) {
    add_int_ret_params_ = new ::yi::FunctionRet_AddIntRet(*from.add_int_ret_params_);
  } else {
    add_int_ret_params_ = nullptr;
  }
  if (from._internal_has_add_double_ret_params()) {
    add_double_ret_params_ = new ::yi::FunctionRet_AddDoubleRet(*from.add_double_ret_params_);
  } else {
    add_double_ret_params_ = nullptr;
  }
  if (from._internal_has_add_string_ret_params()) {
    add_string_ret_params_ = new ::yi::FunctionRet_AddStringRet(*from.add_string_ret_params_);
  } else {
    add_string_ret_params_ = nullptr;
  }
  if (from._internal_has_player_move_ret_params()) {
    player_move_ret_params_ = new ::yi::FunctionRet_PlayerMoveRet(*from.player_move_ret_params_);
  } else {
    player_move_ret_params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:yi.FunctionRet)
}

inline void FunctionRet::SharedCtor() {
function_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  function_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&add_int_ret_params_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_move_ret_params_) -
    reinterpret_cast<char*>(&add_int_ret_params_)) + sizeof(player_move_ret_params_));
}

FunctionRet::~FunctionRet() {
  // @@protoc_insertion_point(destructor:yi.FunctionRet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FunctionRet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  function_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete add_int_ret_params_;
  if (this != internal_default_instance()) delete add_double_ret_params_;
  if (this != internal_default_instance()) delete add_string_ret_params_;
  if (this != internal_default_instance()) delete player_move_ret_params_;
}

void FunctionRet::ArenaDtor(void* object) {
  FunctionRet* _this = reinterpret_cast< FunctionRet* >(object);
  (void)_this;
}
void FunctionRet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FunctionRet::Clear() {
// @@protoc_insertion_point(message_clear_start:yi.FunctionRet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      function_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(add_int_ret_params_ != nullptr);
      add_int_ret_params_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(add_double_ret_params_ != nullptr);
      add_double_ret_params_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(add_string_ret_params_ != nullptr);
      add_string_ret_params_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(player_move_ret_params_ != nullptr);
      player_move_ret_params_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string function_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_function_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "yi.FunctionRet.function_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .yi.FunctionRet.AddIntRet add_int_ret_params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_int_ret_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .yi.FunctionRet.AddDoubleRet add_double_ret_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_double_ret_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .yi.FunctionRet.AddStringRet add_string_ret_params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_string_ret_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .yi.FunctionRet.PlayerMoveRet player_move_ret_params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_move_ret_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionRet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:yi.FunctionRet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string function_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_function_name().data(), static_cast<int>(this->_internal_function_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "yi.FunctionRet.function_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_function_name(), target);
  }

  // optional .yi.FunctionRet.AddIntRet add_int_ret_params = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::add_int_ret_params(this), target, stream);
  }

  // optional .yi.FunctionRet.AddDoubleRet add_double_ret_params = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::add_double_ret_params(this), target, stream);
  }

  // optional .yi.FunctionRet.AddStringRet add_string_ret_params = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::add_string_ret_params(this), target, stream);
  }

  // optional .yi.FunctionRet.PlayerMoveRet player_move_ret_params = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::player_move_ret_params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yi.FunctionRet)
  return target;
}

size_t FunctionRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yi.FunctionRet)
  size_t total_size = 0;

  // required string function_name = 1;
  if (_internal_has_function_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_function_name());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional .yi.FunctionRet.AddIntRet add_int_ret_params = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *add_int_ret_params_);
    }

    // optional .yi.FunctionRet.AddDoubleRet add_double_ret_params = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *add_double_ret_params_);
    }

    // optional .yi.FunctionRet.AddStringRet add_string_ret_params = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *add_string_ret_params_);
    }

    // optional .yi.FunctionRet.PlayerMoveRet player_move_ret_params = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *player_move_ret_params_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionRet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FunctionRet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionRet::GetClassData() const { return &_class_data_; }

void FunctionRet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FunctionRet *>(to)->MergeFrom(
      static_cast<const FunctionRet &>(from));
}


void FunctionRet::MergeFrom(const FunctionRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yi.FunctionRet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_function_name(from._internal_function_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_add_int_ret_params()->::yi::FunctionRet_AddIntRet::MergeFrom(from._internal_add_int_ret_params());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_add_double_ret_params()->::yi::FunctionRet_AddDoubleRet::MergeFrom(from._internal_add_double_ret_params());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_add_string_ret_params()->::yi::FunctionRet_AddStringRet::MergeFrom(from._internal_add_string_ret_params());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_player_move_ret_params()->::yi::FunctionRet_PlayerMoveRet::MergeFrom(from._internal_player_move_ret_params());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionRet::CopyFrom(const FunctionRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yi.FunctionRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionRet::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_add_int_ret_params()) {
    if (!add_int_ret_params_->IsInitialized()) return false;
  }
  if (_internal_has_add_double_ret_params()) {
    if (!add_double_ret_params_->IsInitialized()) return false;
  }
  if (_internal_has_add_string_ret_params()) {
    if (!add_string_ret_params_->IsInitialized()) return false;
  }
  if (_internal_has_player_move_ret_params()) {
    if (!player_move_ret_params_->IsInitialized()) return false;
  }
  return true;
}

void FunctionRet::InternalSwap(FunctionRet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &function_name_, lhs_arena,
      &other->function_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FunctionRet, player_move_ret_params_)
      + sizeof(FunctionRet::player_move_ret_params_)
      - PROTOBUF_FIELD_OFFSET(FunctionRet, add_int_ret_params_)>(
          reinterpret_cast<char*>(&add_int_ret_params_),
          reinterpret_cast<char*>(&other->add_int_ret_params_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionRet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[12]);
}

// ===================================================================

class Request::_Internal {
 public:
  using HasBits = decltype(std::declval<Request>()._has_bits_);
  static void set_has_call_type(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::yi::ConnectionReq& connection_req(const Request* msg);
  static void set_has_connection_req(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::yi::ConnectionRet& connection_ret(const Request* msg);
  static void set_has_connection_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::yi::FunctionCall& function_call(const Request* msg);
  static void set_has_function_call(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::yi::FunctionRet& function_ret(const Request* msg);
  static void set_has_function_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000010) ^ 0x00000010) != 0;
  }
};

const ::yi::ConnectionReq&
Request::_Internal::connection_req(const Request* msg) {
  return *msg->connection_req_;
}
const ::yi::ConnectionRet&
Request::_Internal::connection_ret(const Request* msg) {
  return *msg->connection_ret_;
}
const ::yi::FunctionCall&
Request::_Internal::function_call(const Request* msg) {
  return *msg->function_call_;
}
const ::yi::FunctionRet&
Request::_Internal::function_ret(const Request* msg) {
  return *msg->function_ret_;
}
Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:yi.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_connection_req()) {
    connection_req_ = new ::yi::ConnectionReq(*from.connection_req_);
  } else {
    connection_req_ = nullptr;
  }
  if (from._internal_has_connection_ret()) {
    connection_ret_ = new ::yi::ConnectionRet(*from.connection_ret_);
  } else {
    connection_ret_ = nullptr;
  }
  if (from._internal_has_function_call()) {
    function_call_ = new ::yi::FunctionCall(*from.function_call_);
  } else {
    function_call_ = nullptr;
  }
  if (from._internal_has_function_ret()) {
    function_ret_ = new ::yi::FunctionRet(*from.function_ret_);
  } else {
    function_ret_ = nullptr;
  }
  call_type_ = from.call_type_;
  // @@protoc_insertion_point(copy_constructor:yi.Request)
}

inline void Request::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&connection_req_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&call_type_) -
    reinterpret_cast<char*>(&connection_req_)) + sizeof(call_type_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:yi.Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete connection_req_;
  if (this != internal_default_instance()) delete connection_ret_;
  if (this != internal_default_instance()) delete function_call_;
  if (this != internal_default_instance()) delete function_ret_;
}

void Request::ArenaDtor(void* object) {
  Request* _this = reinterpret_cast< Request* >(object);
  (void)_this;
}
void Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:yi.Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(connection_req_ != nullptr);
      connection_req_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(connection_ret_ != nullptr);
      connection_ret_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(function_call_ != nullptr);
      function_call_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(function_ret_ != nullptr);
      function_ret_->Clear();
    }
  }
  call_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .yi.Request.RequestType call_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::yi::Request_RequestType_IsValid(val))) {
            _internal_set_call_type(static_cast<::yi::Request_RequestType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .yi.ConnectionReq connection_req = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_connection_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .yi.ConnectionRet connection_ret = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_connection_ret(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .yi.FunctionCall function_call = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_function_call(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .yi.FunctionRet function_ret = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_function_ret(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:yi.Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .yi.Request.RequestType call_type = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_call_type(), target);
  }

  // optional .yi.ConnectionReq connection_req = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::connection_req(this), target, stream);
  }

  // optional .yi.ConnectionRet connection_ret = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::connection_ret(this), target, stream);
  }

  // optional .yi.FunctionCall function_call = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::function_call(this), target, stream);
  }

  // optional .yi.FunctionRet function_ret = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::function_ret(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yi.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yi.Request)
  size_t total_size = 0;

  // required .yi.Request.RequestType call_type = 1;
  if (_internal_has_call_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_call_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .yi.ConnectionReq connection_req = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *connection_req_);
    }

    // optional .yi.ConnectionRet connection_ret = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *connection_ret_);
    }

    // optional .yi.FunctionCall function_call = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *function_call_);
    }

    // optional .yi.FunctionRet function_ret = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *function_ret_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Request::GetClassData() const { return &_class_data_; }

void Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Request *>(to)->MergeFrom(
      static_cast<const Request &>(from));
}


void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yi.Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_connection_req()->::yi::ConnectionReq::MergeFrom(from._internal_connection_req());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_connection_ret()->::yi::ConnectionRet::MergeFrom(from._internal_connection_ret());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_function_call()->::yi::FunctionCall::MergeFrom(from._internal_function_call());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_function_ret()->::yi::FunctionRet::MergeFrom(from._internal_function_ret());
    }
    if (cached_has_bits & 0x00000010u) {
      call_type_ = from.call_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yi.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_connection_ret()) {
    if (!connection_ret_->IsInitialized()) return false;
  }
  if (_internal_has_function_call()) {
    if (!function_call_->IsInitialized()) return false;
  }
  if (_internal_has_function_ret()) {
    if (!function_ret_->IsInitialized()) return false;
  }
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Request, call_type_)
      + sizeof(Request::call_type_)
      - PROTOBUF_FIELD_OFFSET(Request, connection_req_)>(
          reinterpret_cast<char*>(&connection_req_),
          reinterpret_cast<char*>(&other->connection_req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace yi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::yi::ConnectionReq* Arena::CreateMaybeMessage< ::yi::ConnectionReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::yi::ConnectionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::yi::ConnectionRet_FuncInfo* Arena::CreateMaybeMessage< ::yi::ConnectionRet_FuncInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::yi::ConnectionRet_FuncInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::yi::ConnectionRet* Arena::CreateMaybeMessage< ::yi::ConnectionRet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::yi::ConnectionRet >(arena);
}
template<> PROTOBUF_NOINLINE ::yi::FunctionCall_AddIntParams* Arena::CreateMaybeMessage< ::yi::FunctionCall_AddIntParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::yi::FunctionCall_AddIntParams >(arena);
}
template<> PROTOBUF_NOINLINE ::yi::FunctionCall_AddDoubleParams* Arena::CreateMaybeMessage< ::yi::FunctionCall_AddDoubleParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::yi::FunctionCall_AddDoubleParams >(arena);
}
template<> PROTOBUF_NOINLINE ::yi::FunctionCall_AddStringParams* Arena::CreateMaybeMessage< ::yi::FunctionCall_AddStringParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::yi::FunctionCall_AddStringParams >(arena);
}
template<> PROTOBUF_NOINLINE ::yi::FunctionCall_PlayerMoveParams* Arena::CreateMaybeMessage< ::yi::FunctionCall_PlayerMoveParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::yi::FunctionCall_PlayerMoveParams >(arena);
}
template<> PROTOBUF_NOINLINE ::yi::FunctionCall* Arena::CreateMaybeMessage< ::yi::FunctionCall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::yi::FunctionCall >(arena);
}
template<> PROTOBUF_NOINLINE ::yi::FunctionRet_AddIntRet* Arena::CreateMaybeMessage< ::yi::FunctionRet_AddIntRet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::yi::FunctionRet_AddIntRet >(arena);
}
template<> PROTOBUF_NOINLINE ::yi::FunctionRet_AddDoubleRet* Arena::CreateMaybeMessage< ::yi::FunctionRet_AddDoubleRet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::yi::FunctionRet_AddDoubleRet >(arena);
}
template<> PROTOBUF_NOINLINE ::yi::FunctionRet_AddStringRet* Arena::CreateMaybeMessage< ::yi::FunctionRet_AddStringRet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::yi::FunctionRet_AddStringRet >(arena);
}
template<> PROTOBUF_NOINLINE ::yi::FunctionRet_PlayerMoveRet* Arena::CreateMaybeMessage< ::yi::FunctionRet_PlayerMoveRet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::yi::FunctionRet_PlayerMoveRet >(arena);
}
template<> PROTOBUF_NOINLINE ::yi::FunctionRet* Arena::CreateMaybeMessage< ::yi::FunctionRet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::yi::FunctionRet >(arena);
}
template<> PROTOBUF_NOINLINE ::yi::Request* Arena::CreateMaybeMessage< ::yi::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::yi::Request >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
