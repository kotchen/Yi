// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Request.proto

#include "Request.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace yi {
constexpr ConnectionReq::ConnectionReq(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ConnectionReqDefaultTypeInternal {
  constexpr ConnectionReqDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConnectionReqDefaultTypeInternal() {}
  union {
    ConnectionReq _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConnectionReqDefaultTypeInternal _ConnectionReq_default_instance_;
constexpr FunctionCall_add_int::FunctionCall_add_int(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : left_(0)
  , right_(0){}
struct FunctionCall_add_intDefaultTypeInternal {
  constexpr FunctionCall_add_intDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctionCall_add_intDefaultTypeInternal() {}
  union {
    FunctionCall_add_int _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctionCall_add_intDefaultTypeInternal _FunctionCall_add_int_default_instance_;
constexpr FunctionCall_add_double::FunctionCall_add_double(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : left_(0)
  , right_(0){}
struct FunctionCall_add_doubleDefaultTypeInternal {
  constexpr FunctionCall_add_doubleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctionCall_add_doubleDefaultTypeInternal() {}
  union {
    FunctionCall_add_double _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctionCall_add_doubleDefaultTypeInternal _FunctionCall_add_double_default_instance_;
constexpr FunctionCall_add_string::FunctionCall_add_string(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : left_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , right_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FunctionCall_add_stringDefaultTypeInternal {
  constexpr FunctionCall_add_stringDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctionCall_add_stringDefaultTypeInternal() {}
  union {
    FunctionCall_add_string _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctionCall_add_stringDefaultTypeInternal _FunctionCall_add_string_default_instance_;
constexpr FunctionCall_player_move::FunctionCall_player_move(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , speed_(0)
  , acceleration_(0)
  , aspect_(0)
  , angle_(0){}
struct FunctionCall_player_moveDefaultTypeInternal {
  constexpr FunctionCall_player_moveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctionCall_player_moveDefaultTypeInternal() {}
  union {
    FunctionCall_player_move _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctionCall_player_moveDefaultTypeInternal _FunctionCall_player_move_default_instance_;
constexpr FunctionCall::FunctionCall(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : function_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , add_int_params_(nullptr)
  , add_double_params_(nullptr)
  , add_string_params_(nullptr)
  , player_move_params_(nullptr){}
struct FunctionCallDefaultTypeInternal {
  constexpr FunctionCallDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctionCallDefaultTypeInternal() {}
  union {
    FunctionCall _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctionCallDefaultTypeInternal _FunctionCall_default_instance_;
constexpr FunctionRet_add_int_ret::FunctionRet_add_int_ret(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ret_(0){}
struct FunctionRet_add_int_retDefaultTypeInternal {
  constexpr FunctionRet_add_int_retDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctionRet_add_int_retDefaultTypeInternal() {}
  union {
    FunctionRet_add_int_ret _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctionRet_add_int_retDefaultTypeInternal _FunctionRet_add_int_ret_default_instance_;
constexpr FunctionRet_add_double_ret::FunctionRet_add_double_ret(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ret_(0){}
struct FunctionRet_add_double_retDefaultTypeInternal {
  constexpr FunctionRet_add_double_retDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctionRet_add_double_retDefaultTypeInternal() {}
  union {
    FunctionRet_add_double_ret _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctionRet_add_double_retDefaultTypeInternal _FunctionRet_add_double_ret_default_instance_;
constexpr FunctionRet_add_string_ret::FunctionRet_add_string_ret(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ret_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FunctionRet_add_string_retDefaultTypeInternal {
  constexpr FunctionRet_add_string_retDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctionRet_add_string_retDefaultTypeInternal() {}
  union {
    FunctionRet_add_string_ret _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctionRet_add_string_retDefaultTypeInternal _FunctionRet_add_string_ret_default_instance_;
constexpr FunctionRet_player_move_ret::FunctionRet_player_move_ret(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , speed_(0)
  , aspect_(0){}
struct FunctionRet_player_move_retDefaultTypeInternal {
  constexpr FunctionRet_player_move_retDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctionRet_player_move_retDefaultTypeInternal() {}
  union {
    FunctionRet_player_move_ret _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctionRet_player_move_retDefaultTypeInternal _FunctionRet_player_move_ret_default_instance_;
constexpr FunctionRet::FunctionRet(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : function_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , add_int_ret_params_(nullptr)
  , add_double_ret_params_(nullptr)
  , add_string_ret_params_(nullptr)
  , player_move_ret_params_(nullptr){}
struct FunctionRetDefaultTypeInternal {
  constexpr FunctionRetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FunctionRetDefaultTypeInternal() {}
  union {
    FunctionRet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FunctionRetDefaultTypeInternal _FunctionRet_default_instance_;
constexpr Request::Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : call_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , connection_req_(nullptr)
  , function_call_(nullptr)
  , function_ret_(nullptr){}
struct RequestDefaultTypeInternal {
  constexpr RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestDefaultTypeInternal() {}
  union {
    Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestDefaultTypeInternal _Request_default_instance_;
}  // namespace yi
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Request_2eproto[12];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Request_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Request_2eproto = nullptr;

const uint32_t TableStruct_Request_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::yi::ConnectionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_add_int, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_add_int, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_add_int, left_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_add_int, right_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_add_double, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_add_double, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_add_double, left_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_add_double, right_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_add_string, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_add_string, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_add_string, left_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_add_string, right_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_player_move, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_player_move, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_player_move, x_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_player_move, y_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_player_move, speed_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_player_move, acceleration_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_player_move, aspect_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall_player_move, angle_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall, function_name_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall, add_int_params_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall, add_double_params_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall, add_string_params_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionCall, player_move_params_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet_add_int_ret, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet_add_int_ret, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet_add_int_ret, ret_),
  0,
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet_add_double_ret, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet_add_double_ret, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet_add_double_ret, ret_),
  0,
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet_add_string_ret, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet_add_string_ret, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet_add_string_ret, ret_),
  0,
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet_player_move_ret, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet_player_move_ret, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet_player_move_ret, x_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet_player_move_ret, y_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet_player_move_ret, speed_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet_player_move_ret, aspect_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet, function_name_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet, add_int_ret_params_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet, add_double_ret_params_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet, add_string_ret_params_),
  PROTOBUF_FIELD_OFFSET(::yi::FunctionRet, player_move_ret_params_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::yi::Request, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::yi::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::yi::Request, call_type_),
  PROTOBUF_FIELD_OFFSET(::yi::Request, connection_req_),
  PROTOBUF_FIELD_OFFSET(::yi::Request, function_call_),
  PROTOBUF_FIELD_OFFSET(::yi::Request, function_ret_),
  0,
  1,
  2,
  3,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::yi::ConnectionReq)},
  { 6, 14, -1, sizeof(::yi::FunctionCall_add_int)},
  { 16, 24, -1, sizeof(::yi::FunctionCall_add_double)},
  { 26, 34, -1, sizeof(::yi::FunctionCall_add_string)},
  { 36, 48, -1, sizeof(::yi::FunctionCall_player_move)},
  { 54, 65, -1, sizeof(::yi::FunctionCall)},
  { 70, 77, -1, sizeof(::yi::FunctionRet_add_int_ret)},
  { 78, 85, -1, sizeof(::yi::FunctionRet_add_double_ret)},
  { 86, 93, -1, sizeof(::yi::FunctionRet_add_string_ret)},
  { 94, 104, -1, sizeof(::yi::FunctionRet_player_move_ret)},
  { 108, 119, -1, sizeof(::yi::FunctionRet)},
  { 124, 134, -1, sizeof(::yi::Request)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::yi::_ConnectionReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::yi::_FunctionCall_add_int_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::yi::_FunctionCall_add_double_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::yi::_FunctionCall_add_string_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::yi::_FunctionCall_player_move_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::yi::_FunctionCall_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::yi::_FunctionRet_add_int_ret_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::yi::_FunctionRet_add_double_ret_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::yi::_FunctionRet_add_string_ret_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::yi::_FunctionRet_player_move_ret_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::yi::_FunctionRet_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::yi::_Request_default_instance_),
};

const char descriptor_table_protodef_Request_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rRequest.proto\022\002yi\"\017\n\rConnectionReq\"\350\003\n"
  "\014FunctionCall\022\025\n\rfunction_name\030\001 \002(\t\0220\n\016"
  "add_int_params\030\002 \001(\0132\030.yi.FunctionCall.a"
  "dd_int\0226\n\021add_double_params\030\003 \001(\0132\033.yi.F"
  "unctionCall.add_double\0226\n\021add_string_par"
  "ams\030\004 \001(\0132\033.yi.FunctionCall.add_string\0228"
  "\n\022player_move_params\030\005 \001(\0132\034.yi.Function"
  "Call.player_move\032&\n\007add_int\022\014\n\004left\030\001 \002("
  "\005\022\r\n\005right\030\002 \002(\005\032)\n\nadd_double\022\014\n\004left\030\001"
  " \002(\001\022\r\n\005right\030\002 \002(\001\032)\n\nadd_string\022\014\n\004lef"
  "t\030\001 \002(\t\022\r\n\005right\030\002 \002(\t\032g\n\013player_move\022\t\n"
  "\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\r\n\005speed\030\003 \002(\001\022\024\n\014ac"
  "celeration\030\004 \002(\001\022\016\n\006aspect\030\005 \002(\001\022\r\n\005angl"
  "e\030\006 \002(\001\"\276\003\n\013FunctionRet\022\025\n\rfunction_name"
  "\030\001 \002(\t\0227\n\022add_int_ret_params\030\002 \001(\0132\033.yi."
  "FunctionRet.add_int_ret\022=\n\025add_double_re"
  "t_params\030\003 \001(\0132\036.yi.FunctionRet.add_doub"
  "le_ret\022=\n\025add_string_ret_params\030\004 \001(\0132\036."
  "yi.FunctionRet.add_string_ret\022\?\n\026player_"
  "move_ret_params\030\005 \001(\0132\037.yi.FunctionRet.p"
  "layer_move_ret\032\032\n\013add_int_ret\022\013\n\003ret\030\001 \002"
  "(\005\032\035\n\016add_double_ret\022\013\n\003ret\030\001 \002(\001\032\035\n\016add"
  "_string_ret\022\013\n\003ret\030\001 \002(\t\032F\n\017player_move_"
  "ret\022\t\n\001x\030\001 \002(\001\022\t\n\001y\030\002 \002(\001\022\r\n\005speed\030\003 \002(\001"
  "\022\016\n\006aspect\030\005 \002(\001\"\227\001\n\007Request\022\021\n\tcall_typ"
  "e\030\001 \002(\t\022)\n\016connection_req\030\002 \001(\0132\021.yi.Con"
  "nectionReq\022\'\n\rfunction_call\030\003 \001(\0132\020.yi.F"
  "unctionCall\022%\n\014function_ret\030\004 \001(\0132\017.yi.F"
  "unctionRet"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Request_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Request_2eproto = {
  false, false, 1130, descriptor_table_protodef_Request_2eproto, "Request.proto", 
  &descriptor_table_Request_2eproto_once, nullptr, 0, 12,
  schemas, file_default_instances, TableStruct_Request_2eproto::offsets,
  file_level_metadata_Request_2eproto, file_level_enum_descriptors_Request_2eproto, file_level_service_descriptors_Request_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_Request_2eproto_getter() {
  return &descriptor_table_Request_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_Request_2eproto(&descriptor_table_Request_2eproto);
namespace yi {

// ===================================================================

class ConnectionReq::_Internal {
 public:
};

ConnectionReq::ConnectionReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:yi.ConnectionReq)
}
ConnectionReq::ConnectionReq(const ConnectionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:yi.ConnectionReq)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConnectionReq::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConnectionReq::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ConnectionReq::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[0]);
}

// ===================================================================

class FunctionCall_add_int::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionCall_add_int>()._has_bits_);
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_right(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

FunctionCall_add_int::FunctionCall_add_int(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:yi.FunctionCall.add_int)
}
FunctionCall_add_int::FunctionCall_add_int(const FunctionCall_add_int& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&left_, &from.left_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_) -
    reinterpret_cast<char*>(&left_)) + sizeof(right_));
  // @@protoc_insertion_point(copy_constructor:yi.FunctionCall.add_int)
}

inline void FunctionCall_add_int::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&left_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&right_) -
    reinterpret_cast<char*>(&left_)) + sizeof(right_));
}

FunctionCall_add_int::~FunctionCall_add_int() {
  // @@protoc_insertion_point(destructor:yi.FunctionCall.add_int)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FunctionCall_add_int::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FunctionCall_add_int::ArenaDtor(void* object) {
  FunctionCall_add_int* _this = reinterpret_cast< FunctionCall_add_int* >(object);
  (void)_this;
}
void FunctionCall_add_int::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionCall_add_int::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FunctionCall_add_int::Clear() {
// @@protoc_insertion_point(message_clear_start:yi.FunctionCall.add_int)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&left_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&right_) -
        reinterpret_cast<char*>(&left_)) + sizeof(right_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionCall_add_int::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_left(&has_bits);
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required int32 right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_right(&has_bits);
          right_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionCall_add_int::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:yi.FunctionCall.add_int)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 left = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_left(), target);
  }

  // required int32 right = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_right(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yi.FunctionCall.add_int)
  return target;
}

size_t FunctionCall_add_int::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:yi.FunctionCall.add_int)
  size_t total_size = 0;

  if (_internal_has_left()) {
    // required int32 left = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_left());
  }

  if (_internal_has_right()) {
    // required int32 right = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_right());
  }

  return total_size;
}
size_t FunctionCall_add_int::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yi.FunctionCall.add_int)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 left = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_left());

    // required int32 right = 2;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_right());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionCall_add_int::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FunctionCall_add_int::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionCall_add_int::GetClassData() const { return &_class_data_; }

void FunctionCall_add_int::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FunctionCall_add_int *>(to)->MergeFrom(
      static_cast<const FunctionCall_add_int &>(from));
}


void FunctionCall_add_int::MergeFrom(const FunctionCall_add_int& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yi.FunctionCall.add_int)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      left_ = from.left_;
    }
    if (cached_has_bits & 0x00000002u) {
      right_ = from.right_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionCall_add_int::CopyFrom(const FunctionCall_add_int& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yi.FunctionCall.add_int)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionCall_add_int::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FunctionCall_add_int::InternalSwap(FunctionCall_add_int* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FunctionCall_add_int, right_)
      + sizeof(FunctionCall_add_int::right_)
      - PROTOBUF_FIELD_OFFSET(FunctionCall_add_int, left_)>(
          reinterpret_cast<char*>(&left_),
          reinterpret_cast<char*>(&other->left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionCall_add_int::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[1]);
}

// ===================================================================

class FunctionCall_add_double::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionCall_add_double>()._has_bits_);
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_right(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

FunctionCall_add_double::FunctionCall_add_double(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:yi.FunctionCall.add_double)
}
FunctionCall_add_double::FunctionCall_add_double(const FunctionCall_add_double& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&left_, &from.left_,
    static_cast<size_t>(reinterpret_cast<char*>(&right_) -
    reinterpret_cast<char*>(&left_)) + sizeof(right_));
  // @@protoc_insertion_point(copy_constructor:yi.FunctionCall.add_double)
}

inline void FunctionCall_add_double::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&left_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&right_) -
    reinterpret_cast<char*>(&left_)) + sizeof(right_));
}

FunctionCall_add_double::~FunctionCall_add_double() {
  // @@protoc_insertion_point(destructor:yi.FunctionCall.add_double)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FunctionCall_add_double::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FunctionCall_add_double::ArenaDtor(void* object) {
  FunctionCall_add_double* _this = reinterpret_cast< FunctionCall_add_double* >(object);
  (void)_this;
}
void FunctionCall_add_double::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionCall_add_double::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FunctionCall_add_double::Clear() {
// @@protoc_insertion_point(message_clear_start:yi.FunctionCall.add_double)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&left_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&right_) -
        reinterpret_cast<char*>(&left_)) + sizeof(right_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionCall_add_double::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_left(&has_bits);
          left_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_right(&has_bits);
          right_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionCall_add_double::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:yi.FunctionCall.add_double)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double left = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_left(), target);
  }

  // required double right = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_right(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yi.FunctionCall.add_double)
  return target;
}

size_t FunctionCall_add_double::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:yi.FunctionCall.add_double)
  size_t total_size = 0;

  if (_internal_has_left()) {
    // required double left = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_right()) {
    // required double right = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t FunctionCall_add_double::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yi.FunctionCall.add_double)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double left = 1;
    total_size += 1 + 8;

    // required double right = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionCall_add_double::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FunctionCall_add_double::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionCall_add_double::GetClassData() const { return &_class_data_; }

void FunctionCall_add_double::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FunctionCall_add_double *>(to)->MergeFrom(
      static_cast<const FunctionCall_add_double &>(from));
}


void FunctionCall_add_double::MergeFrom(const FunctionCall_add_double& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yi.FunctionCall.add_double)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      left_ = from.left_;
    }
    if (cached_has_bits & 0x00000002u) {
      right_ = from.right_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionCall_add_double::CopyFrom(const FunctionCall_add_double& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yi.FunctionCall.add_double)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionCall_add_double::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FunctionCall_add_double::InternalSwap(FunctionCall_add_double* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FunctionCall_add_double, right_)
      + sizeof(FunctionCall_add_double::right_)
      - PROTOBUF_FIELD_OFFSET(FunctionCall_add_double, left_)>(
          reinterpret_cast<char*>(&left_),
          reinterpret_cast<char*>(&other->left_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionCall_add_double::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[2]);
}

// ===================================================================

class FunctionCall_add_string::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionCall_add_string>()._has_bits_);
  static void set_has_left(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_right(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

FunctionCall_add_string::FunctionCall_add_string(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:yi.FunctionCall.add_string)
}
FunctionCall_add_string::FunctionCall_add_string(const FunctionCall_add_string& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  left_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    left_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_left()) {
    left_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_left(), 
      GetArenaForAllocation());
  }
  right_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    right_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_right()) {
    right_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_right(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:yi.FunctionCall.add_string)
}

inline void FunctionCall_add_string::SharedCtor() {
left_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  left_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
right_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  right_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FunctionCall_add_string::~FunctionCall_add_string() {
  // @@protoc_insertion_point(destructor:yi.FunctionCall.add_string)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FunctionCall_add_string::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  left_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  right_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FunctionCall_add_string::ArenaDtor(void* object) {
  FunctionCall_add_string* _this = reinterpret_cast< FunctionCall_add_string* >(object);
  (void)_this;
}
void FunctionCall_add_string::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionCall_add_string::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FunctionCall_add_string::Clear() {
// @@protoc_insertion_point(message_clear_start:yi.FunctionCall.add_string)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      left_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      right_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionCall_add_string::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string left = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_left();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "yi.FunctionCall.add_string.left");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string right = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_right();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "yi.FunctionCall.add_string.right");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionCall_add_string::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:yi.FunctionCall.add_string)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string left = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_left().data(), static_cast<int>(this->_internal_left().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "yi.FunctionCall.add_string.left");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_left(), target);
  }

  // required string right = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_right().data(), static_cast<int>(this->_internal_right().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "yi.FunctionCall.add_string.right");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_right(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yi.FunctionCall.add_string)
  return target;
}

size_t FunctionCall_add_string::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:yi.FunctionCall.add_string)
  size_t total_size = 0;

  if (_internal_has_left()) {
    // required string left = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_left());
  }

  if (_internal_has_right()) {
    // required string right = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_right());
  }

  return total_size;
}
size_t FunctionCall_add_string::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yi.FunctionCall.add_string)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string left = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_left());

    // required string right = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_right());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionCall_add_string::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FunctionCall_add_string::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionCall_add_string::GetClassData() const { return &_class_data_; }

void FunctionCall_add_string::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FunctionCall_add_string *>(to)->MergeFrom(
      static_cast<const FunctionCall_add_string &>(from));
}


void FunctionCall_add_string::MergeFrom(const FunctionCall_add_string& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yi.FunctionCall.add_string)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_left(from._internal_left());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_right(from._internal_right());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionCall_add_string::CopyFrom(const FunctionCall_add_string& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yi.FunctionCall.add_string)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionCall_add_string::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FunctionCall_add_string::InternalSwap(FunctionCall_add_string* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &left_, lhs_arena,
      &other->left_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &right_, lhs_arena,
      &other->right_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionCall_add_string::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[3]);
}

// ===================================================================

class FunctionCall_player_move::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionCall_player_move>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_acceleration(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_aspect(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000003f) ^ 0x0000003f) != 0;
  }
};

FunctionCall_player_move::FunctionCall_player_move(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:yi.FunctionCall.player_move)
}
FunctionCall_player_move::FunctionCall_player_move(const FunctionCall_player_move& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&x_)) + sizeof(angle_));
  // @@protoc_insertion_point(copy_constructor:yi.FunctionCall.player_move)
}

inline void FunctionCall_player_move::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&angle_) -
    reinterpret_cast<char*>(&x_)) + sizeof(angle_));
}

FunctionCall_player_move::~FunctionCall_player_move() {
  // @@protoc_insertion_point(destructor:yi.FunctionCall.player_move)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FunctionCall_player_move::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FunctionCall_player_move::ArenaDtor(void* object) {
  FunctionCall_player_move* _this = reinterpret_cast< FunctionCall_player_move* >(object);
  (void)_this;
}
void FunctionCall_player_move::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionCall_player_move::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FunctionCall_player_move::Clear() {
// @@protoc_insertion_point(message_clear_start:yi.FunctionCall.player_move)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&angle_) -
        reinterpret_cast<char*>(&x_)) + sizeof(angle_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionCall_player_move::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double acceleration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _Internal::set_has_acceleration(&has_bits);
          acceleration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double aspect = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_aspect(&has_bits);
          aspect_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double angle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _Internal::set_has_angle(&has_bits);
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionCall_player_move::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:yi.FunctionCall.player_move)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // required double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // required double speed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_speed(), target);
  }

  // required double acceleration = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_acceleration(), target);
  }

  // required double aspect = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_aspect(), target);
  }

  // required double angle = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yi.FunctionCall.player_move)
  return target;
}

size_t FunctionCall_player_move::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:yi.FunctionCall.player_move)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required double x = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_y()) {
    // required double y = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_speed()) {
    // required double speed = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_acceleration()) {
    // required double acceleration = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_aspect()) {
    // required double aspect = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_angle()) {
    // required double angle = 6;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t FunctionCall_player_move::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yi.FunctionCall.player_move)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000003f) ^ 0x0000003f) == 0) {  // All required fields are present.
    // required double x = 1;
    total_size += 1 + 8;

    // required double y = 2;
    total_size += 1 + 8;

    // required double speed = 3;
    total_size += 1 + 8;

    // required double acceleration = 4;
    total_size += 1 + 8;

    // required double aspect = 5;
    total_size += 1 + 8;

    // required double angle = 6;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionCall_player_move::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FunctionCall_player_move::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionCall_player_move::GetClassData() const { return &_class_data_; }

void FunctionCall_player_move::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FunctionCall_player_move *>(to)->MergeFrom(
      static_cast<const FunctionCall_player_move &>(from));
}


void FunctionCall_player_move::MergeFrom(const FunctionCall_player_move& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yi.FunctionCall.player_move)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000008u) {
      acceleration_ = from.acceleration_;
    }
    if (cached_has_bits & 0x00000010u) {
      aspect_ = from.aspect_;
    }
    if (cached_has_bits & 0x00000020u) {
      angle_ = from.angle_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionCall_player_move::CopyFrom(const FunctionCall_player_move& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yi.FunctionCall.player_move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionCall_player_move::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FunctionCall_player_move::InternalSwap(FunctionCall_player_move* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FunctionCall_player_move, angle_)
      + sizeof(FunctionCall_player_move::angle_)
      - PROTOBUF_FIELD_OFFSET(FunctionCall_player_move, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionCall_player_move::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[4]);
}

// ===================================================================

class FunctionCall::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionCall>()._has_bits_);
  static void set_has_function_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::yi::FunctionCall_add_int& add_int_params(const FunctionCall* msg);
  static void set_has_add_int_params(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::yi::FunctionCall_add_double& add_double_params(const FunctionCall* msg);
  static void set_has_add_double_params(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::yi::FunctionCall_add_string& add_string_params(const FunctionCall* msg);
  static void set_has_add_string_params(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::yi::FunctionCall_player_move& player_move_params(const FunctionCall* msg);
  static void set_has_player_move_params(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::yi::FunctionCall_add_int&
FunctionCall::_Internal::add_int_params(const FunctionCall* msg) {
  return *msg->add_int_params_;
}
const ::yi::FunctionCall_add_double&
FunctionCall::_Internal::add_double_params(const FunctionCall* msg) {
  return *msg->add_double_params_;
}
const ::yi::FunctionCall_add_string&
FunctionCall::_Internal::add_string_params(const FunctionCall* msg) {
  return *msg->add_string_params_;
}
const ::yi::FunctionCall_player_move&
FunctionCall::_Internal::player_move_params(const FunctionCall* msg) {
  return *msg->player_move_params_;
}
FunctionCall::FunctionCall(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:yi.FunctionCall)
}
FunctionCall::FunctionCall(const FunctionCall& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  function_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    function_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_function_name()) {
    function_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_function_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_add_int_params()) {
    add_int_params_ = new ::yi::FunctionCall_add_int(*from.add_int_params_);
  } else {
    add_int_params_ = nullptr;
  }
  if (from._internal_has_add_double_params()) {
    add_double_params_ = new ::yi::FunctionCall_add_double(*from.add_double_params_);
  } else {
    add_double_params_ = nullptr;
  }
  if (from._internal_has_add_string_params()) {
    add_string_params_ = new ::yi::FunctionCall_add_string(*from.add_string_params_);
  } else {
    add_string_params_ = nullptr;
  }
  if (from._internal_has_player_move_params()) {
    player_move_params_ = new ::yi::FunctionCall_player_move(*from.player_move_params_);
  } else {
    player_move_params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:yi.FunctionCall)
}

inline void FunctionCall::SharedCtor() {
function_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  function_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&add_int_params_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_move_params_) -
    reinterpret_cast<char*>(&add_int_params_)) + sizeof(player_move_params_));
}

FunctionCall::~FunctionCall() {
  // @@protoc_insertion_point(destructor:yi.FunctionCall)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FunctionCall::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  function_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete add_int_params_;
  if (this != internal_default_instance()) delete add_double_params_;
  if (this != internal_default_instance()) delete add_string_params_;
  if (this != internal_default_instance()) delete player_move_params_;
}

void FunctionCall::ArenaDtor(void* object) {
  FunctionCall* _this = reinterpret_cast< FunctionCall* >(object);
  (void)_this;
}
void FunctionCall::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionCall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FunctionCall::Clear() {
// @@protoc_insertion_point(message_clear_start:yi.FunctionCall)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      function_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(add_int_params_ != nullptr);
      add_int_params_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(add_double_params_ != nullptr);
      add_double_params_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(add_string_params_ != nullptr);
      add_string_params_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(player_move_params_ != nullptr);
      player_move_params_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionCall::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string function_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_function_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "yi.FunctionCall.function_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .yi.FunctionCall.add_int add_int_params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_int_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .yi.FunctionCall.add_double add_double_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_double_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .yi.FunctionCall.add_string add_string_params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_string_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .yi.FunctionCall.player_move player_move_params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_move_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionCall::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:yi.FunctionCall)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string function_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_function_name().data(), static_cast<int>(this->_internal_function_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "yi.FunctionCall.function_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_function_name(), target);
  }

  // optional .yi.FunctionCall.add_int add_int_params = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::add_int_params(this), target, stream);
  }

  // optional .yi.FunctionCall.add_double add_double_params = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::add_double_params(this), target, stream);
  }

  // optional .yi.FunctionCall.add_string add_string_params = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::add_string_params(this), target, stream);
  }

  // optional .yi.FunctionCall.player_move player_move_params = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::player_move_params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yi.FunctionCall)
  return target;
}

size_t FunctionCall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yi.FunctionCall)
  size_t total_size = 0;

  // required string function_name = 1;
  if (_internal_has_function_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_function_name());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional .yi.FunctionCall.add_int add_int_params = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *add_int_params_);
    }

    // optional .yi.FunctionCall.add_double add_double_params = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *add_double_params_);
    }

    // optional .yi.FunctionCall.add_string add_string_params = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *add_string_params_);
    }

    // optional .yi.FunctionCall.player_move player_move_params = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *player_move_params_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionCall::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FunctionCall::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionCall::GetClassData() const { return &_class_data_; }

void FunctionCall::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FunctionCall *>(to)->MergeFrom(
      static_cast<const FunctionCall &>(from));
}


void FunctionCall::MergeFrom(const FunctionCall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yi.FunctionCall)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_function_name(from._internal_function_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_add_int_params()->::yi::FunctionCall_add_int::MergeFrom(from._internal_add_int_params());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_add_double_params()->::yi::FunctionCall_add_double::MergeFrom(from._internal_add_double_params());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_add_string_params()->::yi::FunctionCall_add_string::MergeFrom(from._internal_add_string_params());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_player_move_params()->::yi::FunctionCall_player_move::MergeFrom(from._internal_player_move_params());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionCall::CopyFrom(const FunctionCall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yi.FunctionCall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionCall::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_add_int_params()) {
    if (!add_int_params_->IsInitialized()) return false;
  }
  if (_internal_has_add_double_params()) {
    if (!add_double_params_->IsInitialized()) return false;
  }
  if (_internal_has_add_string_params()) {
    if (!add_string_params_->IsInitialized()) return false;
  }
  if (_internal_has_player_move_params()) {
    if (!player_move_params_->IsInitialized()) return false;
  }
  return true;
}

void FunctionCall::InternalSwap(FunctionCall* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &function_name_, lhs_arena,
      &other->function_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FunctionCall, player_move_params_)
      + sizeof(FunctionCall::player_move_params_)
      - PROTOBUF_FIELD_OFFSET(FunctionCall, add_int_params_)>(
          reinterpret_cast<char*>(&add_int_params_),
          reinterpret_cast<char*>(&other->add_int_params_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionCall::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[5]);
}

// ===================================================================

class FunctionRet_add_int_ret::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionRet_add_int_ret>()._has_bits_);
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

FunctionRet_add_int_ret::FunctionRet_add_int_ret(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:yi.FunctionRet.add_int_ret)
}
FunctionRet_add_int_ret::FunctionRet_add_int_ret(const FunctionRet_add_int_ret& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:yi.FunctionRet.add_int_ret)
}

inline void FunctionRet_add_int_ret::SharedCtor() {
ret_ = 0;
}

FunctionRet_add_int_ret::~FunctionRet_add_int_ret() {
  // @@protoc_insertion_point(destructor:yi.FunctionRet.add_int_ret)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FunctionRet_add_int_ret::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FunctionRet_add_int_ret::ArenaDtor(void* object) {
  FunctionRet_add_int_ret* _this = reinterpret_cast< FunctionRet_add_int_ret* >(object);
  (void)_this;
}
void FunctionRet_add_int_ret::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionRet_add_int_ret::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FunctionRet_add_int_ret::Clear() {
// @@protoc_insertion_point(message_clear_start:yi.FunctionRet.add_int_ret)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionRet_add_int_ret::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required int32 ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionRet_add_int_ret::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:yi.FunctionRet.add_int_ret)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 ret = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yi.FunctionRet.add_int_ret)
  return target;
}

size_t FunctionRet_add_int_ret::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yi.FunctionRet.add_int_ret)
  size_t total_size = 0;

  // required int32 ret = 1;
  if (_internal_has_ret()) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_ret());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionRet_add_int_ret::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FunctionRet_add_int_ret::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionRet_add_int_ret::GetClassData() const { return &_class_data_; }

void FunctionRet_add_int_ret::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FunctionRet_add_int_ret *>(to)->MergeFrom(
      static_cast<const FunctionRet_add_int_ret &>(from));
}


void FunctionRet_add_int_ret::MergeFrom(const FunctionRet_add_int_ret& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yi.FunctionRet.add_int_ret)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ret()) {
    _internal_set_ret(from._internal_ret());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionRet_add_int_ret::CopyFrom(const FunctionRet_add_int_ret& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yi.FunctionRet.add_int_ret)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionRet_add_int_ret::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FunctionRet_add_int_ret::InternalSwap(FunctionRet_add_int_ret* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionRet_add_int_ret::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[6]);
}

// ===================================================================

class FunctionRet_add_double_ret::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionRet_add_double_ret>()._has_bits_);
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

FunctionRet_add_double_ret::FunctionRet_add_double_ret(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:yi.FunctionRet.add_double_ret)
}
FunctionRet_add_double_ret::FunctionRet_add_double_ret(const FunctionRet_add_double_ret& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ret_ = from.ret_;
  // @@protoc_insertion_point(copy_constructor:yi.FunctionRet.add_double_ret)
}

inline void FunctionRet_add_double_ret::SharedCtor() {
ret_ = 0;
}

FunctionRet_add_double_ret::~FunctionRet_add_double_ret() {
  // @@protoc_insertion_point(destructor:yi.FunctionRet.add_double_ret)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FunctionRet_add_double_ret::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FunctionRet_add_double_ret::ArenaDtor(void* object) {
  FunctionRet_add_double_ret* _this = reinterpret_cast< FunctionRet_add_double_ret* >(object);
  (void)_this;
}
void FunctionRet_add_double_ret::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionRet_add_double_ret::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FunctionRet_add_double_ret::Clear() {
// @@protoc_insertion_point(message_clear_start:yi.FunctionRet.add_double_ret)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ret_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionRet_add_double_ret::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_ret(&has_bits);
          ret_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionRet_add_double_ret::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:yi.FunctionRet.add_double_ret)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double ret = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yi.FunctionRet.add_double_ret)
  return target;
}

size_t FunctionRet_add_double_ret::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yi.FunctionRet.add_double_ret)
  size_t total_size = 0;

  // required double ret = 1;
  if (_internal_has_ret()) {
    total_size += 1 + 8;
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionRet_add_double_ret::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FunctionRet_add_double_ret::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionRet_add_double_ret::GetClassData() const { return &_class_data_; }

void FunctionRet_add_double_ret::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FunctionRet_add_double_ret *>(to)->MergeFrom(
      static_cast<const FunctionRet_add_double_ret &>(from));
}


void FunctionRet_add_double_ret::MergeFrom(const FunctionRet_add_double_ret& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yi.FunctionRet.add_double_ret)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ret()) {
    _internal_set_ret(from._internal_ret());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionRet_add_double_ret::CopyFrom(const FunctionRet_add_double_ret& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yi.FunctionRet.add_double_ret)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionRet_add_double_ret::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FunctionRet_add_double_ret::InternalSwap(FunctionRet_add_double_ret* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(ret_, other->ret_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionRet_add_double_ret::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[7]);
}

// ===================================================================

class FunctionRet_add_string_ret::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionRet_add_string_ret>()._has_bits_);
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

FunctionRet_add_string_ret::FunctionRet_add_string_ret(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:yi.FunctionRet.add_string_ret)
}
FunctionRet_add_string_ret::FunctionRet_add_string_ret(const FunctionRet_add_string_ret& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_ret()) {
    ret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ret(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:yi.FunctionRet.add_string_ret)
}

inline void FunctionRet_add_string_ret::SharedCtor() {
ret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FunctionRet_add_string_ret::~FunctionRet_add_string_ret() {
  // @@protoc_insertion_point(destructor:yi.FunctionRet.add_string_ret)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FunctionRet_add_string_ret::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FunctionRet_add_string_ret::ArenaDtor(void* object) {
  FunctionRet_add_string_ret* _this = reinterpret_cast< FunctionRet_add_string_ret* >(object);
  (void)_this;
}
void FunctionRet_add_string_ret::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionRet_add_string_ret::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FunctionRet_add_string_ret::Clear() {
// @@protoc_insertion_point(message_clear_start:yi.FunctionRet.add_string_ret)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ret_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionRet_add_string_ret::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string ret = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "yi.FunctionRet.add_string_ret.ret");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionRet_add_string_ret::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:yi.FunctionRet.add_string_ret)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string ret = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ret().data(), static_cast<int>(this->_internal_ret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "yi.FunctionRet.add_string_ret.ret");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yi.FunctionRet.add_string_ret)
  return target;
}

size_t FunctionRet_add_string_ret::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yi.FunctionRet.add_string_ret)
  size_t total_size = 0;

  // required string ret = 1;
  if (_internal_has_ret()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ret());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionRet_add_string_ret::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FunctionRet_add_string_ret::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionRet_add_string_ret::GetClassData() const { return &_class_data_; }

void FunctionRet_add_string_ret::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FunctionRet_add_string_ret *>(to)->MergeFrom(
      static_cast<const FunctionRet_add_string_ret &>(from));
}


void FunctionRet_add_string_ret::MergeFrom(const FunctionRet_add_string_ret& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yi.FunctionRet.add_string_ret)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ret()) {
    _internal_set_ret(from._internal_ret());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionRet_add_string_ret::CopyFrom(const FunctionRet_add_string_ret& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yi.FunctionRet.add_string_ret)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionRet_add_string_ret::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FunctionRet_add_string_ret::InternalSwap(FunctionRet_add_string_ret* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ret_, lhs_arena,
      &other->ret_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionRet_add_string_ret::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[8]);
}

// ===================================================================

class FunctionRet_player_move_ret::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionRet_player_move_ret>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_aspect(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

FunctionRet_player_move_ret::FunctionRet_player_move_ret(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:yi.FunctionRet.player_move_ret)
}
FunctionRet_player_move_ret::FunctionRet_player_move_ret(const FunctionRet_player_move_ret& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&aspect_) -
    reinterpret_cast<char*>(&x_)) + sizeof(aspect_));
  // @@protoc_insertion_point(copy_constructor:yi.FunctionRet.player_move_ret)
}

inline void FunctionRet_player_move_ret::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&aspect_) -
    reinterpret_cast<char*>(&x_)) + sizeof(aspect_));
}

FunctionRet_player_move_ret::~FunctionRet_player_move_ret() {
  // @@protoc_insertion_point(destructor:yi.FunctionRet.player_move_ret)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FunctionRet_player_move_ret::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FunctionRet_player_move_ret::ArenaDtor(void* object) {
  FunctionRet_player_move_ret* _this = reinterpret_cast< FunctionRet_player_move_ret* >(object);
  (void)_this;
}
void FunctionRet_player_move_ret::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionRet_player_move_ret::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FunctionRet_player_move_ret::Clear() {
// @@protoc_insertion_point(message_clear_start:yi.FunctionRet.player_move_ret)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&aspect_) -
        reinterpret_cast<char*>(&x_)) + sizeof(aspect_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionRet_player_move_ret::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double speed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _Internal::set_has_speed(&has_bits);
          speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // required double aspect = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _Internal::set_has_aspect(&has_bits);
          aspect_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionRet_player_move_ret::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:yi.FunctionRet.player_move_ret)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // required double y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // required double speed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_speed(), target);
  }

  // required double aspect = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_aspect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yi.FunctionRet.player_move_ret)
  return target;
}

size_t FunctionRet_player_move_ret::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:yi.FunctionRet.player_move_ret)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required double x = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_y()) {
    // required double y = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_speed()) {
    // required double speed = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_aspect()) {
    // required double aspect = 5;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t FunctionRet_player_move_ret::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yi.FunctionRet.player_move_ret)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double x = 1;
    total_size += 1 + 8;

    // required double y = 2;
    total_size += 1 + 8;

    // required double speed = 3;
    total_size += 1 + 8;

    // required double aspect = 5;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionRet_player_move_ret::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FunctionRet_player_move_ret::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionRet_player_move_ret::GetClassData() const { return &_class_data_; }

void FunctionRet_player_move_ret::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FunctionRet_player_move_ret *>(to)->MergeFrom(
      static_cast<const FunctionRet_player_move_ret &>(from));
}


void FunctionRet_player_move_ret::MergeFrom(const FunctionRet_player_move_ret& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yi.FunctionRet.player_move_ret)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      speed_ = from.speed_;
    }
    if (cached_has_bits & 0x00000008u) {
      aspect_ = from.aspect_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionRet_player_move_ret::CopyFrom(const FunctionRet_player_move_ret& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yi.FunctionRet.player_move_ret)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionRet_player_move_ret::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FunctionRet_player_move_ret::InternalSwap(FunctionRet_player_move_ret* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FunctionRet_player_move_ret, aspect_)
      + sizeof(FunctionRet_player_move_ret::aspect_)
      - PROTOBUF_FIELD_OFFSET(FunctionRet_player_move_ret, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionRet_player_move_ret::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[9]);
}

// ===================================================================

class FunctionRet::_Internal {
 public:
  using HasBits = decltype(std::declval<FunctionRet>()._has_bits_);
  static void set_has_function_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::yi::FunctionRet_add_int_ret& add_int_ret_params(const FunctionRet* msg);
  static void set_has_add_int_ret_params(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::yi::FunctionRet_add_double_ret& add_double_ret_params(const FunctionRet* msg);
  static void set_has_add_double_ret_params(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::yi::FunctionRet_add_string_ret& add_string_ret_params(const FunctionRet* msg);
  static void set_has_add_string_ret_params(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::yi::FunctionRet_player_move_ret& player_move_ret_params(const FunctionRet* msg);
  static void set_has_player_move_ret_params(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::yi::FunctionRet_add_int_ret&
FunctionRet::_Internal::add_int_ret_params(const FunctionRet* msg) {
  return *msg->add_int_ret_params_;
}
const ::yi::FunctionRet_add_double_ret&
FunctionRet::_Internal::add_double_ret_params(const FunctionRet* msg) {
  return *msg->add_double_ret_params_;
}
const ::yi::FunctionRet_add_string_ret&
FunctionRet::_Internal::add_string_ret_params(const FunctionRet* msg) {
  return *msg->add_string_ret_params_;
}
const ::yi::FunctionRet_player_move_ret&
FunctionRet::_Internal::player_move_ret_params(const FunctionRet* msg) {
  return *msg->player_move_ret_params_;
}
FunctionRet::FunctionRet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:yi.FunctionRet)
}
FunctionRet::FunctionRet(const FunctionRet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  function_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    function_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_function_name()) {
    function_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_function_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_add_int_ret_params()) {
    add_int_ret_params_ = new ::yi::FunctionRet_add_int_ret(*from.add_int_ret_params_);
  } else {
    add_int_ret_params_ = nullptr;
  }
  if (from._internal_has_add_double_ret_params()) {
    add_double_ret_params_ = new ::yi::FunctionRet_add_double_ret(*from.add_double_ret_params_);
  } else {
    add_double_ret_params_ = nullptr;
  }
  if (from._internal_has_add_string_ret_params()) {
    add_string_ret_params_ = new ::yi::FunctionRet_add_string_ret(*from.add_string_ret_params_);
  } else {
    add_string_ret_params_ = nullptr;
  }
  if (from._internal_has_player_move_ret_params()) {
    player_move_ret_params_ = new ::yi::FunctionRet_player_move_ret(*from.player_move_ret_params_);
  } else {
    player_move_ret_params_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:yi.FunctionRet)
}

inline void FunctionRet::SharedCtor() {
function_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  function_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&add_int_ret_params_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&player_move_ret_params_) -
    reinterpret_cast<char*>(&add_int_ret_params_)) + sizeof(player_move_ret_params_));
}

FunctionRet::~FunctionRet() {
  // @@protoc_insertion_point(destructor:yi.FunctionRet)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FunctionRet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  function_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete add_int_ret_params_;
  if (this != internal_default_instance()) delete add_double_ret_params_;
  if (this != internal_default_instance()) delete add_string_ret_params_;
  if (this != internal_default_instance()) delete player_move_ret_params_;
}

void FunctionRet::ArenaDtor(void* object) {
  FunctionRet* _this = reinterpret_cast< FunctionRet* >(object);
  (void)_this;
}
void FunctionRet::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionRet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FunctionRet::Clear() {
// @@protoc_insertion_point(message_clear_start:yi.FunctionRet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      function_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(add_int_ret_params_ != nullptr);
      add_int_ret_params_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(add_double_ret_params_ != nullptr);
      add_double_ret_params_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(add_string_ret_params_ != nullptr);
      add_string_ret_params_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(player_move_ret_params_ != nullptr);
      player_move_ret_params_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FunctionRet::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string function_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_function_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "yi.FunctionRet.function_name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .yi.FunctionRet.add_int_ret add_int_ret_params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_int_ret_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .yi.FunctionRet.add_double_ret add_double_ret_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_double_ret_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .yi.FunctionRet.add_string_ret add_string_ret_params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_string_ret_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .yi.FunctionRet.player_move_ret player_move_ret_params = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_move_ret_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FunctionRet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:yi.FunctionRet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string function_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_function_name().data(), static_cast<int>(this->_internal_function_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "yi.FunctionRet.function_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_function_name(), target);
  }

  // optional .yi.FunctionRet.add_int_ret add_int_ret_params = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::add_int_ret_params(this), target, stream);
  }

  // optional .yi.FunctionRet.add_double_ret add_double_ret_params = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::add_double_ret_params(this), target, stream);
  }

  // optional .yi.FunctionRet.add_string_ret add_string_ret_params = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::add_string_ret_params(this), target, stream);
  }

  // optional .yi.FunctionRet.player_move_ret player_move_ret_params = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::player_move_ret_params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yi.FunctionRet)
  return target;
}

size_t FunctionRet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yi.FunctionRet)
  size_t total_size = 0;

  // required string function_name = 1;
  if (_internal_has_function_name()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_function_name());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional .yi.FunctionRet.add_int_ret add_int_ret_params = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *add_int_ret_params_);
    }

    // optional .yi.FunctionRet.add_double_ret add_double_ret_params = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *add_double_ret_params_);
    }

    // optional .yi.FunctionRet.add_string_ret add_string_ret_params = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *add_string_ret_params_);
    }

    // optional .yi.FunctionRet.player_move_ret player_move_ret_params = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *player_move_ret_params_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FunctionRet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FunctionRet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FunctionRet::GetClassData() const { return &_class_data_; }

void FunctionRet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FunctionRet *>(to)->MergeFrom(
      static_cast<const FunctionRet &>(from));
}


void FunctionRet::MergeFrom(const FunctionRet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yi.FunctionRet)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_function_name(from._internal_function_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_add_int_ret_params()->::yi::FunctionRet_add_int_ret::MergeFrom(from._internal_add_int_ret_params());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_add_double_ret_params()->::yi::FunctionRet_add_double_ret::MergeFrom(from._internal_add_double_ret_params());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_add_string_ret_params()->::yi::FunctionRet_add_string_ret::MergeFrom(from._internal_add_string_ret_params());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_player_move_ret_params()->::yi::FunctionRet_player_move_ret::MergeFrom(from._internal_player_move_ret_params());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FunctionRet::CopyFrom(const FunctionRet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yi.FunctionRet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionRet::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_add_int_ret_params()) {
    if (!add_int_ret_params_->IsInitialized()) return false;
  }
  if (_internal_has_add_double_ret_params()) {
    if (!add_double_ret_params_->IsInitialized()) return false;
  }
  if (_internal_has_add_string_ret_params()) {
    if (!add_string_ret_params_->IsInitialized()) return false;
  }
  if (_internal_has_player_move_ret_params()) {
    if (!player_move_ret_params_->IsInitialized()) return false;
  }
  return true;
}

void FunctionRet::InternalSwap(FunctionRet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &function_name_, lhs_arena,
      &other->function_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FunctionRet, player_move_ret_params_)
      + sizeof(FunctionRet::player_move_ret_params_)
      - PROTOBUF_FIELD_OFFSET(FunctionRet, add_int_ret_params_)>(
          reinterpret_cast<char*>(&add_int_ret_params_),
          reinterpret_cast<char*>(&other->add_int_ret_params_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionRet::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[10]);
}

// ===================================================================

class Request::_Internal {
 public:
  using HasBits = decltype(std::declval<Request>()._has_bits_);
  static void set_has_call_type(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::yi::ConnectionReq& connection_req(const Request* msg);
  static void set_has_connection_req(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::yi::FunctionCall& function_call(const Request* msg);
  static void set_has_function_call(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::yi::FunctionRet& function_ret(const Request* msg);
  static void set_has_function_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

const ::yi::ConnectionReq&
Request::_Internal::connection_req(const Request* msg) {
  return *msg->connection_req_;
}
const ::yi::FunctionCall&
Request::_Internal::function_call(const Request* msg) {
  return *msg->function_call_;
}
const ::yi::FunctionRet&
Request::_Internal::function_ret(const Request* msg) {
  return *msg->function_ret_;
}
Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:yi.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  call_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    call_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_call_type()) {
    call_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_call_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_connection_req()) {
    connection_req_ = new ::yi::ConnectionReq(*from.connection_req_);
  } else {
    connection_req_ = nullptr;
  }
  if (from._internal_has_function_call()) {
    function_call_ = new ::yi::FunctionCall(*from.function_call_);
  } else {
    function_call_ = nullptr;
  }
  if (from._internal_has_function_ret()) {
    function_ret_ = new ::yi::FunctionRet(*from.function_ret_);
  } else {
    function_ret_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:yi.Request)
}

inline void Request::SharedCtor() {
call_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  call_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&connection_req_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&function_ret_) -
    reinterpret_cast<char*>(&connection_req_)) + sizeof(function_ret_));
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:yi.Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  call_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete connection_req_;
  if (this != internal_default_instance()) delete function_call_;
  if (this != internal_default_instance()) delete function_ret_;
}

void Request::ArenaDtor(void* object) {
  Request* _this = reinterpret_cast< Request* >(object);
  (void)_this;
}
void Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:yi.Request)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      call_type_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(connection_req_ != nullptr);
      connection_req_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(function_call_ != nullptr);
      function_call_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(function_ret_ != nullptr);
      function_ret_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string call_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_call_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "yi.Request.call_type");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .yi.ConnectionReq connection_req = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_connection_req(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .yi.FunctionCall function_call = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_function_call(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .yi.FunctionRet function_ret = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_function_ret(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Request::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:yi.Request)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string call_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_call_type().data(), static_cast<int>(this->_internal_call_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "yi.Request.call_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_call_type(), target);
  }

  // optional .yi.ConnectionReq connection_req = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::connection_req(this), target, stream);
  }

  // optional .yi.FunctionCall function_call = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::function_call(this), target, stream);
  }

  // optional .yi.FunctionRet function_ret = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::function_ret(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:yi.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:yi.Request)
  size_t total_size = 0;

  // required string call_type = 1;
  if (_internal_has_call_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_call_type());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional .yi.ConnectionReq connection_req = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *connection_req_);
    }

    // optional .yi.FunctionCall function_call = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *function_call_);
    }

    // optional .yi.FunctionRet function_ret = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *function_ret_);
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Request::GetClassData() const { return &_class_data_; }

void Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Request *>(to)->MergeFrom(
      static_cast<const Request &>(from));
}


void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:yi.Request)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_call_type(from._internal_call_type());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_connection_req()->::yi::ConnectionReq::MergeFrom(from._internal_connection_req());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_function_call()->::yi::FunctionCall::MergeFrom(from._internal_function_call());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_function_ret()->::yi::FunctionRet::MergeFrom(from._internal_function_ret());
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:yi.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_function_call()) {
    if (!function_call_->IsInitialized()) return false;
  }
  if (_internal_has_function_ret()) {
    if (!function_ret_->IsInitialized()) return false;
  }
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &call_type_, lhs_arena,
      &other->call_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Request, function_ret_)
      + sizeof(Request::function_ret_)
      - PROTOBUF_FIELD_OFFSET(Request, connection_req_)>(
          reinterpret_cast<char*>(&connection_req_),
          reinterpret_cast<char*>(&other->connection_req_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_Request_2eproto_getter, &descriptor_table_Request_2eproto_once,
      file_level_metadata_Request_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace yi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::yi::ConnectionReq* Arena::CreateMaybeMessage< ::yi::ConnectionReq >(Arena* arena) {
  return Arena::CreateMessageInternal< ::yi::ConnectionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::yi::FunctionCall_add_int* Arena::CreateMaybeMessage< ::yi::FunctionCall_add_int >(Arena* arena) {
  return Arena::CreateMessageInternal< ::yi::FunctionCall_add_int >(arena);
}
template<> PROTOBUF_NOINLINE ::yi::FunctionCall_add_double* Arena::CreateMaybeMessage< ::yi::FunctionCall_add_double >(Arena* arena) {
  return Arena::CreateMessageInternal< ::yi::FunctionCall_add_double >(arena);
}
template<> PROTOBUF_NOINLINE ::yi::FunctionCall_add_string* Arena::CreateMaybeMessage< ::yi::FunctionCall_add_string >(Arena* arena) {
  return Arena::CreateMessageInternal< ::yi::FunctionCall_add_string >(arena);
}
template<> PROTOBUF_NOINLINE ::yi::FunctionCall_player_move* Arena::CreateMaybeMessage< ::yi::FunctionCall_player_move >(Arena* arena) {
  return Arena::CreateMessageInternal< ::yi::FunctionCall_player_move >(arena);
}
template<> PROTOBUF_NOINLINE ::yi::FunctionCall* Arena::CreateMaybeMessage< ::yi::FunctionCall >(Arena* arena) {
  return Arena::CreateMessageInternal< ::yi::FunctionCall >(arena);
}
template<> PROTOBUF_NOINLINE ::yi::FunctionRet_add_int_ret* Arena::CreateMaybeMessage< ::yi::FunctionRet_add_int_ret >(Arena* arena) {
  return Arena::CreateMessageInternal< ::yi::FunctionRet_add_int_ret >(arena);
}
template<> PROTOBUF_NOINLINE ::yi::FunctionRet_add_double_ret* Arena::CreateMaybeMessage< ::yi::FunctionRet_add_double_ret >(Arena* arena) {
  return Arena::CreateMessageInternal< ::yi::FunctionRet_add_double_ret >(arena);
}
template<> PROTOBUF_NOINLINE ::yi::FunctionRet_add_string_ret* Arena::CreateMaybeMessage< ::yi::FunctionRet_add_string_ret >(Arena* arena) {
  return Arena::CreateMessageInternal< ::yi::FunctionRet_add_string_ret >(arena);
}
template<> PROTOBUF_NOINLINE ::yi::FunctionRet_player_move_ret* Arena::CreateMaybeMessage< ::yi::FunctionRet_player_move_ret >(Arena* arena) {
  return Arena::CreateMessageInternal< ::yi::FunctionRet_player_move_ret >(arena);
}
template<> PROTOBUF_NOINLINE ::yi::FunctionRet* Arena::CreateMaybeMessage< ::yi::FunctionRet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::yi::FunctionRet >(arena);
}
template<> PROTOBUF_NOINLINE ::yi::Request* Arena::CreateMaybeMessage< ::yi::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::yi::Request >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
